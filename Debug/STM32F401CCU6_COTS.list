
STM32F401CCU6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d0  080035d0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080035d0  080035d0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035d0  080035d0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035d4  080035d4  000135d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080035d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000090  08003668  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003668  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000044e8  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012b3  00000000  00000000  000245eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e0  00000000  00000000  000258a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001149  00000000  00000000  00025e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003581  00000000  00000000  00026fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000855d  00000000  00000000  0002a54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000041b  00000000  00000000  00032aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000150c  00000000  00000000  00032ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000343d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002844 	.word	0x08002844

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08002844 	.word	0x08002844

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <TFT_GPIO_PinsInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void TFT_GPIO_PinsInit(port_index_t port, pin_index_t pin)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	460a      	mov	r2, r1
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	4613      	mov	r3, r2
 80009c2:	71bb      	strb	r3, [r7, #6]
	switch (port)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d010      	beq.n	80009ec <TFT_GPIO_PinsInit+0x38>
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	dc13      	bgt.n	80009f6 <TFT_GPIO_PinsInit+0x42>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <TFT_GPIO_PinsInit+0x24>
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d005      	beq.n	80009e2 <TFT_GPIO_PinsInit+0x2e>
			      break;
			    case GPIO_PORTC:
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
			      break;
			    default:
			      break;
 80009d6:	e00e      	b.n	80009f6 <TFT_GPIO_PinsInit+0x42>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 80009d8:	2100      	movs	r1, #0
 80009da:	2000      	movs	r0, #0
 80009dc:	f001 f8d2 	bl	8001b84 <RCC_voidEnablePeripheralClock>
			      break;
 80009e0:	e00a      	b.n	80009f8 <TFT_GPIO_PinsInit+0x44>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80009e2:	2101      	movs	r1, #1
 80009e4:	2000      	movs	r0, #0
 80009e6:	f001 f8cd 	bl	8001b84 <RCC_voidEnablePeripheralClock>
			      break;
 80009ea:	e005      	b.n	80009f8 <TFT_GPIO_PinsInit+0x44>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 80009ec:	2102      	movs	r1, #2
 80009ee:	2000      	movs	r0, #0
 80009f0:	f001 f8c8 	bl	8001b84 <RCC_voidEnablePeripheralClock>
			      break;
 80009f4:	e000      	b.n	80009f8 <TFT_GPIO_PinsInit+0x44>
			      break;
 80009f6:	bf00      	nop
			  }
	GPIO_voidSetPinMode(port,pin,GPIO_OUTPUT_PIN_MODE);
 80009f8:	79b9      	ldrb	r1, [r7, #6]
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2201      	movs	r2, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fec0 	bl	8001784 <GPIO_voidSetPinMode>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <TFT_ResetSequence>:

static void TFT_ResetSequence(TFT_t* TFT_Config)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000a20:	2201      	movs	r2, #1
 8000a22:	4619      	mov	r1, r3
 8000a24:	f000 ffb0 	bl	8001988 <GPIO_voidSetPinValue>
	Delay_us(100);
 8000a28:	2350      	movs	r3, #80	; 0x50
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	e002      	b.n	8000a34 <TFT_ResetSequence+0x28>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f9      	bne.n	8000a2e <TFT_ResetSequence+0x22>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_LOW);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f000 ff9d 	bl	8001988 <GPIO_voidSetPinValue>
	Delay_us(1);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	e002      	b.n	8000a5a <TFT_ResetSequence+0x4e>
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1f9      	bne.n	8000a54 <TFT_ResetSequence+0x48>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f000 ff8a 	bl	8001988 <GPIO_voidSetPinValue>
	Delay_us(100);
 8000a74:	2350      	movs	r3, #80	; 0x50
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	e002      	b.n	8000a80 <TFT_ResetSequence+0x74>
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f9      	bne.n	8000a7a <TFT_ResetSequence+0x6e>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_LOW);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	f000 ff77 	bl	8001988 <GPIO_voidSetPinValue>
	Delay_us(100);
 8000a9a:	2350      	movs	r3, #80	; 0x50
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	e002      	b.n	8000aa6 <TFT_ResetSequence+0x9a>
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f9      	bne.n	8000aa0 <TFT_ResetSequence+0x94>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	f000 ff64 	bl	8001988 <GPIO_voidSetPinValue>
	Delay_ms(120);
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <TFT_ResetSequence+0xd0>)
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	e002      	b.n	8000acc <TFT_ResetSequence+0xc0>
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1f9      	bne.n	8000ac6 <TFT_ResetSequence+0xba>
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	00017700 	.word	0x00017700

08000ae0 <TFT_voidSendCommand>:
static void TFT_voidSendCommand(TFT_t* TFT_Config, u8 Command)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_LOW);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	f000 ff44 	bl	8001988 <GPIO_voidSetPinValue>
	MSPI_TransmitByte(&TFT_Config->TFT_SPI_Config, Command , 1000);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	78f9      	ldrb	r1, [r7, #3]
 8000b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 f983 	bl	8001e14 <MSPI_TransmitByte>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <TFT_voidSendData>:
static void TFT_voidSendData(TFT_t* TFT_Config, u8 Data){
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4619      	mov	r1, r3
 8000b32:	f000 ff29 	bl	8001988 <GPIO_voidSetPinValue>
	MSPI_TransmitByte(&TFT_Config->TFT_SPI_Config, Data , 1000);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	78f9      	ldrb	r1, [r7, #3]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f968 	bl	8001e14 <MSPI_TransmitByte>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <TFT_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void TFT_voidInit(TFT_t* TFT_Config)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	TFT_GPIO_PinsInit(TFT_Config->TFT_RESET_Port, TFT_Config->TFT_RESET_Pin);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000b60:	4619      	mov	r1, r3
 8000b62:	4610      	mov	r0, r2
 8000b64:	f7ff ff26 	bl	80009b4 <TFT_GPIO_PinsInit>
	TFT_GPIO_PinsInit(TFT_Config->TFT_DC_Port, TFT_Config->TFT_DC_Pin);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000b74:	4619      	mov	r1, r3
 8000b76:	4610      	mov	r0, r2
 8000b78:	f7ff ff1c 	bl	80009b4 <TFT_GPIO_PinsInit>
	MSPI_voidInit(&TFT_Config->TFT_SPI_Config);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f8fe 	bl	8001d80 <MSPI_voidInit>
	TFT_ResetSequence(TFT_Config);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff41 	bl	8000a0c <TFT_ResetSequence>
	TFT_voidSendCommand(TFT_Config,SLPOUT_CMD);
 8000b8a:	2111      	movs	r1, #17
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ffa7 	bl	8000ae0 <TFT_voidSendCommand>
	Delay_ms(150);
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <TFT_voidInit+0xb0>)
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e002      	b.n	8000b9e <TFT_voidInit+0x52>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f9      	bne.n	8000b98 <TFT_voidInit+0x4c>
	TFT_voidSendCommand(TFT_Config,COLMOD_CMD);
 8000ba4:	213a      	movs	r1, #58	; 0x3a
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ff9a 	bl	8000ae0 <TFT_voidSendCommand>
	TFT_voidSendData(TFT_Config,RGB565_COLOR_MODE);
 8000bac:	2105      	movs	r1, #5
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffb1 	bl	8000b16 <TFT_voidSendData>
	TFT_voidSendCommand(TFT_Config,INVON_CMD);
 8000bb4:	2121      	movs	r1, #33	; 0x21
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ff92 	bl	8000ae0 <TFT_voidSendCommand>
	TFT_voidSendCommand(TFT_Config,MADCTL_CMD);
 8000bbc:	2136      	movs	r1, #54	; 0x36
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff8e 	bl	8000ae0 <TFT_voidSendCommand>
	TFT_voidSendData(TFT_Config,TOP_TO_BOTTOM_MODE);
 8000bc4:	21c0      	movs	r1, #192	; 0xc0
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffa5 	bl	8000b16 <TFT_voidSendData>
	TFT_FillScreen(TFT_Config,TFT_Config->TFT_InitColor);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f939 	bl	8000e4e <TFT_FillScreen>
	TFT_voidSendCommand(TFT_Config,DISPON_CMD);
 8000bdc:	2129      	movs	r1, #41	; 0x29
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ff7e 	bl	8000ae0 <TFT_voidSendCommand>
	TFT_Config->TFT_Row_Loc = 0;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	TFT_Config->TFT_Col_Loc = 0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	0001d4c0 	.word	0x0001d4c0

08000c00 <TFT_voidSetWindow>:

void TFT_voidSetWindow(TFT_t* TFT_Config ,u8 Copy_u8X0, u8 Copy_u8X1, u8 Copy_u8Y0, u8 Copy_u8Y1)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	4608      	mov	r0, r1
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	70fb      	strb	r3, [r7, #3]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70bb      	strb	r3, [r7, #2]
 8000c16:	4613      	mov	r3, r2
 8000c18:	707b      	strb	r3, [r7, #1]
    // Send Set X Addresses Command
    TFT_voidSendCommand(TFT_Config,CASET_CMD);
 8000c1a:	212a      	movs	r1, #42	; 0x2a
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff5f 	bl	8000ae0 <TFT_voidSendCommand>
    TFT_voidSendData(TFT_Config,0);
 8000c22:	2100      	movs	r1, #0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff76 	bl	8000b16 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config , Copy_u8X0);
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ff71 	bl	8000b16 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config , 0);
 8000c34:	2100      	movs	r1, #0
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff6d 	bl	8000b16 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8X1);
 8000c3c:	78bb      	ldrb	r3, [r7, #2]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff68 	bl	8000b16 <TFT_voidSendData>
    // Send Set Y Addresses Command
    TFT_voidSendCommand(TFT_Config,RASET_CMD);
 8000c46:	212b      	movs	r1, #43	; 0x2b
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff49 	bl	8000ae0 <TFT_voidSendCommand>
    TFT_voidSendData(TFT_Config,0);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff60 	bl	8000b16 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8Y0);
 8000c56:	787b      	ldrb	r3, [r7, #1]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ff5b 	bl	8000b16 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ff57 	bl	8000b16 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8Y1);
 8000c68:	7c3b      	ldrb	r3, [r7, #16]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff52 	bl	8000b16 <TFT_voidSendData>
    TFT_voidSendCommand(TFT_Config,RAM_WR_CMD);
 8000c72:	212c      	movs	r1, #44	; 0x2c
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff33 	bl	8000ae0 <TFT_voidSendCommand>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <TFT_WriteCharPosWithBgColor>:
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
	MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, Copy_pu8Image,TFT_WIDTH*TFT_HEIGHT*2);
}

void TFT_WriteCharPosWithBgColor(TFT_t* TFT_Config,u16 Row, u16 Col, char ch, u16 color, u16 bgcolor)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	4603      	mov	r3, r0
 8000c94:	817b      	strh	r3, [r7, #10]
 8000c96:	460b      	mov	r3, r1
 8000c98:	813b      	strh	r3, [r7, #8]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	71fb      	strb	r3, [r7, #7]
	u16 Local_RowCounter = ZERO_INIT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	82fb      	strh	r3, [r7, #22]
	u16 Local_ColCounter = ZERO_INIT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	82bb      	strh	r3, [r7, #20]
	u16 FontRowData = ZERO_INIT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	827b      	strh	r3, [r7, #18]
	if(Row*TFT_FONT_HEIGHT + TFT_FONT_HEIGHT > TFT_HEIGHT || Col*TFT_FONT_WIDTH + TFT_FONT_WIDTH > TFT_WIDTH)
 8000caa:	897b      	ldrh	r3, [r7, #10]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	4613      	mov	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2ba0      	cmp	r3, #160	; 0xa0
 8000cb8:	f300 8084 	bgt.w	8000dc4 <TFT_WriteCharPosWithBgColor+0x140>
 8000cbc:	893b      	ldrh	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	2b80      	cmp	r3, #128	; 0x80
 8000ccc:	dc7a      	bgt.n	8000dc4 <TFT_WriteCharPosWithBgColor+0x140>
	{
		return;
	}
	else
	{
		TFT_Config->TFT_Col_Loc = Col*TFT_FONT_WIDTH + TFT_FONT_WIDTH;
 8000cce:	893b      	ldrh	r3, [r7, #8]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	441a      	add	r2, r3
 8000cda:	0052      	lsls	r2, r2, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		TFT_voidSetWindow(TFT_Config, Col*TFT_FONT_WIDTH, Col*TFT_FONT_WIDTH + TFT_FONT_WIDTH - 1, Row*TFT_FONT_HEIGHT, Row*TFT_FONT_HEIGHT + TFT_FONT_HEIGHT - 1);
 8000ce6:	893b      	ldrh	r3, [r7, #8]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	441a      	add	r2, r3
 8000cf0:	0052      	lsls	r2, r2, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2d9      	uxtb	r1, r3
 8000cf6:	893b      	ldrh	r3, [r7, #8]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	441a      	add	r2, r3
 8000d02:	0052      	lsls	r2, r2, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	897b      	ldrh	r3, [r7, #10]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	4618      	mov	r0, r3
 8000d12:	00c0      	lsls	r0, r0, #3
 8000d14:	4403      	add	r3, r0
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	b2d8      	uxtb	r0, r3
 8000d1a:	897b      	ldrh	r3, [r7, #10]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461c      	mov	r4, r3
 8000d22:	00e4      	lsls	r4, r4, #3
 8000d24:	4423      	add	r3, r4
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4603      	mov	r3, r0
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f7ff ff64 	bl	8000c00 <TFT_voidSetWindow>
		for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_FONT_HEIGHT; Local_RowCounter++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	82fb      	strh	r3, [r7, #22]
 8000d3c:	e03e      	b.n	8000dbc <TFT_WriteCharPosWithBgColor+0x138>
		{
			FontRowData = (TFT_FONT[(ch - 32)*TFT_FONT_HEIGHT + Local_RowCounter] );
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f1a3 0220 	sub.w	r2, r3, #32
 8000d44:	4613      	mov	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	8afb      	ldrh	r3, [r7, #22]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <TFT_WriteCharPosWithBgColor+0x148>)
 8000d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d58:	827b      	strh	r3, [r7, #18]
			for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_FONT_WIDTH; Local_ColCounter++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	82bb      	strh	r3, [r7, #20]
 8000d5e:	e027      	b.n	8000db0 <TFT_WriteCharPosWithBgColor+0x12c>
			{
				if((FontRowData << Local_ColCounter)& 0X8000)
 8000d60:	8a7a      	ldrh	r2, [r7, #18]
 8000d62:	8abb      	ldrh	r3, [r7, #20]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00e      	beq.n	8000d8e <TFT_WriteCharPosWithBgColor+0x10a>
				{
					TFT_voidSendData(TFT_Config, color>>8);
 8000d70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff fecb 	bl	8000b16 <TFT_voidSendData>
					TFT_voidSendData(TFT_Config,(u8)color);
 8000d80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f7ff fec5 	bl	8000b16 <TFT_voidSendData>
 8000d8c:	e00d      	b.n	8000daa <TFT_WriteCharPosWithBgColor+0x126>
				}
				else
				{
					TFT_voidSendData(TFT_Config,bgcolor>>8);
 8000d8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff febc 	bl	8000b16 <TFT_voidSendData>
					TFT_voidSendData(TFT_Config,(u8)bgcolor);
 8000d9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff feb6 	bl	8000b16 <TFT_voidSendData>
			for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_FONT_WIDTH; Local_ColCounter++)
 8000daa:	8abb      	ldrh	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	82bb      	strh	r3, [r7, #20]
 8000db0:	8abb      	ldrh	r3, [r7, #20]
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d9d4      	bls.n	8000d60 <TFT_WriteCharPosWithBgColor+0xdc>
		for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_FONT_HEIGHT; Local_RowCounter++)
 8000db6:	8afb      	ldrh	r3, [r7, #22]
 8000db8:	3301      	adds	r3, #1
 8000dba:	82fb      	strh	r3, [r7, #22]
 8000dbc:	8afb      	ldrh	r3, [r7, #22]
 8000dbe:	2b11      	cmp	r3, #17
 8000dc0:	d9bd      	bls.n	8000d3e <TFT_WriteCharPosWithBgColor+0xba>
 8000dc2:	e000      	b.n	8000dc6 <TFT_WriteCharPosWithBgColor+0x142>
		return;
 8000dc4:	bf00      	nop
				}
			}
		}
	}
}
 8000dc6:	371c      	adds	r7, #28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	08002874 	.word	0x08002874

08000dd0 <TFT_WriteStringPosWithBgColor>:
void TFT_WriteStringPosWithBgColor(TFT_t* TFT_Config,u16 Row, u16 Col, char*str, u16 color, u16 bgcolor)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	817b      	strh	r3, [r7, #10]
 8000dde:	4613      	mov	r3, r2
 8000de0:	813b      	strh	r3, [r7, #8]
	u8 RowCounter = Row;
 8000de2:	897b      	ldrh	r3, [r7, #10]
 8000de4:	75fb      	strb	r3, [r7, #23]
	u8 ColCounter = Col;
 8000de6:	893b      	ldrh	r3, [r7, #8]
 8000de8:	75bb      	strb	r3, [r7, #22]
	while(*str)
 8000dea:	e026      	b.n	8000e3a <TFT_WriteStringPosWithBgColor+0x6a>
	{
		if(ColCounter + TFT_FONT_WIDTH > TFT_WIDTH)
 8000dec:	7dbb      	ldrb	r3, [r7, #22]
 8000dee:	2b75      	cmp	r3, #117	; 0x75
 8000df0:	d90c      	bls.n	8000e0c <TFT_WriteStringPosWithBgColor+0x3c>
		{
			ColCounter =0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75bb      	strb	r3, [r7, #22]
			RowCounter++;
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	75fb      	strb	r3, [r7, #23]

			if(*str == ' ')
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b20      	cmp	r3, #32
 8000e02:	d103      	bne.n	8000e0c <TFT_WriteStringPosWithBgColor+0x3c>
			{
				str++;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3301      	adds	r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
				continue;
 8000e0a:	e016      	b.n	8000e3a <TFT_WriteStringPosWithBgColor+0x6a>
			}
		}
		if(RowCounter + TFT_FONT_HEIGHT > TFT_HEIGHT)
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	2b8e      	cmp	r3, #142	; 0x8e
 8000e10:	d818      	bhi.n	8000e44 <TFT_WriteStringPosWithBgColor+0x74>
		{
			break;
		}
		TFT_WriteCharPosWithBgColor(TFT_Config,RowCounter,ColCounter,*str,color,bgcolor);
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	b299      	uxth	r1, r3
 8000e16:	7dbb      	ldrb	r3, [r7, #22]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7818      	ldrb	r0, [r3, #0]
 8000e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	8c3b      	ldrh	r3, [r7, #32]
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	4603      	mov	r3, r0
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f7ff ff2b 	bl	8000c84 <TFT_WriteCharPosWithBgColor>
		ColCounter++;
 8000e2e:	7dbb      	ldrb	r3, [r7, #22]
 8000e30:	3301      	adds	r3, #1
 8000e32:	75bb      	strb	r3, [r7, #22]
		str++;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3301      	adds	r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
	while(*str)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1d4      	bne.n	8000dec <TFT_WriteStringPosWithBgColor+0x1c>
	}
}
 8000e42:	e000      	b.n	8000e46 <TFT_WriteStringPosWithBgColor+0x76>
			break;
 8000e44:	bf00      	nop
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <TFT_FillScreen>:
		str++;
	}
}

void TFT_FillScreen(TFT_t* TFT_Config, u16 color)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af02      	add	r7, sp, #8
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	460b      	mov	r3, r1
 8000e58:	807b      	strh	r3, [r7, #2]
	u16 Local_RowCounter = ZERO_INIT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	81fb      	strh	r3, [r7, #14]
	u16 Local_ColCounter = ZERO_INIT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	81bb      	strh	r3, [r7, #12]
	u8 color_arr[2]={color>>8,(u8)color};
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	723b      	strb	r3, [r7, #8]
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	727b      	strb	r3, [r7, #9]
	TFT_voidSetWindow(TFT_Config,0,TFT_WIDTH-1,0,TFT_HEIGHT-1);
 8000e72:	239f      	movs	r3, #159	; 0x9f
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2300      	movs	r3, #0
 8000e78:	227f      	movs	r2, #127	; 0x7f
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff febf 	bl	8000c00 <TFT_voidSetWindow>
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4619      	mov	r1, r3
 8000e92:	f000 fd79 	bl	8001988 <GPIO_voidSetPinValue>
	for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_HEIGHT; Local_RowCounter++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	81fb      	strh	r3, [r7, #14]
 8000e9a:	e012      	b.n	8000ec2 <TFT_FillScreen+0x74>
	{
		for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_WIDTH; Local_ColCounter++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	81bb      	strh	r3, [r7, #12]
 8000ea0:	e009      	b.n	8000eb6 <TFT_FillScreen+0x68>
		{
			MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, color_arr,2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f107 0108 	add.w	r1, r7, #8
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 f818 	bl	8001ee0 <MSPI_DMA_Transmit>
		for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_WIDTH; Local_ColCounter++)
 8000eb0:	89bb      	ldrh	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	81bb      	strh	r3, [r7, #12]
 8000eb6:	89bb      	ldrh	r3, [r7, #12]
 8000eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eba:	d9f2      	bls.n	8000ea2 <TFT_FillScreen+0x54>
	for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_HEIGHT; Local_RowCounter++)
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	81fb      	strh	r3, [r7, #14]
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	2b9f      	cmp	r3, #159	; 0x9f
 8000ec6:	d9e9      	bls.n	8000e9c <TFT_FillScreen+0x4e>
		}
	}
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <TFT_ClearScreen>:

void TFT_ClearScreen(TFT_t* TFT_Config)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	TFT_Config->TFT_Col_Loc = ZERO_INIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	TFT_Config->TFT_Row_Loc = ZERO_INIT;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	TFT_FillScreen(TFT_Config, TFT_Config->TFT_InitColor);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffaa 	bl	8000e4e <TFT_FillScreen>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <DMA_ClearTCInterruptFlag>:
/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************
*********************************************************************************************************************/
static void DMA_ClearTCInterruptFlag(DMA_Config_t* DMA_Config)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	if(DMA_Config->Stream == DMA_STREAM_0)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d108      	bne.n	8000f24 <DMA_ClearTCInterruptFlag+0x22>
	{
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF0_BIT_POS);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 0220 	orr.w	r2, r2, #32
 8000f20:	609a      	str	r2, [r3, #8]
	}
	else if (DMA_Config->Stream == DMA_STREAM_7)
	{
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF7_BIT_POS);
	}
}
 8000f22:	e059      	b.n	8000fd8 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d108      	bne.n	8000f3e <DMA_ClearTCInterruptFlag+0x3c>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF1_BIT_POS);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f3a:	609a      	str	r2, [r3, #8]
}
 8000f3c:	e04c      	b.n	8000fd8 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d108      	bne.n	8000f58 <DMA_ClearTCInterruptFlag+0x56>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF2_BIT_POS);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000f54:	609a      	str	r2, [r3, #8]
}
 8000f56:	e03f      	b.n	8000fd8 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_3)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d108      	bne.n	8000f72 <DMA_ClearTCInterruptFlag+0x70>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF3_BIT_POS);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000f6e:	609a      	str	r2, [r3, #8]
}
 8000f70:	e032      	b.n	8000fd8 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_4)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d108      	bne.n	8000f8c <DMA_ClearTCInterruptFlag+0x8a>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF4_BIT_POS);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 0220 	orr.w	r2, r2, #32
 8000f88:	60da      	str	r2, [r3, #12]
}
 8000f8a:	e025      	b.n	8000fd8 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_5)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d108      	bne.n	8000fa6 <DMA_ClearTCInterruptFlag+0xa4>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF5_BIT_POS);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fa2:	60da      	str	r2, [r3, #12]
}
 8000fa4:	e018      	b.n	8000fd8 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_6)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d108      	bne.n	8000fc0 <DMA_ClearTCInterruptFlag+0xbe>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF6_BIT_POS);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000fbc:	60da      	str	r2, [r3, #12]
}
 8000fbe:	e00b      	b.n	8000fd8 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_7)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	d107      	bne.n	8000fd8 <DMA_ClearTCInterruptFlag+0xd6>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF7_BIT_POS);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000fd6:	60da      	str	r2, [r3, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DMA_Interrupt_Init>:
static void DMA_Interrupt_Init(DMA_Config_t* DMA_Config)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	if(DMA_Config->Instance ==  DMA1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a33      	ldr	r2, [pc, #204]	; (80010c0 <DMA_Interrupt_Init+0xdc>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d11c      	bne.n	8001030 <DMA_Interrupt_Init+0x4c>
	{
		if(DMA_Config->Stream <=6)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d809      	bhi.n	8001012 <DMA_Interrupt_Init+0x2e>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 11);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	330b      	adds	r3, #11
 8001006:	b2db      	uxtb	r3, r3
 8001008:	b25b      	sxtb	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fd22 	bl	8001a54 <MNVIC_voidEnableIRQ>
 8001010:	e006      	b.n	8001020 <DMA_Interrupt_Init+0x3c>
		}
		else if (DMA_Config->Stream == 7 )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b07      	cmp	r3, #7
 8001018:	d102      	bne.n	8001020 <DMA_Interrupt_Init+0x3c>
		{
			MNVIC_voidEnableIRQ(DMA1_Stream7_IRQn);
 800101a:	202f      	movs	r0, #47	; 0x2f
 800101c:	f000 fd1a 	bl	8001a54 <MNVIC_voidEnableIRQ>
		}
		DMA1_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001028:	4926      	ldr	r1, [pc, #152]	; (80010c4 <DMA_Interrupt_Init+0xe0>)
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800102e:	e02a      	b.n	8001086 <DMA_Interrupt_Init+0xa2>
	}
	else if (DMA_Config->Instance == DMA2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a24      	ldr	r2, [pc, #144]	; (80010c8 <DMA_Interrupt_Init+0xe4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d125      	bne.n	8001086 <DMA_Interrupt_Init+0xa2>
	{
		if(DMA_Config->Stream <=4)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b04      	cmp	r3, #4
 8001040:	d809      	bhi.n	8001056 <DMA_Interrupt_Init+0x72>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 56);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3338      	adds	r3, #56	; 0x38
 800104a:	b2db      	uxtb	r3, r3
 800104c:	b25b      	sxtb	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fd00 	bl	8001a54 <MNVIC_voidEnableIRQ>
 8001054:	e010      	b.n	8001078 <DMA_Interrupt_Init+0x94>
		}
		else if ((DMA_Config->Stream > 4) && (DMA_Config->Stream <= 7 ))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b04      	cmp	r3, #4
 800105c:	d90c      	bls.n	8001078 <DMA_Interrupt_Init+0x94>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b07      	cmp	r3, #7
 8001064:	d808      	bhi.n	8001078 <DMA_Interrupt_Init+0x94>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 68);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3344      	adds	r3, #68	; 0x44
 800106e:	b2db      	uxtb	r3, r3
 8001070:	b25b      	sxtb	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fcee 	bl	8001a54 <MNVIC_voidEnableIRQ>
		}
		DMA2_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001080:	4912      	ldr	r1, [pc, #72]	; (80010cc <DMA_Interrupt_Init+0xe8>)
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	else
	{
		/* Nothing */
	}
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR,DMA_TCIE_BIT_POS);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6819      	ldr	r1, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3310      	adds	r3, #16
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6810      	ldr	r0, [r2, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6852      	ldr	r2, [r2, #4]
 80010a4:	f043 0110 	orr.w	r1, r3, #16
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4403      	add	r3, r0
 80010b2:	3310      	adds	r3, #16
 80010b4:	6019      	str	r1, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40026000 	.word	0x40026000
 80010c4:	200000ac 	.word	0x200000ac
 80010c8:	40026400 	.word	0x40026400
 80010cc:	200000cc 	.word	0x200000cc

080010d0 <MDMA_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void MDMA_voidInit(DMA_Config_t* DMA_Config)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	/* Enable DMA Clock */
	if(DMA_Config->Instance ==  DMA1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a24      	ldr	r2, [pc, #144]	; (8001170 <MDMA_voidInit+0xa0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d104      	bne.n	80010ec <MDMA_voidInit+0x1c>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA1EN);
 80010e2:	2115      	movs	r1, #21
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 fd4d 	bl	8001b84 <RCC_voidEnablePeripheralClock>
 80010ea:	e008      	b.n	80010fe <MDMA_voidInit+0x2e>
	}
	else if (DMA_Config->Instance == DMA2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <MDMA_voidInit+0xa4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d103      	bne.n	80010fe <MDMA_voidInit+0x2e>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA2EN);
 80010f6:	2116      	movs	r1, #22
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 fd43 	bl	8001b84 <RCC_voidEnablePeripheralClock>
	else
	{
		/* Nothing */
	}
	/* Clear DMA stream pervious configuration */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6819      	ldr	r1, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	3310      	adds	r3, #16
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	/* Clear DMA TC interrupt Flag */
	DMA_ClearTCInterruptFlag(DMA_Config);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fef3 	bl	8000f02 <DMA_ClearTCInterruptFlag>
	/* Configure DMA Stream */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
			((DMA_Config->Channel) |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
			(DMA_Config->Direction) |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
			((DMA_Config->Channel) |
 8001124:	431a      	orrs	r2, r3
			(DMA_Config->PeriphInc) |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
			(DMA_Config->Direction) |
 800112a:	431a      	orrs	r2, r3
			(DMA_Config->MemInc) |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
			(DMA_Config->PeriphInc) |
 8001130:	431a      	orrs	r2, r3
			(DMA_Config->PeriphDataSize) |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
			(DMA_Config->MemInc) |
 8001136:	ea42 0103 	orr.w	r1, r2, r3
			(DMA_Config->MemDataSize) );
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6810      	ldr	r0, [r2, #0]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6852      	ldr	r2, [r2, #4]
			(DMA_Config->PeriphDataSize) |
 8001146:	4319      	orrs	r1, r3
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4403      	add	r3, r0
 8001152:	3310      	adds	r3, #16
 8001154:	6019      	str	r1, [r3, #0]
	if(DMA_Config->DMA_TC_InterruptEnable == INTERRUPT_ENABLED)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d102      	bne.n	8001166 <MDMA_voidInit+0x96>
	{
		DMA_Interrupt_Init(DMA_Config);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff3f 	bl	8000fe4 <DMA_Interrupt_Init>
	}
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40026000 	.word	0x40026000
 8001174:	40026400 	.word	0x40026400

08001178 <MDMA_voidStart>:
void MDMA_voidStart(DMA_Config_t* DMA_Config , u32* PeriphAddr , u32* MemAddr , u32 DataLength)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
	CLR_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6819      	ldr	r1, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	440b      	add	r3, r1
 8001198:	3310      	adds	r3, #16
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	6810      	ldr	r0, [r2, #0]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	6852      	ldr	r2, [r2, #4]
 80011a4:	f023 0101 	bic.w	r1, r3, #1
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4403      	add	r3, r0
 80011b2:	3310      	adds	r3, #16
 80011b4:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].NDTR = DataLength;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3314      	adds	r3, #20
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	601a      	str	r2, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].PAR = (u32)PeriphAddr;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	68b9      	ldr	r1, [r7, #8]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4403      	add	r3, r0
 80011e4:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].M0AR = (u32)MemAddr;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4403      	add	r3, r0
 80011fc:	3304      	adds	r3, #4
 80011fe:	6019      	str	r1, [r3, #0]
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6819      	ldr	r1, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	3310      	adds	r3, #16
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	6810      	ldr	r0, [r2, #0]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	6852      	ldr	r2, [r2, #4]
 800121e:	f043 0101 	orr.w	r1, r3, #1
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4403      	add	r3, r0
 800122c:	3310      	adds	r3, #16
 800122e:	6019      	str	r1, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DMA1_Stream0_IRQHandler>:

/************************************* DMA1 ISRs************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF0_BIT_POS);
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <DMA1_Stream0_IRQHandler+0x24>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <DMA1_Stream0_IRQHandler+0x24>)
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[0] != NULL)
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <DMA1_Stream0_IRQHandler+0x28>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <DMA1_Stream0_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[0]();
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <DMA1_Stream0_IRQHandler+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4798      	blx	r3
	}
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40026000 	.word	0x40026000
 8001264:	200000ac 	.word	0x200000ac

08001268 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF1_BIT_POS);
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <DMA1_Stream1_IRQHandler+0x24>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <DMA1_Stream1_IRQHandler+0x24>)
 8001272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001276:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[1] != NULL)
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <DMA1_Stream1_IRQHandler+0x28>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <DMA1_Stream1_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[1]();
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <DMA1_Stream1_IRQHandler+0x28>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4798      	blx	r3
	}
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40026000 	.word	0x40026000
 8001290:	200000ac 	.word	0x200000ac

08001294 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF2_BIT_POS);
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <DMA1_Stream2_IRQHandler+0x24>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <DMA1_Stream2_IRQHandler+0x24>)
 800129e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a2:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[2] != NULL)
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <DMA1_Stream2_IRQHandler+0x28>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <DMA1_Stream2_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[2]();
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <DMA1_Stream2_IRQHandler+0x28>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4798      	blx	r3
	}
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40026000 	.word	0x40026000
 80012bc:	200000ac 	.word	0x200000ac

080012c0 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF3_BIT_POS);
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <DMA1_Stream3_IRQHandler+0x24>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <DMA1_Stream3_IRQHandler+0x24>)
 80012ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012ce:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[3] != NULL)
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <DMA1_Stream3_IRQHandler+0x28>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <DMA1_Stream3_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[3]();
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <DMA1_Stream3_IRQHandler+0x28>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4798      	blx	r3
	}
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40026000 	.word	0x40026000
 80012e8:	200000ac 	.word	0x200000ac

080012ec <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF4_BIT_POS);
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <DMA1_Stream4_IRQHandler+0x24>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <DMA1_Stream4_IRQHandler+0x24>)
 80012f6:	f043 0320 	orr.w	r3, r3, #32
 80012fa:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[4] != NULL)
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <DMA1_Stream4_IRQHandler+0x28>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <DMA1_Stream4_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[4]();
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <DMA1_Stream4_IRQHandler+0x28>)
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	4798      	blx	r3
	}
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40026000 	.word	0x40026000
 8001314:	200000ac 	.word	0x200000ac

08001318 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF5_BIT_POS);
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <DMA1_Stream5_IRQHandler+0x24>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <DMA1_Stream5_IRQHandler+0x24>)
 8001322:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001326:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[5] != NULL)
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <DMA1_Stream5_IRQHandler+0x28>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <DMA1_Stream5_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[5]();
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <DMA1_Stream5_IRQHandler+0x28>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	4798      	blx	r3
	}
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40026000 	.word	0x40026000
 8001340:	200000ac 	.word	0x200000ac

08001344 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF6_BIT_POS);
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <DMA1_Stream6_IRQHandler+0x24>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <DMA1_Stream6_IRQHandler+0x24>)
 800134e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001352:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[6] != NULL)
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <DMA1_Stream6_IRQHandler+0x28>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <DMA1_Stream6_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[6]();
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <DMA1_Stream6_IRQHandler+0x28>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4798      	blx	r3
	}
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40026000 	.word	0x40026000
 800136c:	200000ac 	.word	0x200000ac

08001370 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF7_BIT_POS);
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <DMA1_Stream7_IRQHandler+0x24>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <DMA1_Stream7_IRQHandler+0x24>)
 800137a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800137e:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[7] != NULL)
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <DMA1_Stream7_IRQHandler+0x28>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <DMA1_Stream7_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[7]();
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <DMA1_Stream7_IRQHandler+0x28>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4798      	blx	r3
	}
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40026000 	.word	0x40026000
 8001398:	200000ac 	.word	0x200000ac

0800139c <DMA2_Stream0_IRQHandler>:

/************************************* DMA2 ISRs************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF0_BIT_POS);
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DMA2_Stream0_IRQHandler+0x24>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <DMA2_Stream0_IRQHandler+0x24>)
 80013a6:	f043 0320 	orr.w	r3, r3, #32
 80013aa:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[0] != NULL)
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <DMA2_Stream0_IRQHandler+0x28>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <DMA2_Stream0_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[0]();
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <DMA2_Stream0_IRQHandler+0x28>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4798      	blx	r3
	}
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40026400 	.word	0x40026400
 80013c4:	200000cc 	.word	0x200000cc

080013c8 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF1_BIT_POS);
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <DMA2_Stream1_IRQHandler+0x24>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <DMA2_Stream1_IRQHandler+0x24>)
 80013d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d6:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[1] != NULL)
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <DMA2_Stream1_IRQHandler+0x28>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <DMA2_Stream1_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[1]();
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <DMA2_Stream1_IRQHandler+0x28>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4798      	blx	r3
	}
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40026400 	.word	0x40026400
 80013f0:	200000cc 	.word	0x200000cc

080013f4 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF2_BIT_POS);
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <DMA2_Stream2_IRQHandler+0x24>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <DMA2_Stream2_IRQHandler+0x24>)
 80013fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001402:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[2] != NULL)
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <DMA2_Stream2_IRQHandler+0x28>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <DMA2_Stream2_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[2]();
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <DMA2_Stream2_IRQHandler+0x28>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4798      	blx	r3
	}
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40026400 	.word	0x40026400
 800141c:	200000cc 	.word	0x200000cc

08001420 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF3_BIT_POS);
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <DMA2_Stream3_IRQHandler+0x24>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <DMA2_Stream3_IRQHandler+0x24>)
 800142a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800142e:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[3] != NULL)
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <DMA2_Stream3_IRQHandler+0x28>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <DMA2_Stream3_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[3]();
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <DMA2_Stream3_IRQHandler+0x28>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4798      	blx	r3
	}
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40026400 	.word	0x40026400
 8001448:	200000cc 	.word	0x200000cc

0800144c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF4_BIT_POS);
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <DMA2_Stream4_IRQHandler+0x24>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <DMA2_Stream4_IRQHandler+0x24>)
 8001456:	f043 0320 	orr.w	r3, r3, #32
 800145a:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[4] != NULL)
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <DMA2_Stream4_IRQHandler+0x28>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <DMA2_Stream4_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[4]();
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <DMA2_Stream4_IRQHandler+0x28>)
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	4798      	blx	r3
	}
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40026400 	.word	0x40026400
 8001474:	200000cc 	.word	0x200000cc

08001478 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF5_BIT_POS);
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <DMA2_Stream5_IRQHandler+0x24>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <DMA2_Stream5_IRQHandler+0x24>)
 8001482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001486:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[5] != NULL)
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <DMA2_Stream5_IRQHandler+0x28>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <DMA2_Stream5_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[5]();
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <DMA2_Stream5_IRQHandler+0x28>)
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	4798      	blx	r3
	}
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40026400 	.word	0x40026400
 80014a0:	200000cc 	.word	0x200000cc

080014a4 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF6_BIT_POS);
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <DMA2_Stream6_IRQHandler+0x24>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <DMA2_Stream6_IRQHandler+0x24>)
 80014ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b2:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[6] != NULL)
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <DMA2_Stream6_IRQHandler+0x28>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <DMA2_Stream6_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[6]();
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <DMA2_Stream6_IRQHandler+0x28>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4798      	blx	r3
	}
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40026400 	.word	0x40026400
 80014cc:	200000cc 	.word	0x200000cc

080014d0 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF7_BIT_POS);
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <DMA2_Stream7_IRQHandler+0x24>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <DMA2_Stream7_IRQHandler+0x24>)
 80014da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014de:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[7] != NULL)
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <DMA2_Stream7_IRQHandler+0x28>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <DMA2_Stream7_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[7]();
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <DMA2_Stream7_IRQHandler+0x28>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	4798      	blx	r3
	}
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40026400 	.word	0x40026400
 80014f8:	200000cc 	.word	0x200000cc

080014fc <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MEXTI_voidClearPendingFlag+0x2c>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	79fa      	ldrb	r2, [r7, #7]
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	4611      	mov	r1, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <MEXTI_voidClearPendingFlag+0x2c>)
 8001516:	430b      	orrs	r3, r1
 8001518:	6153      	str	r3, [r2, #20]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40013c00 	.word	0x40013c00

0800152c <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <MEXTI_u8GetPendingFlag+0x28>)
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40013c00 	.word	0x40013c00

08001558 <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <EXTI0_IRQHandler+0x1c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <EXTI0_IRQHandler+0x1c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff ffc6 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200000ec 	.word	0x200000ec

08001578 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <EXTI1_IRQHandler+0x1c>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <EXTI1_IRQHandler+0x1c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff ffb6 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200000ec 	.word	0x200000ec

08001598 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <EXTI2_IRQHandler+0x1c>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <EXTI2_IRQHandler+0x1c>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 80015aa:	2002      	movs	r0, #2
 80015ac:	f7ff ffa6 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200000ec 	.word	0x200000ec

080015b8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <EXTI3_IRQHandler+0x1c>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <EXTI3_IRQHandler+0x1c>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 80015ca:	2003      	movs	r0, #3
 80015cc:	f7ff ff96 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000ec 	.word	0x200000ec

080015d8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <EXTI4_IRQHandler+0x1c>)
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <EXTI4_IRQHandler+0x1c>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 80015ea:	2004      	movs	r0, #4
 80015ec:	f7ff ff86 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200000ec 	.word	0x200000ec

080015f8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 80015fc:	2005      	movs	r0, #5
 80015fe:	f7ff ff95 	bl	800152c <MEXTI_u8GetPendingFlag>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00a      	beq.n	800161e <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 8001616:	2005      	movs	r0, #5
 8001618:	f7ff ff70 	bl	80014fc <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 800161c:	e042      	b.n	80016a4 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 800161e:	2006      	movs	r0, #6
 8001620:	f7ff ff84 	bl	800152c <MEXTI_u8GetPendingFlag>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 8001638:	2006      	movs	r0, #6
 800163a:	f7ff ff5f 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 800163e:	e031      	b.n	80016a4 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 8001640:	2007      	movs	r0, #7
 8001642:	f7ff ff73 	bl	800152c <MEXTI_u8GetPendingFlag>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00a      	beq.n	8001662 <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 800165a:	2007      	movs	r0, #7
 800165c:	f7ff ff4e 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 8001660:	e020      	b.n	80016a4 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 8001662:	2008      	movs	r0, #8
 8001664:	f7ff ff62 	bl	800152c <MEXTI_u8GetPendingFlag>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00a      	beq.n	8001684 <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 800167c:	2008      	movs	r0, #8
 800167e:	f7ff ff3d 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 8001682:	e00f      	b.n	80016a4 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 8001684:	2009      	movs	r0, #9
 8001686:	f7ff ff51 	bl	800152c <MEXTI_u8GetPendingFlag>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <EXTI9_5_IRQHandler+0xb0>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 800169e:	2009      	movs	r0, #9
 80016a0:	f7ff ff2c 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200000ec 	.word	0x200000ec

080016ac <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 80016b0:	200a      	movs	r0, #10
 80016b2:	f7ff ff3b 	bl	800152c <MEXTI_u8GetPendingFlag>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 80016ca:	200a      	movs	r0, #10
 80016cc:	f7ff ff16 	bl	80014fc <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 80016d0:	e053      	b.n	800177a <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 80016d2:	200b      	movs	r0, #11
 80016d4:	f7ff ff2a 	bl	800152c <MEXTI_u8GetPendingFlag>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00a      	beq.n	80016f4 <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 80016de:	4b28      	ldr	r3, [pc, #160]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 80016ec:	200b      	movs	r0, #11
 80016ee:	f7ff ff05 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 80016f2:	e042      	b.n	800177a <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 80016f4:	200c      	movs	r0, #12
 80016f6:	f7ff ff19 	bl	800152c <MEXTI_u8GetPendingFlag>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00a      	beq.n	8001716 <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 800170e:	200c      	movs	r0, #12
 8001710:	f7ff fef4 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 8001714:	e031      	b.n	800177a <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 8001716:	200d      	movs	r0, #13
 8001718:	f7ff ff08 	bl	800152c <MEXTI_u8GetPendingFlag>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00a      	beq.n	8001738 <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 8001730:	200d      	movs	r0, #13
 8001732:	f7ff fee3 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 8001736:	e020      	b.n	800177a <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 8001738:	200e      	movs	r0, #14
 800173a:	f7ff fef7 	bl	800152c <MEXTI_u8GetPendingFlag>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00a      	beq.n	800175a <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 8001746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 800174e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001750:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 8001752:	200e      	movs	r0, #14
 8001754:	f7ff fed2 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 8001758:	e00f      	b.n	800177a <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 800175a:	200f      	movs	r0, #15
 800175c:	f7ff fee6 	bl	800152c <MEXTI_u8GetPendingFlag>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 8001768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <EXTI15_10_IRQHandler+0xd4>)
 8001770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001772:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 8001774:	200f      	movs	r0, #15
 8001776:	f7ff fec1 	bl	80014fc <MEXTI_voidClearPendingFlag>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000ec 	.word	0x200000ec

08001784 <GPIO_voidSetPinMode>:
#include"../../../Inc/MCAL/GPIO/GPIO_config.h"
#include"../../../Inc/MCAL/GPIO/GPIO_interface.h"
#include"../../../Inc/MCAL/GPIO/GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	460b      	mov	r3, r1
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	4613      	mov	r3, r2
 8001794:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d02c      	beq.n	80017f6 <GPIO_voidSetPinMode+0x72>
 800179c:	2b02      	cmp	r3, #2
 800179e:	dc3d      	bgt.n	800181c <GPIO_voidSetPinMode+0x98>
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <GPIO_voidSetPinMode+0x26>
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d013      	beq.n	80017d0 <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 80017a8:	e038      	b.n	800181c <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <GPIO_voidSetPinMode+0xa8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	79ba      	ldrb	r2, [r7, #6]
 80017b0:	0052      	lsls	r2, r2, #1
 80017b2:	2103      	movs	r1, #3
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	43d2      	mvns	r2, r2
 80017ba:	4013      	ands	r3, r2
 80017bc:	7979      	ldrb	r1, [r7, #5]
 80017be:	79ba      	ldrb	r2, [r7, #6]
 80017c0:	0052      	lsls	r2, r2, #1
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	4611      	mov	r1, r2
 80017c8:	4a18      	ldr	r2, [pc, #96]	; (800182c <GPIO_voidSetPinMode+0xa8>)
 80017ca:	430b      	orrs	r3, r1
 80017cc:	6013      	str	r3, [r2, #0]
      break;
 80017ce:	e026      	b.n	800181e <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <GPIO_voidSetPinMode+0xac>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	79ba      	ldrb	r2, [r7, #6]
 80017d6:	0052      	lsls	r2, r2, #1
 80017d8:	2103      	movs	r1, #3
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	43d2      	mvns	r2, r2
 80017e0:	4013      	ands	r3, r2
 80017e2:	7979      	ldrb	r1, [r7, #5]
 80017e4:	79ba      	ldrb	r2, [r7, #6]
 80017e6:	0052      	lsls	r2, r2, #1
 80017e8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ec:	4611      	mov	r1, r2
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <GPIO_voidSetPinMode+0xac>)
 80017f0:	430b      	orrs	r3, r1
 80017f2:	6013      	str	r3, [r2, #0]
      break;
 80017f4:	e013      	b.n	800181e <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <GPIO_voidSetPinMode+0xb0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	79ba      	ldrb	r2, [r7, #6]
 80017fc:	0052      	lsls	r2, r2, #1
 80017fe:	2103      	movs	r1, #3
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	43d2      	mvns	r2, r2
 8001806:	4013      	ands	r3, r2
 8001808:	7979      	ldrb	r1, [r7, #5]
 800180a:	79ba      	ldrb	r2, [r7, #6]
 800180c:	0052      	lsls	r2, r2, #1
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	4611      	mov	r1, r2
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <GPIO_voidSetPinMode+0xb0>)
 8001816:	430b      	orrs	r3, r1
 8001818:	6013      	str	r3, [r2, #0]
      break;
 800181a:	e000      	b.n	800181e <GPIO_voidSetPinMode+0x9a>
      break;
 800181c:	bf00      	nop
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020800 	.word	0x40020800

08001838 <GPIO_voidSetPinAlternateFunction>:
    default:
      break;
  }
}
void GPIO_voidSetPinAlternateFunction(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex, u8 Copy_u8AlternateFunction)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	460b      	mov	r3, r1
 8001844:	71bb      	strb	r3, [r7, #6]
 8001846:	4613      	mov	r3, r2
 8001848:	717b      	strb	r3, [r7, #5]
	switch (Copy_PortIndex) {
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d05d      	beq.n	800190c <GPIO_voidSetPinAlternateFunction+0xd4>
 8001850:	2b02      	cmp	r3, #2
 8001852:	f300 8086 	bgt.w	8001962 <GPIO_voidSetPinAlternateFunction+0x12a>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <GPIO_voidSetPinAlternateFunction+0x28>
 800185a:	2b01      	cmp	r3, #1
 800185c:	d02b      	beq.n	80018b6 <GPIO_voidSetPinAlternateFunction+0x7e>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
	    				Copy_u8AlternateFunction << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS);
	    	}
	      break;
	    default:
	      break;
 800185e:	e080      	b.n	8001962 <GPIO_voidSetPinAlternateFunction+0x12a>
             if(Copy_PinIndex < 8)
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b07      	cmp	r3, #7
 8001864:	d812      	bhi.n	800188c <GPIO_voidSetPinAlternateFunction+0x54>
            	 MODIFY_REG(GPIOA_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 8001866:	4b42      	ldr	r3, [pc, #264]	; (8001970 <GPIO_voidSetPinAlternateFunction+0x138>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	79ba      	ldrb	r2, [r7, #6]
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	210f      	movs	r1, #15
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	43d2      	mvns	r2, r2
 8001876:	4013      	ands	r3, r2
 8001878:	7979      	ldrb	r1, [r7, #5]
 800187a:	79ba      	ldrb	r2, [r7, #6]
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	4611      	mov	r1, r2
 8001884:	4a3a      	ldr	r2, [pc, #232]	; (8001970 <GPIO_voidSetPinAlternateFunction+0x138>)
 8001886:	430b      	orrs	r3, r1
 8001888:	6013      	str	r3, [r2, #0]
	      break;
 800188a:	e06b      	b.n	8001964 <GPIO_voidSetPinAlternateFunction+0x12c>
            	 MODIFY_REG(GPIOA_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <GPIO_voidSetPinAlternateFunction+0x13c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	79ba      	ldrb	r2, [r7, #6]
 8001892:	3a08      	subs	r2, #8
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	210f      	movs	r1, #15
 8001898:	fa01 f202 	lsl.w	r2, r1, r2
 800189c:	43d2      	mvns	r2, r2
 800189e:	4013      	ands	r3, r2
 80018a0:	7979      	ldrb	r1, [r7, #5]
 80018a2:	79ba      	ldrb	r2, [r7, #6]
 80018a4:	3a08      	subs	r2, #8
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ac:	4611      	mov	r1, r2
 80018ae:	4a31      	ldr	r2, [pc, #196]	; (8001974 <GPIO_voidSetPinAlternateFunction+0x13c>)
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6013      	str	r3, [r2, #0]
	      break;
 80018b4:	e056      	b.n	8001964 <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	2b07      	cmp	r3, #7
 80018ba:	d812      	bhi.n	80018e2 <GPIO_voidSetPinAlternateFunction+0xaa>
	    		MODIFY_REG(GPIOB_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 80018bc:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <GPIO_voidSetPinAlternateFunction+0x140>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	79ba      	ldrb	r2, [r7, #6]
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	210f      	movs	r1, #15
 80018c6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ca:	43d2      	mvns	r2, r2
 80018cc:	4013      	ands	r3, r2
 80018ce:	7979      	ldrb	r1, [r7, #5]
 80018d0:	79ba      	ldrb	r2, [r7, #6]
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	4611      	mov	r1, r2
 80018da:	4a27      	ldr	r2, [pc, #156]	; (8001978 <GPIO_voidSetPinAlternateFunction+0x140>)
 80018dc:	430b      	orrs	r3, r1
 80018de:	6013      	str	r3, [r2, #0]
	      break;
 80018e0:	e040      	b.n	8001964 <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOB_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <GPIO_voidSetPinAlternateFunction+0x144>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	79ba      	ldrb	r2, [r7, #6]
 80018e8:	3a08      	subs	r2, #8
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	210f      	movs	r1, #15
 80018ee:	fa01 f202 	lsl.w	r2, r1, r2
 80018f2:	43d2      	mvns	r2, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	7979      	ldrb	r1, [r7, #5]
 80018f8:	79ba      	ldrb	r2, [r7, #6]
 80018fa:	3a08      	subs	r2, #8
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001902:	4611      	mov	r1, r2
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <GPIO_voidSetPinAlternateFunction+0x144>)
 8001906:	430b      	orrs	r3, r1
 8001908:	6013      	str	r3, [r2, #0]
	      break;
 800190a:	e02b      	b.n	8001964 <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	2b07      	cmp	r3, #7
 8001910:	d812      	bhi.n	8001938 <GPIO_voidSetPinAlternateFunction+0x100>
	    		MODIFY_REG(GPIOC_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <GPIO_voidSetPinAlternateFunction+0x148>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	79ba      	ldrb	r2, [r7, #6]
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	210f      	movs	r1, #15
 800191c:	fa01 f202 	lsl.w	r2, r1, r2
 8001920:	43d2      	mvns	r2, r2
 8001922:	4013      	ands	r3, r2
 8001924:	7979      	ldrb	r1, [r7, #5]
 8001926:	79ba      	ldrb	r2, [r7, #6]
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	fa01 f202 	lsl.w	r2, r1, r2
 800192e:	4611      	mov	r1, r2
 8001930:	4a13      	ldr	r2, [pc, #76]	; (8001980 <GPIO_voidSetPinAlternateFunction+0x148>)
 8001932:	430b      	orrs	r3, r1
 8001934:	6013      	str	r3, [r2, #0]
	      break;
 8001936:	e015      	b.n	8001964 <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <GPIO_voidSetPinAlternateFunction+0x14c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	79ba      	ldrb	r2, [r7, #6]
 800193e:	3a08      	subs	r2, #8
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	210f      	movs	r1, #15
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	43d2      	mvns	r2, r2
 800194a:	4013      	ands	r3, r2
 800194c:	7979      	ldrb	r1, [r7, #5]
 800194e:	79ba      	ldrb	r2, [r7, #6]
 8001950:	3a08      	subs	r2, #8
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	4611      	mov	r1, r2
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <GPIO_voidSetPinAlternateFunction+0x14c>)
 800195c:	430b      	orrs	r3, r1
 800195e:	6013      	str	r3, [r2, #0]
	      break;
 8001960:	e000      	b.n	8001964 <GPIO_voidSetPinAlternateFunction+0x12c>
	      break;
 8001962:	bf00      	nop
	  }
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40020020 	.word	0x40020020
 8001974:	40020024 	.word	0x40020024
 8001978:	40020420 	.word	0x40020420
 800197c:	40020424 	.word	0x40020424
 8001980:	40020820 	.word	0x40020820
 8001984:	40020824 	.word	0x40020824

08001988 <GPIO_voidSetPinValue>:
      break;
  }
}
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	460b      	mov	r3, r1
 8001994:	71bb      	strb	r3, [r7, #6]
 8001996:	4613      	mov	r3, r2
 8001998:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d02c      	beq.n	80019fa <GPIO_voidSetPinValue+0x72>
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	dc3d      	bgt.n	8001a20 <GPIO_voidSetPinValue+0x98>
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <GPIO_voidSetPinValue+0x26>
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d013      	beq.n	80019d4 <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 80019ac:	e038      	b.n	8001a20 <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 80019b4:	79bb      	ldrb	r3, [r7, #6]
 80019b6:	2201      	movs	r2, #1
 80019b8:	409a      	lsls	r2, r3
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <GPIO_voidSetPinValue+0xb4>)
 80019bc:	601a      	str	r2, [r3, #0]
      break;
 80019be:	e031      	b.n	8001a24 <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 80019c0:	797b      	ldrb	r3, [r7, #5]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d12e      	bne.n	8001a24 <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019cc:	409a      	lsls	r2, r3
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <GPIO_voidSetPinValue+0xb4>)
 80019d0:	601a      	str	r2, [r3, #0]
      break;
 80019d2:	e027      	b.n	8001a24 <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 80019d4:	797b      	ldrb	r3, [r7, #5]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d105      	bne.n	80019e6 <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	2201      	movs	r2, #1
 80019de:	409a      	lsls	r2, r3
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <GPIO_voidSetPinValue+0xb8>)
 80019e2:	601a      	str	r2, [r3, #0]
      break;
 80019e4:	e020      	b.n	8001a28 <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 80019e6:	797b      	ldrb	r3, [r7, #5]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d11d      	bne.n	8001a28 <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f2:	409a      	lsls	r2, r3
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <GPIO_voidSetPinValue+0xb8>)
 80019f6:	601a      	str	r2, [r3, #0]
      break;
 80019f8:	e016      	b.n	8001a28 <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 80019fa:	797b      	ldrb	r3, [r7, #5]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	2201      	movs	r2, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <GPIO_voidSetPinValue+0xbc>)
 8001a08:	601a      	str	r2, [r3, #0]
      break;
 8001a0a:	e00f      	b.n	8001a2c <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8001a0c:	797b      	ldrb	r3, [r7, #5]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <GPIO_voidSetPinValue+0xbc>)
 8001a1c:	601a      	str	r2, [r3, #0]
      break;
 8001a1e:	e005      	b.n	8001a2c <GPIO_voidSetPinValue+0xa4>
      break;
 8001a20:	bf00      	nop
 8001a22:	e004      	b.n	8001a2e <GPIO_voidSetPinValue+0xa6>
      break;
 8001a24:	bf00      	nop
 8001a26:	e002      	b.n	8001a2e <GPIO_voidSetPinValue+0xa6>
      break;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <GPIO_voidSetPinValue+0xa6>
      break;
 8001a2c:	bf00      	nop
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40020018 	.word	0x40020018
 8001a40:	40020418 	.word	0x40020418
 8001a44:	40020818 	.word	0x40020818

08001a48 <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 8001a4c:	f000 f8da 	bl	8001c04 <MSCB_voidSetPriorityGrouping>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <MNVIC_voidEnableIRQ>:

void MNVIC_voidEnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <MNVIC_voidEnableIRQ+0x2a>
	{
		NVIC->ISER[((u32)IRQn >> 5)] = (1UL << ((u32)IRQn & 0x1F));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	; (8001a8c <MNVIC_voidEnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <RCC_void_HSI_Init>:
static void RCC_void_APB2Prescaler_Init(void);
/************************************************/

/******* Local Functions Implementation ********/
static void RCC_void_HSI_Init(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Enable HSI
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <RCC_void_HSI_Init+0x58>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <RCC_void_HSI_Init+0x58>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE  
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <RCC_void_HSI_Init+0x58>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <RCC_void_HSI_Init+0x58>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <RCC_void_HSI_Init+0x58>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <RCC_void_HSI_Init+0x58>)
 8001ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab6:	6013      	str	r3, [r2, #0]
    // Polling (Busy Wait)
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
 8001ab8:	bf00      	nop
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <RCC_void_HSI_Init+0x58>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f9      	beq.n	8001aba <RCC_void_HSI_Init+0x2a>
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <RCC_void_HSI_Init+0x5c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <RCC_void_HSI_Init+0x5c>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <RCC_void_HSI_Init+0x5c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <RCC_void_HSI_Init+0x5c>)
 8001ad8:	f023 0302 	bic.w	r3, r3, #2
 8001adc:	6013      	str	r3, [r2, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40023808 	.word	0x40023808

08001af0 <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_1;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_2
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <RCC_void_AHB1Prescaler_Init+0x28>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <RCC_void_AHB1Prescaler_Init+0x28>)
 8001afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001afe:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_2;
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <RCC_void_AHB1Prescaler_Init+0x28>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <RCC_void_AHB1Prescaler_Init+0x28>)
 8001b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023808 	.word	0x40023808

08001b1c <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <RCC_void_APB1Prescaler_Init+0x24>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <RCC_void_APB1Prescaler_Init+0x24>)
 8001b26:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b2a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <RCC_void_APB1Prescaler_Init+0x24>)
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <RCC_void_APB1Prescaler_Init+0x24>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023808 	.word	0x40023808

08001b44 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <RCC_void_APB2Prescaler_Init+0x24>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <RCC_void_APB2Prescaler_Init+0x24>)
 8001b4e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b52:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <RCC_void_APB2Prescaler_Init+0x24>)
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <RCC_void_APB2Prescaler_Init+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023808 	.word	0x40023808

08001b6c <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
 8001b70:	f7ff ff8e 	bl	8001a90 <RCC_void_HSI_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 8001b74:	f7ff ffbc 	bl	8001af0 <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 8001b78:	f7ff ffd0 	bl	8001b1c <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 8001b7c:	f7ff ffe2 	bl	8001b44 <RCC_void_APB2Prescaler_Init>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d01c      	beq.n	8001bd4 <RCC_voidEnablePeripheralClock+0x50>
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	dc25      	bgt.n	8001bea <RCC_voidEnablePeripheralClock+0x66>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <RCC_voidEnablePeripheralClock+0x24>
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d00b      	beq.n	8001bbe <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 8001ba6:	e020      	b.n	8001bea <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <RCC_voidEnablePeripheralClock+0x74>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	79ba      	ldrb	r2, [r7, #6]
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <RCC_voidEnablePeripheralClock+0x74>)
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	6013      	str	r3, [r2, #0]
        break;
 8001bbc:	e016      	b.n	8001bec <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <RCC_voidEnablePeripheralClock+0x78>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	79ba      	ldrb	r2, [r7, #6]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <RCC_voidEnablePeripheralClock+0x78>)
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	6013      	str	r3, [r2, #0]
        break;
 8001bd2:	e00b      	b.n	8001bec <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <RCC_voidEnablePeripheralClock+0x7c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	79ba      	ldrb	r2, [r7, #6]
 8001bda:	2101      	movs	r1, #1
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	4611      	mov	r1, r2
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <RCC_voidEnablePeripheralClock+0x7c>)
 8001be4:	430b      	orrs	r3, r1
 8001be6:	6013      	str	r3, [r2, #0]
        break;  
 8001be8:	e000      	b.n	8001bec <RCC_voidEnablePeripheralClock+0x68>
        break;
 8001bea:	bf00      	nop
    }
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40023830 	.word	0x40023830
 8001bfc:	40023840 	.word	0x40023840
 8001c00:	40023844 	.word	0x40023844

08001c04 <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 8001c0e:	2305      	movs	r3, #5
 8001c10:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <MSCB_voidSetPriorityGrouping+0x44>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c1e:	4013      	ands	r3, r2
 8001c20:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	021a      	lsls	r2, r3, #8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c32:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <MSCB_voidSetPriorityGrouping+0x44>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60d3      	str	r3, [r2, #12]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <MSPI_GPIOInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void MSPI_GPIOInit(const SPI_Config_t* SPIConfig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d042      	beq.n	8001ce2 <MSPI_GPIOInit+0x96>
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	dc5d      	bgt.n	8001d1c <MSPI_GPIOInit+0xd0>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <MSPI_GPIOInit+0x1e>
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d023      	beq.n	8001cb0 <MSPI_GPIOInit+0x64>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);

				break;
		}
}
 8001c68:	e058      	b.n	8001d1c <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff ff89 	bl	8001b84 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN4, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_NSS_PIN
 8001c72:	2202      	movs	r2, #2
 8001c74:	2104      	movs	r1, #4
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fd84 	bl	8001784 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN4,SPI1_NSS_AF);
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	2104      	movs	r1, #4
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff fdd9 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_SCK_PIN
 8001c86:	2202      	movs	r2, #2
 8001c88:	2105      	movs	r1, #5
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff fd7a 	bl	8001784 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN5,SPI1_SCK_AF);
 8001c90:	2205      	movs	r2, #5
 8001c92:	2105      	movs	r1, #5
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff fdcf 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN7, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_MOSI_PIN
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	2107      	movs	r1, #7
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fd70 	bl	8001784 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN7,SPI1_MOSI_AF);
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	2107      	movs	r1, #7
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff fdc5 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
				break;
 8001cae:	e035      	b.n	8001d1c <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f7ff ff66 	bl	8001b84 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SP2_SCK_PIN
 8001cb8:	2202      	movs	r2, #2
 8001cba:	210a      	movs	r1, #10
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff fd61 	bl	8001784 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN10, SPI2_SCK_AF);
 8001cc2:	2205      	movs	r2, #5
 8001cc4:	210a      	movs	r1, #10
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff fdb6 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN15, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI2_MOSI_PIN
 8001ccc:	2202      	movs	r2, #2
 8001cce:	210f      	movs	r1, #15
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff fd57 	bl	8001784 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN15, SPI2_MOSI_AF);
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	210f      	movs	r1, #15
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7ff fdac 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
				break;
 8001ce0:	e01c      	b.n	8001d1c <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff ff4d 	bl	8001b84 <RCC_voidEnablePeripheralClock>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8001cea:	2101      	movs	r1, #1
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff ff49 	bl	8001b84 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN3, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_SCK_PIN
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	2103      	movs	r1, #3
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff fd44 	bl	8001784 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN3, SPI3_SCK_AF);
 8001cfc:	2206      	movs	r2, #6
 8001cfe:	2103      	movs	r1, #3
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff fd99 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
 8001d06:	2202      	movs	r2, #2
 8001d08:	2105      	movs	r1, #5
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff fd3a 	bl	8001784 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);
 8001d10:	2206      	movs	r2, #6
 8001d12:	2105      	movs	r1, #5
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff fd8f 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
				break;
 8001d1a:	bf00      	nop
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <SPI_Timeout_Handler>:
						break;
				}
	}
#endif
static void SPI_Timeout_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	SPI_Timeout_Flag=SPI_TIMEOUT;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <SPI_Timeout_Handler+0x14>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	2000012c 	.word	0x2000012c

08001d3c <MSPIx_voidClockEnable>:


static void MSPIx_voidClockEnable(const SPI_Config_t* SPIConfig){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance){
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d010      	beq.n	8001d6e <MSPIx_voidClockEnable+0x32>
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	dc13      	bgt.n	8001d78 <MSPIx_voidClockEnable+0x3c>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <MSPIx_voidClockEnable+0x1e>
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d005      	beq.n	8001d64 <MSPIx_voidClockEnable+0x28>
		break;
	case SPI3_INSTANCE:
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
		break;
	}
}
 8001d58:	e00e      	b.n	8001d78 <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB2,RCC_APB2_SPI1EN);
 8001d5a:	210c      	movs	r1, #12
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f7ff ff11 	bl	8001b84 <RCC_voidEnablePeripheralClock>
		break;
 8001d62:	e009      	b.n	8001d78 <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI2EN);
 8001d64:	210e      	movs	r1, #14
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff ff0c 	bl	8001b84 <RCC_voidEnablePeripheralClock>
		break;
 8001d6c:	e004      	b.n	8001d78 <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
 8001d6e:	210f      	movs	r1, #15
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff ff07 	bl	8001b84 <RCC_voidEnablePeripheralClock>
		break;
 8001d76:	bf00      	nop
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <MSPI_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MSPI_voidInit(const SPI_Config_t* SPIConfig)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	MSPI_GPIOInit(SPIConfig);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff5f 	bl	8001c4c <MSPI_GPIOInit>
	MSPIx_voidClockEnable(SPIConfig);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffd4 	bl	8001d3c <MSPIx_voidClockEnable>
#if (SPI1_TX_INT_ENABLE || SPI2_TX_INT_ENABLE || SPI3_TX_INT_ENABLE ) ||(SPI1_RX_INT_ENABLE || SPI2_RX_INT_ENABLE || SPI3_RX_INT_ENABLE)==(INTERRUPT_ENABLED)
	MSPI_InterruptInit(SPIConfig);
#endif
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	785a      	ldrb	r2, [r3, #1]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	789b      	ldrb	r3, [r3, #2]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	78db      	ldrb	r3, [r3, #3]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	791b      	ldrb	r3, [r3, #4]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	795b      	ldrb	r3, [r3, #5]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MSPI_voidInit+0x90>)
 8001dc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001dc4:	601a      	str	r2, [r3, #0]
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2,SSOE_BIT_POS);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <MSPI_voidInit+0x90>)
 8001dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <MSPI_voidInit+0x90>)
 8001ddc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001de0:	f042 0204 	orr.w	r2, r2, #4
 8001de4:	605a      	str	r2, [r3, #4]
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR1, SPI_EN_BIT_POS);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <MSPI_voidInit+0x90>)
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <MSPI_voidInit+0x90>)
 8001dfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e04:	601a      	str	r2, [r3, #0]
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000060 	.word	0x20000060

08001e14 <MSPI_TransmitByte>:
						}
}
#endif

Std_ReturnType MSPI_TransmitByte(SPI_Config_t* SPIConfig , u8 Copy_u8Data , u32 Copy_u32Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	72fb      	strb	r3, [r7, #11]
	Std_ReturnType Local_u8ErrorState = STD_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	75fb      	strb	r3, [r7, #23]
    u8 Local_u8DummyReceieve = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75bb      	strb	r3, [r7, #22]
    MSysTick_void_ASYNC_Delay_ms(Copy_u32Timeout, SPI_Timeout_Handler);
 8001e2a:	492a      	ldr	r1, [pc, #168]	; (8001ed4 <MSPI_TransmitByte+0xc0>)
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8ed 	bl	800200c <MSysTick_void_ASYNC_Delay_ms>
    while((GET_BIT(SPIx[SPIConfig->SPI_Instance]->SR,SPI_TXE_BIT_POS) != SPI_BUSY) && (SPI_Timeout_Flag != SPI_TIMEOUT));
 8001e32:	bf00      	nop
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <MSPI_TransmitByte+0xc4>)
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d003      	beq.n	8001e54 <MSPI_TransmitByte+0x40>
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <MSPI_TransmitByte+0xc8>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d1ef      	bne.n	8001e34 <MSPI_TransmitByte+0x20>
    if(SPI_Timeout_Flag == SPI_TIMEOUT)
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <MSPI_TransmitByte+0xc8>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <MSPI_TransmitByte+0x54>
    {
    	Local_u8ErrorState = STD_TIMEOUT;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	75fb      	strb	r3, [r7, #23]
    	SPI_Timeout_Flag = SPI_NO_TIMEOUT;
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <MSPI_TransmitByte+0xc8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e030      	b.n	8001eca <MSPI_TransmitByte+0xb6>
    }
    else
    {
    	MSysTick_void_ASYNC_Delay_ms(Copy_u32Timeout, SPI_Timeout_Handler);
 8001e68:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <MSPI_TransmitByte+0xc0>)
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8ce 	bl	800200c <MSysTick_void_ASYNC_Delay_ms>
		SPIx[SPIConfig->SPI_Instance]->DR = Copy_u8Data;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <MSPI_TransmitByte+0xc4>)
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	7afa      	ldrb	r2, [r7, #11]
 8001e7e:	60da      	str	r2, [r3, #12]
		while((GET_BIT(SPIx[SPIConfig->SPI_Instance]->SR,SPI_BSY_BIT_POS) == SPI_BUSY) && (SPI_Timeout_Flag != SPI_TIMEOUT));
 8001e80:	bf00      	nop
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <MSPI_TransmitByte+0xc4>)
 8001e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	09db      	lsrs	r3, r3, #7
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d103      	bne.n	8001ea2 <MSPI_TransmitByte+0x8e>
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <MSPI_TransmitByte+0xc8>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d1ef      	bne.n	8001e82 <MSPI_TransmitByte+0x6e>
		if(SPI_Timeout_Flag == SPI_TIMEOUT)
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <MSPI_TransmitByte+0xc8>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <MSPI_TransmitByte+0xa2>
		{
			Local_u8ErrorState = STD_TIMEOUT;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	75fb      	strb	r3, [r7, #23]
			SPI_Timeout_Flag = SPI_NO_TIMEOUT;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <MSPI_TransmitByte+0xc8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e009      	b.n	8001eca <MSPI_TransmitByte+0xb6>
		}
		else
		{
			MSysTick_voidDeInit();
 8001eb6:	f000 f877 	bl	8001fa8 <MSysTick_voidDeInit>
			Local_u8DummyReceieve = SPIx[SPIConfig->SPI_Instance]->DR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <MSPI_TransmitByte+0xc4>)
 8001ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	75bb      	strb	r3, [r7, #22]
		}
    }
	return Local_u8ErrorState;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	08001d25 	.word	0x08001d25
 8001ed8:	20000060 	.word	0x20000060
 8001edc:	2000012c 	.word	0x2000012c

08001ee0 <MSPI_DMA_Transmit>:
	}
	return Local_u8ErrorState;
}

void MSPI_DMA_Transmit(SPI_Config_t* SPIConfig , u8* Ptr_u8Data , u16 Copy_u16DataSize)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
	MDMA_voidInit(&SPIConfig->SPI_TX_DMA_Config);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3308      	adds	r3, #8
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f8ec 	bl	80010d0 <MDMA_voidInit>
	MDMA_voidStart(&SPIConfig->SPI_TX_DMA_Config, &SPIx[SPIConfig->SPI_Instance]->DR,(u32*)Ptr_u8Data, Copy_u16DataSize);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f103 0008 	add.w	r0, r3, #8
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MSPI_DMA_Transmit+0x60>)
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	f103 010c 	add.w	r1, r3, #12
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	f7ff f931 	bl	8001178 <MDMA_voidStart>
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, TXDMAEN_BIT_POS);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MSPI_DMA_Transmit+0x60>)
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <MSPI_DMA_Transmit+0x60>)
 8001f2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f30:	f042 0202 	orr.w	r2, r2, #2
 8001f34:	605a      	str	r2, [r3, #4]
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000060 	.word	0x20000060

08001f44 <SPI1_IRQHandler>:
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, TXDMAEN_BIT_POS);
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, RXDMAEN_BIT_POS);
}
/*************************************************************SPI IRQ HANDLERS******************************************************************/
void SPI1_IRQHandler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
		{
			SPI1_RX_INT_Callback();
		}
	}
#endif
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
		{
			SPI2_RX_INT_Callback();
		}
	}
#endif
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
		{
			SPI3_RX_INT_Callback();
		}
	}
#endif
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
#elif (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8)
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <MSysTick_voidInit+0x34>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <MSysTick_voidInit+0x34>)
 8001f7a:	f023 0304 	bic.w	r3, r3, #4
 8001f7e:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <MSysTick_voidInit+0x34>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <MSysTick_voidInit+0x34>)
 8001f86:	f023 0302 	bic.w	r3, r3, #2
 8001f8a:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <MSysTick_voidInit+0x34>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <MSysTick_voidInit+0x34>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <MSysTick_voidDeInit+0x34>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <MSysTick_voidDeInit+0x34>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <MSysTick_voidDeInit+0x34>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MSysTick_voidDeInit+0x34>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <MSysTick_voidDeInit+0x34>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <MSysTick_voidDeInit+0x34>)
 8001fca:	f023 0302 	bic.w	r3, r3, #2
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <SysTick_Handler>:
{
	SysTick->LOAD = Copy_u32Ticks;
	SysTick->VAL = 0;
}
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <SysTick_Handler+0x24>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 8001fee:	f7ff ffdb 	bl	8001fa8 <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Handler+0x28>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <SysTick_Handler+0x28>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4798      	blx	r3
	}
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000134 	.word	0x20000134
 8002008:	20000130 	.word	0x20000130

0800200c <MSysTick_void_ASYNC_Delay_ms>:
	SysTick->LOAD = 0;
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
}
void MSysTick_void_ASYNC_Delay_ms(u32 time_ms,PtrFunction CallBack_Ptr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	u32 Local_ticks = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
	if (CallBack_Ptr != NULL)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d02e      	beq.n	800207e <MSysTick_void_ASYNC_Delay_ms+0x72>
		{
			Local_ticks = (u32)(((SYSTICK_AHB_CLK/SYSTICK_CLOCK_SOURCE)/1000.0)*time_ms);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7fe fa1b 	bl	800045c <__aeabi_ui2d>
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MSysTick_void_ASYNC_Delay_ms+0x7c>)
 800202c:	f7fe fa90 	bl	8000550 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f7fe fc9c 	bl	8000974 <__aeabi_d2uiz>
 800203c:	4603      	mov	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]
			if(Local_ticks>SysTick_LOAD_RELOAD_Msk)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002046:	d302      	bcc.n	800204e <MSysTick_void_ASYNC_Delay_ms+0x42>
			{
				Local_ticks = SysTick_LOAD_RELOAD_Msk;
 8002048:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800204c:	60fb      	str	r3, [r7, #12]
			}
		  /* Set Reload Register to SysTick Ticks */
		  	SysTick->LOAD = Local_ticks;
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6053      	str	r3, [r2, #4]
		  	SysTick->VAL = 0;
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
			/* Copy The User CallBack to Local ptrFunction */
			SysTick_CallBack = CallBack_Ptr;
 800205a:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <MSysTick_void_ASYNC_Delay_ms+0x84>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6013      	str	r3, [r2, #0]
			/* Set The SysTick Timer to Single Interval Mode */
			SysTick_Mode = SysTick_SingleInterval_Mode;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MSysTick_void_ASYNC_Delay_ms+0x88>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
			/*Enable SysTick IRQ */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <MSysTick_void_ASYNC_Delay_ms+0x80>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6013      	str	r3, [r2, #0]
			/* Enable SysTick Counter */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6013      	str	r3, [r2, #0]
		}
		else { /* Nothing */}
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	408f4000 	.word	0x408f4000
 800208c:	e000e010 	.word	0xe000e010
 8002090:	20000130 	.word	0x20000130
 8002094:	20000134 	.word	0x20000134

08002098 <UART_ClockEnable>:
static void USART_Timeout_Handler(void);
/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void UART_ClockEnable(const UART_InitTypeDef* UARTConfig)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	if(UARTConfig->UART_Instance == USART1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <UART_ClockEnable+0x4c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d104      	bne.n	80020b4 <UART_ClockEnable+0x1c>
		{
			RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_USART1EN);
 80020aa:	2104      	movs	r1, #4
 80020ac:	2002      	movs	r0, #2
 80020ae:	f7ff fd69 	bl	8001b84 <RCC_voidEnablePeripheralClock>
		}
	else if(UARTConfig->UART_Instance == USART6)
		{
			RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_USART6EN);
		}
}
 80020b2:	e012      	b.n	80020da <UART_ClockEnable+0x42>
	else if(UARTConfig->UART_Instance == USART2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <UART_ClockEnable+0x50>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d104      	bne.n	80020c8 <UART_ClockEnable+0x30>
			RCC_voidEnablePeripheralClock(RCC_APB1, RCC_APB1_USART2EN);
 80020be:	2111      	movs	r1, #17
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7ff fd5f 	bl	8001b84 <RCC_voidEnablePeripheralClock>
}
 80020c6:	e008      	b.n	80020da <UART_ClockEnable+0x42>
	else if(UARTConfig->UART_Instance == USART6)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <UART_ClockEnable+0x54>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d103      	bne.n	80020da <UART_ClockEnable+0x42>
			RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_USART6EN);
 80020d2:	2105      	movs	r1, #5
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7ff fd55 	bl	8001b84 <RCC_voidEnablePeripheralClock>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40011000 	.word	0x40011000
 80020e8:	40004400 	.word	0x40004400
 80020ec:	40011400 	.word	0x40011400

080020f0 <UART_voidGPIOConfig>:
static void UART_voidGPIOConfig(const UART_InitTypeDef* UARTConfig)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_GPIOAEN);
 80020f8:	2100      	movs	r1, #0
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7ff fd42 	bl	8001b84 <RCC_voidEnablePeripheralClock>
	if(UARTConfig->UART_Instance == USART1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <UART_voidGPIOConfig+0xb4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d114      	bne.n	8002134 <UART_voidGPIOConfig+0x44>
		{
		GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN9, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 800210a:	2202      	movs	r2, #2
 800210c:	2109      	movs	r1, #9
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff fb38 	bl	8001784 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN9, USART1_TX_AF);
 8002114:	2207      	movs	r2, #7
 8002116:	2109      	movs	r1, #9
 8002118:	2000      	movs	r0, #0
 800211a:	f7ff fb8d 	bl	8001838 <GPIO_voidSetPinAlternateFunction>

		GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN10, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 800211e:	2202      	movs	r2, #2
 8002120:	210a      	movs	r1, #10
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff fb2e 	bl	8001784 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN10, USART1_RX_AF);
 8002128:	2207      	movs	r2, #7
 800212a:	210a      	movs	r1, #10
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff fb83 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN11, USART6_TX_AF);

		GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN12, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN12, USART6_RX_AF);
	}
}
 8002132:	e032      	b.n	800219a <UART_voidGPIOConfig+0xaa>
	else if(UARTConfig->UART_Instance == USART2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <UART_voidGPIOConfig+0xb8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d114      	bne.n	8002168 <UART_voidGPIOConfig+0x78>
		GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN2, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 800213e:	2202      	movs	r2, #2
 8002140:	2102      	movs	r1, #2
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fb1e 	bl	8001784 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN2, USART2_TX_AF);
 8002148:	2207      	movs	r2, #7
 800214a:	2102      	movs	r1, #2
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fb73 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
		GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN3, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8002152:	2202      	movs	r2, #2
 8002154:	2103      	movs	r1, #3
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff fb14 	bl	8001784 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN3, USART2_RX_AF);
 800215c:	2207      	movs	r2, #7
 800215e:	2103      	movs	r1, #3
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff fb69 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
}
 8002166:	e018      	b.n	800219a <UART_voidGPIOConfig+0xaa>
	else if(UARTConfig->UART_Instance == USART6)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <UART_voidGPIOConfig+0xbc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <UART_voidGPIOConfig+0xaa>
		GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN11, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8002172:	2202      	movs	r2, #2
 8002174:	210b      	movs	r1, #11
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff fb04 	bl	8001784 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN11, USART6_TX_AF);
 800217c:	2208      	movs	r2, #8
 800217e:	210b      	movs	r1, #11
 8002180:	2000      	movs	r0, #0
 8002182:	f7ff fb59 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
		GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN12, GPIO_ALTERNATE_FUNCTION_PIN_MODE);
 8002186:	2202      	movs	r2, #2
 8002188:	210c      	movs	r1, #12
 800218a:	2000      	movs	r0, #0
 800218c:	f7ff fafa 	bl	8001784 <GPIO_voidSetPinMode>
		GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN12, USART6_RX_AF);
 8002190:	2208      	movs	r2, #8
 8002192:	210c      	movs	r1, #12
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff fb4f 	bl	8001838 <GPIO_voidSetPinAlternateFunction>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40011000 	.word	0x40011000
 80021a8:	40004400 	.word	0x40004400
 80021ac:	40011400 	.word	0x40011400

080021b0 <UART_SetBaudRate>:
static void UART_SetBaudRate(const UART_InitTypeDef* UARTConfig)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	u16 Local_u16Mantissa = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	82fb      	strh	r3, [r7, #22]
	u8 Local_u8Fraction = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	757b      	strb	r3, [r7, #21]
	f64 Local_f32USARTDIV =0;
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(UARTConfig->UART_Instance == USART1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a77      	ldr	r2, [pc, #476]	; (80023b0 <UART_SetBaudRate+0x200>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d145      	bne.n	8002262 <UART_SetBaudRate+0xb2>
	{
		Local_f32USARTDIV = (APB2_CLK*1.0)/(16.0* UARTConfig->UART_BaudRate);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f93e 	bl	800045c <__aeabi_ui2d>
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b73      	ldr	r3, [pc, #460]	; (80023b4 <UART_SetBaudRate+0x204>)
 80021e6:	f7fe f9b3 	bl	8000550 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	a16e      	add	r1, pc, #440	; (adr r1, 80023a8 <UART_SetBaudRate+0x1f8>)
 80021f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021f4:	f7fe fad6 	bl	80007a4 <__aeabi_ddiv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Local_u16Mantissa = Local_f32USARTDIV;
 8002200:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002204:	f7fe fbb6 	bl	8000974 <__aeabi_d2uiz>
 8002208:	4603      	mov	r3, r0
 800220a:	82fb      	strh	r3, [r7, #22]
		Local_u8Fraction = (((Local_f32USARTDIV - Local_u16Mantissa)*16.0)+0.5);
 800220c:	8afb      	ldrh	r3, [r7, #22]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f934 	bl	800047c <__aeabi_i2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800221c:	f7fd ffe0 	bl	80001e0 <__aeabi_dsub>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <UART_SetBaudRate+0x204>)
 800222e:	f7fe f98f 	bl	8000550 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <UART_SetBaudRate+0x208>)
 8002240:	f7fd ffd0 	bl	80001e4 <__adddf3>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f7fe fb92 	bl	8000974 <__aeabi_d2uiz>
 8002250:	4603      	mov	r3, r0
 8002252:	757b      	strb	r3, [r7, #21]
		USART1->USART_BRR = Local_u16Mantissa<<4 | Local_u8Fraction;
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	011a      	lsls	r2, r3, #4
 8002258:	7d7b      	ldrb	r3, [r7, #21]
 800225a:	431a      	orrs	r2, r3
 800225c:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <UART_SetBaudRate+0x200>)
 800225e:	609a      	str	r2, [r3, #8]
			Local_f32USARTDIV = ((f32)APB2_CLK)/(16.0*UARTConfig->UART_BaudRate);
			Local_u16Mantissa = (u16)Local_f32USARTDIV;
			Local_u8Fraction = (u8)(((Local_f32USARTDIV - (f32)Local_u16Mantissa)*16)+0.5);
			USART6->USART_BRR = Local_u16Mantissa<<4 | Local_u8Fraction;
	}
}
 8002260:	e09e      	b.n	80023a0 <UART_SetBaudRate+0x1f0>
	else if (UARTConfig->UART_Instance == USART2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a55      	ldr	r2, [pc, #340]	; (80023bc <UART_SetBaudRate+0x20c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d14a      	bne.n	8002302 <UART_SetBaudRate+0x152>
		Local_f32USARTDIV = ((f32)APB1_CLK)/(16.0*UARTConfig->UART_BaudRate);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f8f3 	bl	800045c <__aeabi_ui2d>
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b4e      	ldr	r3, [pc, #312]	; (80023b4 <UART_SetBaudRate+0x204>)
 800227c:	f7fe f968 	bl	8000550 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	a148      	add	r1, pc, #288	; (adr r1, 80023a8 <UART_SetBaudRate+0x1f8>)
 8002286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800228a:	f7fe fa8b 	bl	80007a4 <__aeabi_ddiv>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Local_u16Mantissa = Local_f32USARTDIV;
 8002296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800229a:	f7fe fb6b 	bl	8000974 <__aeabi_d2uiz>
 800229e:	4603      	mov	r3, r0
 80022a0:	82fb      	strh	r3, [r7, #22]
		Local_u8Fraction = (((Local_f32USARTDIV - (f32)Local_u16Mantissa)*16)+0.5);
 80022a2:	8afb      	ldrh	r3, [r7, #22]
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ac:	ee17 0a90 	vmov	r0, s15
 80022b0:	f7fe f8f6 	bl	80004a0 <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022bc:	f7fd ff90 	bl	80001e0 <__aeabi_dsub>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <UART_SetBaudRate+0x204>)
 80022ce:	f7fe f93f 	bl	8000550 <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <UART_SetBaudRate+0x208>)
 80022e0:	f7fd ff80 	bl	80001e4 <__adddf3>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fb42 	bl	8000974 <__aeabi_d2uiz>
 80022f0:	4603      	mov	r3, r0
 80022f2:	757b      	strb	r3, [r7, #21]
		USART2->USART_BRR = Local_u16Mantissa<<4 | Local_u8Fraction;
 80022f4:	8afb      	ldrh	r3, [r7, #22]
 80022f6:	011a      	lsls	r2, r3, #4
 80022f8:	7d7b      	ldrb	r3, [r7, #21]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <UART_SetBaudRate+0x20c>)
 80022fe:	609a      	str	r2, [r3, #8]
}
 8002300:	e04e      	b.n	80023a0 <UART_SetBaudRate+0x1f0>
	else if (UARTConfig->UART_Instance == USART6)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <UART_SetBaudRate+0x210>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d149      	bne.n	80023a0 <UART_SetBaudRate+0x1f0>
			Local_f32USARTDIV = ((f32)APB2_CLK)/(16.0*UARTConfig->UART_BaudRate);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f8a3 	bl	800045c <__aeabi_ui2d>
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <UART_SetBaudRate+0x204>)
 800231c:	f7fe f918 	bl	8000550 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	a120      	add	r1, pc, #128	; (adr r1, 80023a8 <UART_SetBaudRate+0x1f8>)
 8002326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800232a:	f7fe fa3b 	bl	80007a4 <__aeabi_ddiv>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Local_u16Mantissa = (u16)Local_f32USARTDIV;
 8002336:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800233a:	f7fe fb1b 	bl	8000974 <__aeabi_d2uiz>
 800233e:	4603      	mov	r3, r0
 8002340:	82fb      	strh	r3, [r7, #22]
			Local_u8Fraction = (u8)(((Local_f32USARTDIV - (f32)Local_u16Mantissa)*16)+0.5);
 8002342:	8afb      	ldrh	r3, [r7, #22]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234c:	ee17 0a90 	vmov	r0, s15
 8002350:	f7fe f8a6 	bl	80004a0 <__aeabi_f2d>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800235c:	f7fd ff40 	bl	80001e0 <__aeabi_dsub>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <UART_SetBaudRate+0x204>)
 800236e:	f7fe f8ef 	bl	8000550 <__aeabi_dmul>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <UART_SetBaudRate+0x208>)
 8002380:	f7fd ff30 	bl	80001e4 <__adddf3>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe faf2 	bl	8000974 <__aeabi_d2uiz>
 8002390:	4603      	mov	r3, r0
 8002392:	757b      	strb	r3, [r7, #21]
			USART6->USART_BRR = Local_u16Mantissa<<4 | Local_u8Fraction;
 8002394:	8afb      	ldrh	r3, [r7, #22]
 8002396:	011a      	lsls	r2, r3, #4
 8002398:	7d7b      	ldrb	r3, [r7, #21]
 800239a:	431a      	orrs	r2, r3
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <UART_SetBaudRate+0x210>)
 800239e:	609a      	str	r2, [r3, #8]
}
 80023a0:	bf00      	nop
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	00000000 	.word	0x00000000
 80023ac:	415e8480 	.word	0x415e8480
 80023b0:	40011000 	.word	0x40011000
 80023b4:	40300000 	.word	0x40300000
 80023b8:	3fe00000 	.word	0x3fe00000
 80023bc:	40004400 	.word	0x40004400
 80023c0:	40011400 	.word	0x40011400

080023c4 <UART_TC_INT_Init>:
static void UART_TC_INT_Init(const UART_InitTypeDef* UARTConfig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	if(UARTConfig->UART_Instance == USART1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <UART_TC_INT_Init+0x80>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10d      	bne.n	80023f2 <UART_TC_INT_Init+0x2e>
	{
		USART1_TC_INT_Callback = UARTConfig->UART_TC_INT_Callback;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <UART_TC_INT_Init+0x84>)
 80023dc:	6013      	str	r3, [r2, #0]
		SET_BIT(USART1->USART_CR1, USART_TCIE_BIT_POS);
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <UART_TC_INT_Init+0x80>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a18      	ldr	r2, [pc, #96]	; (8002444 <UART_TC_INT_Init+0x80>)
 80023e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e8:	60d3      	str	r3, [r2, #12]
		MNVIC_voidEnableIRQ(USART1_IRQn);
 80023ea:	2025      	movs	r0, #37	; 0x25
 80023ec:	f7ff fb32 	bl	8001a54 <MNVIC_voidEnableIRQ>
	{
		USART6_TC_INT_Callback = UARTConfig->UART_TC_INT_Callback;
		SET_BIT(USART6->USART_CR1, USART_TCIE_BIT_POS);
		MNVIC_voidEnableIRQ(USART6_IRQn);
	}
}
 80023f0:	e024      	b.n	800243c <UART_TC_INT_Init+0x78>
	else if (UARTConfig->UART_Instance == USART2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a15      	ldr	r2, [pc, #84]	; (800244c <UART_TC_INT_Init+0x88>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d10d      	bne.n	8002418 <UART_TC_INT_Init+0x54>
		USART2_TC_INT_Callback = UARTConfig->UART_TC_INT_Callback;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <UART_TC_INT_Init+0x8c>)
 8002402:	6013      	str	r3, [r2, #0]
		SET_BIT(USART2->USART_CR1, USART_TCIE_BIT_POS);
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <UART_TC_INT_Init+0x88>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a10      	ldr	r2, [pc, #64]	; (800244c <UART_TC_INT_Init+0x88>)
 800240a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800240e:	60d3      	str	r3, [r2, #12]
		MNVIC_voidEnableIRQ(USART2_IRQn);
 8002410:	2026      	movs	r0, #38	; 0x26
 8002412:	f7ff fb1f 	bl	8001a54 <MNVIC_voidEnableIRQ>
}
 8002416:	e011      	b.n	800243c <UART_TC_INT_Init+0x78>
	else if (UARTConfig->UART_Instance == USART6)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <UART_TC_INT_Init+0x90>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10c      	bne.n	800243c <UART_TC_INT_Init+0x78>
		USART6_TC_INT_Callback = UARTConfig->UART_TC_INT_Callback;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <UART_TC_INT_Init+0x94>)
 8002428:	6013      	str	r3, [r2, #0]
		SET_BIT(USART6->USART_CR1, USART_TCIE_BIT_POS);
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <UART_TC_INT_Init+0x90>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <UART_TC_INT_Init+0x90>)
 8002430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002434:	60d3      	str	r3, [r2, #12]
		MNVIC_voidEnableIRQ(USART6_IRQn);
 8002436:	2047      	movs	r0, #71	; 0x47
 8002438:	f7ff fb0c 	bl	8001a54 <MNVIC_voidEnableIRQ>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40011000 	.word	0x40011000
 8002448:	20000138 	.word	0x20000138
 800244c:	40004400 	.word	0x40004400
 8002450:	2000013c 	.word	0x2000013c
 8002454:	40011400 	.word	0x40011400
 8002458:	20000140 	.word	0x20000140

0800245c <UART_RXNE_INT_Init>:
static void UART_RXNE_INT_Init(const UART_InitTypeDef* UARTConfig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	if(UARTConfig->UART_Instance == USART1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <UART_RXNE_INT_Init+0x80>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10d      	bne.n	800248a <UART_RXNE_INT_Init+0x2e>
	{
		USART1_RXNE_INT_Callback = UARTConfig->UART_RXNE_INT_Callback;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <UART_RXNE_INT_Init+0x84>)
 8002474:	6013      	str	r3, [r2, #0]
		SET_BIT(USART1->USART_CR1, USART_RXNEIE_BIT_POS);
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <UART_RXNE_INT_Init+0x80>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <UART_RXNE_INT_Init+0x80>)
 800247c:	f043 0320 	orr.w	r3, r3, #32
 8002480:	60d3      	str	r3, [r2, #12]
		MNVIC_voidEnableIRQ(USART1_IRQn);
 8002482:	2025      	movs	r0, #37	; 0x25
 8002484:	f7ff fae6 	bl	8001a54 <MNVIC_voidEnableIRQ>
	{
		USART6_RXNE_INT_Callback = UARTConfig->UART_RXNE_INT_Callback;
		SET_BIT(USART6->USART_CR1, USART_RXNEIE_BIT_POS);
		MNVIC_voidEnableIRQ(USART6_IRQn);
	}
}
 8002488:	e024      	b.n	80024d4 <UART_RXNE_INT_Init+0x78>
	else if (UARTConfig->UART_Instance == USART2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <UART_RXNE_INT_Init+0x88>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d10d      	bne.n	80024b0 <UART_RXNE_INT_Init+0x54>
		USART2_RXNE_INT_Callback = UARTConfig->UART_RXNE_INT_Callback;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <UART_RXNE_INT_Init+0x8c>)
 800249a:	6013      	str	r3, [r2, #0]
		SET_BIT(USART2->USART_CR1, USART_RXNEIE_BIT_POS);
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <UART_RXNE_INT_Init+0x88>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <UART_RXNE_INT_Init+0x88>)
 80024a2:	f043 0320 	orr.w	r3, r3, #32
 80024a6:	60d3      	str	r3, [r2, #12]
		MNVIC_voidEnableIRQ(USART2_IRQn);
 80024a8:	2026      	movs	r0, #38	; 0x26
 80024aa:	f7ff fad3 	bl	8001a54 <MNVIC_voidEnableIRQ>
}
 80024ae:	e011      	b.n	80024d4 <UART_RXNE_INT_Init+0x78>
	else if (UARTConfig->UART_Instance == USART6)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <UART_RXNE_INT_Init+0x90>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10c      	bne.n	80024d4 <UART_RXNE_INT_Init+0x78>
		USART6_RXNE_INT_Callback = UARTConfig->UART_RXNE_INT_Callback;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <UART_RXNE_INT_Init+0x94>)
 80024c0:	6013      	str	r3, [r2, #0]
		SET_BIT(USART6->USART_CR1, USART_RXNEIE_BIT_POS);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <UART_RXNE_INT_Init+0x90>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <UART_RXNE_INT_Init+0x90>)
 80024c8:	f043 0320 	orr.w	r3, r3, #32
 80024cc:	60d3      	str	r3, [r2, #12]
		MNVIC_voidEnableIRQ(USART6_IRQn);
 80024ce:	2047      	movs	r0, #71	; 0x47
 80024d0:	f7ff fac0 	bl	8001a54 <MNVIC_voidEnableIRQ>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40011000 	.word	0x40011000
 80024e0:	20000144 	.word	0x20000144
 80024e4:	40004400 	.word	0x40004400
 80024e8:	20000148 	.word	0x20000148
 80024ec:	40011400 	.word	0x40011400
 80024f0:	2000014c 	.word	0x2000014c

080024f4 <UART_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void UART_voidInit(const UART_InitTypeDef* UARTConfig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 /* Enable UART Clock */
	UART_ClockEnable(UARTConfig);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fdcb 	bl	8002098 <UART_ClockEnable>

  /* UART GPIO Config */
   UART_voidGPIOConfig(UARTConfig);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fdf4 	bl	80020f0 <UART_voidGPIOConfig>

 /* Deinit UART */
	UARTConfig->UART_Instance->USART_CR1 =0x00000000U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
	UARTConfig->UART_Instance->USART_CR2 =0x00000000U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]

/* Set USART Datawidth and Parity */
	UARTConfig->UART_Instance->USART_CR1 = UARTConfig->UART_DataWidth | UARTConfig->UART_Parity;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6899      	ldr	r1, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

/* Set USART Stop Bits */
	UARTConfig->UART_Instance->USART_CR2 = UARTConfig->UART_StopBits;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68d2      	ldr	r2, [r2, #12]
 8002530:	611a      	str	r2, [r3, #16]

/* Set USART Baudrate */
	UART_SetBaudRate(UARTConfig);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff fe3c 	bl	80021b0 <UART_SetBaudRate>
/* Config USART TC interrupt */
	if(UARTConfig->UART_TCIE == INTERRUPT_ENABLED)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d102      	bne.n	8002546 <UART_voidInit+0x52>
	{
		UART_TC_INT_Init(UARTConfig);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff3f 	bl	80023c4 <UART_TC_INT_Init>
	}
/* Config USART RXNE interrupt */
	if(UARTConfig->UART_RXNEIE == INTERRUPT_ENABLED)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <UART_voidInit+0x60>
	{
		UART_RXNE_INT_Init(UARTConfig);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ff84 	bl	800245c <UART_RXNE_INT_Init>
	}
 /* Enable USART TX and RX */
	UARTConfig->UART_Instance->USART_CR1 |= ((1<< UART_TE_BIT_POS) |(1<< UART_RE_BIT_POS) | (1<< UART_UE_BIT_POS));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002562:	f043 030c 	orr.w	r3, r3, #12
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <USART1_IRQHandler>:
	return Local_u8ErrorState;
}

/******************** USART ISRs *******************************************/
void USART1_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	if(GET_UART1_TC_FLAG() == INTERRUPT_ACTIVE)
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <USART1_IRQHandler+0x58>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10c      	bne.n	800259c <USART1_IRQHandler+0x2c>
	{
		CLEAR_UART1_TC_FLAG();
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <USART1_IRQHandler+0x58>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <USART1_IRQHandler+0x58>)
 8002588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800258c:	6013      	str	r3, [r2, #0]
		if(USART1_TC_INT_Callback != NULL)
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <USART1_IRQHandler+0x5c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <USART1_IRQHandler+0x2c>
		{
			USART1_TC_INT_Callback();
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <USART1_IRQHandler+0x5c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4798      	blx	r3
		}
	}

	if(GET_UART1_RXNE_FLAG() == INTERRUPT_ACTIVE)
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <USART1_IRQHandler+0x58>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10c      	bne.n	80025c4 <USART1_IRQHandler+0x54>
	{
		CLEAR_UART1_RXNE_FLAG();
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <USART1_IRQHandler+0x58>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <USART1_IRQHandler+0x58>)
 80025b0:	f023 0320 	bic.w	r3, r3, #32
 80025b4:	6013      	str	r3, [r2, #0]
		if(USART1_RXNE_INT_Callback != NULL)
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <USART1_IRQHandler+0x60>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <USART1_IRQHandler+0x54>
		{
			USART1_RXNE_INT_Callback();
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <USART1_IRQHandler+0x60>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4798      	blx	r3
		}
	}
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40011000 	.word	0x40011000
 80025cc:	20000138 	.word	0x20000138
 80025d0:	20000144 	.word	0x20000144

080025d4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	if(GET_UART2_TC_FLAG() == INTERRUPT_ACTIVE)
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <USART2_IRQHandler+0x58>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10c      	bne.n	8002600 <USART2_IRQHandler+0x2c>
	{
		CLEAR_UART2_TC_FLAG();
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <USART2_IRQHandler+0x58>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <USART2_IRQHandler+0x58>)
 80025ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f0:	6013      	str	r3, [r2, #0]
		if(USART2_TC_INT_Callback != NULL)
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <USART2_IRQHandler+0x5c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <USART2_IRQHandler+0x2c>
		{
			USART2_TC_INT_Callback();
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <USART2_IRQHandler+0x5c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4798      	blx	r3
		}
	}
	if(GET_UART2_RXNE_FLAG() == INTERRUPT_ACTIVE)
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <USART2_IRQHandler+0x58>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d10c      	bne.n	8002628 <USART2_IRQHandler+0x54>
	{
		CLEAR_UART2_RXNE_FLAG();
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <USART2_IRQHandler+0x58>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a06      	ldr	r2, [pc, #24]	; (800262c <USART2_IRQHandler+0x58>)
 8002614:	f023 0320 	bic.w	r3, r3, #32
 8002618:	6013      	str	r3, [r2, #0]
		if(USART2_RXNE_INT_Callback != NULL)
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <USART2_IRQHandler+0x60>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <USART2_IRQHandler+0x54>
		{
			USART2_RXNE_INT_Callback();
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <USART2_IRQHandler+0x60>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4798      	blx	r3
		}
	}
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40004400 	.word	0x40004400
 8002630:	2000013c 	.word	0x2000013c
 8002634:	20000148 	.word	0x20000148

08002638 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	if(GET_UART6_TC_FLAG() == INTERRUPT_ACTIVE)
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <USART6_IRQHandler+0x58>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10c      	bne.n	8002664 <USART6_IRQHandler+0x2c>
	{
		CLEAR_UART6_TC_FLAG();
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <USART6_IRQHandler+0x58>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a10      	ldr	r2, [pc, #64]	; (8002690 <USART6_IRQHandler+0x58>)
 8002650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002654:	6013      	str	r3, [r2, #0]
		if(USART6_TC_INT_Callback != NULL)
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <USART6_IRQHandler+0x5c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <USART6_IRQHandler+0x2c>
		{
			USART6_TC_INT_Callback();
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <USART6_IRQHandler+0x5c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4798      	blx	r3
		}
	}
	if(GET_UART6_RXNE_FLAG() == INTERRUPT_ACTIVE)
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <USART6_IRQHandler+0x58>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d10c      	bne.n	800268c <USART6_IRQHandler+0x54>
	{
		CLEAR_UART6_RXNE_FLAG();
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <USART6_IRQHandler+0x58>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a06      	ldr	r2, [pc, #24]	; (8002690 <USART6_IRQHandler+0x58>)
 8002678:	f023 0320 	bic.w	r3, r3, #32
 800267c:	6013      	str	r3, [r2, #0]
		if(USART6_RXNE_INT_Callback != NULL)
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <USART6_IRQHandler+0x60>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <USART6_IRQHandler+0x54>
		{
			USART6_RXNE_INT_Callback();
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <USART6_IRQHandler+0x60>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4798      	blx	r3
		}
	}
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40011400 	.word	0x40011400
 8002694:	20000140 	.word	0x20000140
 8002698:	2000014c 	.word	0x2000014c

0800269c <uart_receive>:
#include "HAL/TFT/TFT_Lcfg.h"

u32 counter;
char m[100]={0};
void uart_receive()
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
static u8 counter = 0;
	m[counter]= UART1_Cfg.UART_Instance->USART_DR;
 80026a2:	4b2a      	ldr	r3, [pc, #168]	; (800274c <uart_receive+0xb0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <uart_receive+0xb4>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	b2c9      	uxtb	r1, r1
 80026b0:	4b28      	ldr	r3, [pc, #160]	; (8002754 <uart_receive+0xb8>)
 80026b2:	5499      	strb	r1, [r3, r2]
	counter++;
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <uart_receive+0xb4>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <uart_receive+0xb4>)
 80026be:	701a      	strb	r2, [r3, #0]
	TFT_WriteStringPosWithBgColor(&TFT_Config,0,0,m,TFT_BLUE,TFT_WHITE);
 80026c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	231f      	movs	r3, #31
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <uart_receive+0xb8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	4821      	ldr	r0, [pc, #132]	; (8002758 <uart_receive+0xbc>)
 80026d2:	f7fe fb7d 	bl	8000dd0 <TFT_WriteStringPosWithBgColor>
			Delay_sec(5);
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <uart_receive+0xc0>)
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e002      	b.n	80026e2 <uart_receive+0x46>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3b01      	subs	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <uart_receive+0x40>
			TFT_WriteStringPosWithBgColor(&TFT_Config,1,0,"TFT Driver",TFT_RED,TFT_WHITE);
 80026e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <uart_receive+0xc4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	2101      	movs	r1, #1
 80026fa:	4817      	ldr	r0, [pc, #92]	; (8002758 <uart_receive+0xbc>)
 80026fc:	f7fe fb68 	bl	8000dd0 <TFT_WriteStringPosWithBgColor>
			Delay_sec(5);
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <uart_receive+0xc0>)
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	e002      	b.n	800270c <uart_receive+0x70>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3b01      	subs	r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f9      	bne.n	8002706 <uart_receive+0x6a>
			TFT_WriteStringPosWithBgColor(&TFT_Config,4,0,"Completed",TFT_GREEN,TFT_WHITE);
 8002712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <uart_receive+0xc8>)
 8002720:	2200      	movs	r2, #0
 8002722:	2104      	movs	r1, #4
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <uart_receive+0xbc>)
 8002726:	f7fe fb53 	bl	8000dd0 <TFT_WriteStringPosWithBgColor>
			Delay_sec(5);
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <uart_receive+0xc0>)
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	e002      	b.n	8002736 <uart_receive+0x9a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f9      	bne.n	8002730 <uart_receive+0x94>
			TFT_ClearScreen(&TFT_Config);
 800273c:	4806      	ldr	r0, [pc, #24]	; (8002758 <uart_receive+0xbc>)
 800273e:	f7fe fbc8 	bl	8000ed2 <TFT_ClearScreen>
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000006c 	.word	0x2000006c
 8002750:	200001b4 	.word	0x200001b4
 8002754:	20000150 	.word	0x20000150
 8002758:	20000000 	.word	0x20000000
 800275c:	003d0900 	.word	0x003d0900
 8002760:	0800285c 	.word	0x0800285c
 8002764:	08002868 	.word	0x08002868

08002768 <main>:

// ----------------------------------------------------------------------------

int main(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

	TFT_voidInit(&TFT_Config);
 800276c:	4806      	ldr	r0, [pc, #24]	; (8002788 <main+0x20>)
 800276e:	f7fe f9ed 	bl	8000b4c <TFT_voidInit>
	UART1_Cfg.UART_RXNEIE = INTERRUPT_ENABLED;
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <main+0x24>)
 8002774:	2201      	movs	r2, #1
 8002776:	61da      	str	r2, [r3, #28]
	UART1_Cfg.UART_RXNE_INT_Callback = uart_receive;
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <main+0x24>)
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <main+0x28>)
 800277c:	621a      	str	r2, [r3, #32]
	UART_voidInit(&UART1_Cfg);
 800277e:	4803      	ldr	r0, [pc, #12]	; (800278c <main+0x24>)
 8002780:	f7ff feb8 	bl	80024f4 <UART_voidInit>

	while(1)
 8002784:	e7fe      	b.n	8002784 <main+0x1c>
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000
 800278c:	2000006c 	.word	0x2000006c
 8002790:	0800269d 	.word	0x0800269d

08002794 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8002798:	f7ff f9e8 	bl	8001b6c <RCC_voidInit>
	MSysTick_voidInit();
 800279c:	f7ff fbe8 	bl	8001f70 <MSysTick_voidInit>
	MNVIC_voidInit();
 80027a0:	f7ff f952 	bl	8001a48 <MNVIC_voidInit>
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027ac:	f7ff fff2 	bl	8002794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b0:	480c      	ldr	r0, [pc, #48]	; (80027e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027b2:	490d      	ldr	r1, [pc, #52]	; (80027e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <LoopForever+0xe>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c8:	4c0a      	ldr	r4, [pc, #40]	; (80027f4 <LoopForever+0x16>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027d6:	f000 f811 	bl	80027fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027da:	f7ff ffc5 	bl	8002768 <main>

080027de <LoopForever>:

LoopForever:
  b LoopForever
 80027de:	e7fe      	b.n	80027de <LoopForever>
  ldr   r0, =_estack
 80027e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80027ec:	080035d8 	.word	0x080035d8
  ldr r2, =_sbss
 80027f0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80027f4:	200001b8 	.word	0x200001b8

080027f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC_IRQHandler>
	...

080027fc <__libc_init_array>:
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	4d0d      	ldr	r5, [pc, #52]	; (8002834 <__libc_init_array+0x38>)
 8002800:	4c0d      	ldr	r4, [pc, #52]	; (8002838 <__libc_init_array+0x3c>)
 8002802:	1b64      	subs	r4, r4, r5
 8002804:	10a4      	asrs	r4, r4, #2
 8002806:	2600      	movs	r6, #0
 8002808:	42a6      	cmp	r6, r4
 800280a:	d109      	bne.n	8002820 <__libc_init_array+0x24>
 800280c:	4d0b      	ldr	r5, [pc, #44]	; (800283c <__libc_init_array+0x40>)
 800280e:	4c0c      	ldr	r4, [pc, #48]	; (8002840 <__libc_init_array+0x44>)
 8002810:	f000 f818 	bl	8002844 <_init>
 8002814:	1b64      	subs	r4, r4, r5
 8002816:	10a4      	asrs	r4, r4, #2
 8002818:	2600      	movs	r6, #0
 800281a:	42a6      	cmp	r6, r4
 800281c:	d105      	bne.n	800282a <__libc_init_array+0x2e>
 800281e:	bd70      	pop	{r4, r5, r6, pc}
 8002820:	f855 3b04 	ldr.w	r3, [r5], #4
 8002824:	4798      	blx	r3
 8002826:	3601      	adds	r6, #1
 8002828:	e7ee      	b.n	8002808 <__libc_init_array+0xc>
 800282a:	f855 3b04 	ldr.w	r3, [r5], #4
 800282e:	4798      	blx	r3
 8002830:	3601      	adds	r6, #1
 8002832:	e7f2      	b.n	800281a <__libc_init_array+0x1e>
 8002834:	080035d0 	.word	0x080035d0
 8002838:	080035d0 	.word	0x080035d0
 800283c:	080035d0 	.word	0x080035d0
 8002840:	080035d4 	.word	0x080035d4

08002844 <_init>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	bf00      	nop
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr

08002850 <_fini>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	bf00      	nop
 8002854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002856:	bc08      	pop	{r3}
 8002858:	469e      	mov	lr, r3
 800285a:	4770      	bx	lr
