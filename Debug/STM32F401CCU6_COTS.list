
STM32F401CCU6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001424  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080015b8  080015b8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080015b8  080015b8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080015b8  080015b8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015b8  080015b8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b8  080015b8  000115b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015bc  080015bc  000115bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080015c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000064  08001624  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08001624  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002ac7  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d14  00000000  00000000  00022b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000468  00000000  00000000  000238b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000031f  00000000  00000000  00023d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000c31  00000000  00000000  0002403f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000029dc  00000000  00000000  00024c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b08e  00000000  00000000  0002764c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000fe4  00000000  00000000  000326dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000336c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000064 	.word	0x20000064
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080015a0 	.word	0x080015a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000068 	.word	0x20000068
 80001d0:	080015a0 	.word	0x080015a0

080001d4 <__aeabi_dmul>:
 80001d4:	b570      	push	{r4, r5, r6, lr}
 80001d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e2:	bf1d      	ittte	ne
 80001e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e8:	ea94 0f0c 	teqne	r4, ip
 80001ec:	ea95 0f0c 	teqne	r5, ip
 80001f0:	f000 f8de 	bleq	80003b0 <__aeabi_dmul+0x1dc>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea81 0603 	eor.w	r6, r1, r3
 80001fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000202:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000206:	bf18      	it	ne
 8000208:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800020c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000214:	d038      	beq.n	8000288 <__aeabi_dmul+0xb4>
 8000216:	fba0 ce02 	umull	ip, lr, r0, r2
 800021a:	f04f 0500 	mov.w	r5, #0
 800021e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000222:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000226:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022a:	f04f 0600 	mov.w	r6, #0
 800022e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000232:	f09c 0f00 	teq	ip, #0
 8000236:	bf18      	it	ne
 8000238:	f04e 0e01 	orrne.w	lr, lr, #1
 800023c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000240:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000244:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000248:	d204      	bcs.n	8000254 <__aeabi_dmul+0x80>
 800024a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024e:	416d      	adcs	r5, r5
 8000250:	eb46 0606 	adc.w	r6, r6, r6
 8000254:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000258:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800025c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000260:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000264:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000268:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800026c:	bf88      	it	hi
 800026e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000272:	d81e      	bhi.n	80002b2 <__aeabi_dmul+0xde>
 8000274:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800028c:	ea46 0101 	orr.w	r1, r6, r1
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	ea81 0103 	eor.w	r1, r1, r3
 8000298:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800029c:	bfc2      	ittt	gt
 800029e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a6:	bd70      	popgt	{r4, r5, r6, pc}
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f04f 0e00 	mov.w	lr, #0
 80002b0:	3c01      	subs	r4, #1
 80002b2:	f300 80ab 	bgt.w	800040c <__aeabi_dmul+0x238>
 80002b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ba:	bfde      	ittt	le
 80002bc:	2000      	movle	r0, #0
 80002be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c2:	bd70      	pople	{r4, r5, r6, pc}
 80002c4:	f1c4 0400 	rsb	r4, r4, #0
 80002c8:	3c20      	subs	r4, #32
 80002ca:	da35      	bge.n	8000338 <__aeabi_dmul+0x164>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc1b      	bgt.n	8000308 <__aeabi_dmul+0x134>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f305 	lsl.w	r3, r0, r5
 80002dc:	fa20 f004 	lsr.w	r0, r0, r4
 80002e0:	fa01 f205 	lsl.w	r2, r1, r5
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f4:	fa21 f604 	lsr.w	r6, r1, r4
 80002f8:	eb42 0106 	adc.w	r1, r2, r6
 80002fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000300:	bf08      	it	eq
 8000302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f1c4 040c 	rsb	r4, r4, #12
 800030c:	f1c4 0520 	rsb	r5, r4, #32
 8000310:	fa00 f304 	lsl.w	r3, r0, r4
 8000314:	fa20 f005 	lsr.w	r0, r0, r5
 8000318:	fa01 f204 	lsl.w	r2, r1, r4
 800031c:	ea40 0002 	orr.w	r0, r0, r2
 8000320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f205 	lsl.w	r2, r0, r5
 8000340:	ea4e 0e02 	orr.w	lr, lr, r2
 8000344:	fa20 f304 	lsr.w	r3, r0, r4
 8000348:	fa01 f205 	lsl.w	r2, r1, r5
 800034c:	ea43 0302 	orr.w	r3, r3, r2
 8000350:	fa21 f004 	lsr.w	r0, r1, r4
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	fa21 f204 	lsr.w	r2, r1, r4
 800035c:	ea20 0002 	bic.w	r0, r0, r2
 8000360:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000368:	bf08      	it	eq
 800036a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f094 0f00 	teq	r4, #0
 8000374:	d10f      	bne.n	8000396 <__aeabi_dmul+0x1c2>
 8000376:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037a:	0040      	lsls	r0, r0, #1
 800037c:	eb41 0101 	adc.w	r1, r1, r1
 8000380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000384:	bf08      	it	eq
 8000386:	3c01      	subeq	r4, #1
 8000388:	d0f7      	beq.n	800037a <__aeabi_dmul+0x1a6>
 800038a:	ea41 0106 	orr.w	r1, r1, r6
 800038e:	f095 0f00 	teq	r5, #0
 8000392:	bf18      	it	ne
 8000394:	4770      	bxne	lr
 8000396:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	eb43 0303 	adc.w	r3, r3, r3
 80003a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a4:	bf08      	it	eq
 80003a6:	3d01      	subeq	r5, #1
 80003a8:	d0f7      	beq.n	800039a <__aeabi_dmul+0x1c6>
 80003aa:	ea43 0306 	orr.w	r3, r3, r6
 80003ae:	4770      	bx	lr
 80003b0:	ea94 0f0c 	teq	r4, ip
 80003b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b8:	bf18      	it	ne
 80003ba:	ea95 0f0c 	teqne	r5, ip
 80003be:	d00c      	beq.n	80003da <__aeabi_dmul+0x206>
 80003c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c4:	bf18      	it	ne
 80003c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ca:	d1d1      	bne.n	8000370 <__aeabi_dmul+0x19c>
 80003cc:	ea81 0103 	eor.w	r1, r1, r3
 80003d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003de:	bf06      	itte	eq
 80003e0:	4610      	moveq	r0, r2
 80003e2:	4619      	moveq	r1, r3
 80003e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e8:	d019      	beq.n	800041e <__aeabi_dmul+0x24a>
 80003ea:	ea94 0f0c 	teq	r4, ip
 80003ee:	d102      	bne.n	80003f6 <__aeabi_dmul+0x222>
 80003f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f4:	d113      	bne.n	800041e <__aeabi_dmul+0x24a>
 80003f6:	ea95 0f0c 	teq	r5, ip
 80003fa:	d105      	bne.n	8000408 <__aeabi_dmul+0x234>
 80003fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000400:	bf1c      	itt	ne
 8000402:	4610      	movne	r0, r2
 8000404:	4619      	movne	r1, r3
 8000406:	d10a      	bne.n	800041e <__aeabi_dmul+0x24a>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000422:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000426:	bd70      	pop	{r4, r5, r6, pc}

08000428 <__aeabi_drsub>:
 8000428:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800042c:	e002      	b.n	8000434 <__adddf3>
 800042e:	bf00      	nop

08000430 <__aeabi_dsub>:
 8000430:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000434 <__adddf3>:
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	bf1f      	itttt	ne
 800044a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000452:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000456:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045a:	f000 80e2 	beq.w	8000622 <__adddf3+0x1ee>
 800045e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000462:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000466:	bfb8      	it	lt
 8000468:	426d      	neglt	r5, r5
 800046a:	dd0c      	ble.n	8000486 <__adddf3+0x52>
 800046c:	442c      	add	r4, r5
 800046e:	ea80 0202 	eor.w	r2, r0, r2
 8000472:	ea81 0303 	eor.w	r3, r1, r3
 8000476:	ea82 0000 	eor.w	r0, r2, r0
 800047a:	ea83 0101 	eor.w	r1, r3, r1
 800047e:	ea80 0202 	eor.w	r2, r0, r2
 8000482:	ea81 0303 	eor.w	r3, r1, r3
 8000486:	2d36      	cmp	r5, #54	; 0x36
 8000488:	bf88      	it	hi
 800048a:	bd30      	pophi	{r4, r5, pc}
 800048c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000490:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000494:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000498:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800049c:	d002      	beq.n	80004a4 <__adddf3+0x70>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x84>
 80004b2:	4252      	negs	r2, r2
 80004b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b8:	ea94 0f05 	teq	r4, r5
 80004bc:	f000 80a7 	beq.w	800060e <__adddf3+0x1da>
 80004c0:	f1a4 0401 	sub.w	r4, r4, #1
 80004c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c8:	db0d      	blt.n	80004e6 <__adddf3+0xb2>
 80004ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ce:	fa22 f205 	lsr.w	r2, r2, r5
 80004d2:	1880      	adds	r0, r0, r2
 80004d4:	f141 0100 	adc.w	r1, r1, #0
 80004d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004dc:	1880      	adds	r0, r0, r2
 80004de:	fa43 f305 	asr.w	r3, r3, r5
 80004e2:	4159      	adcs	r1, r3
 80004e4:	e00e      	b.n	8000504 <__adddf3+0xd0>
 80004e6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ea:	f10e 0e20 	add.w	lr, lr, #32
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f4:	bf28      	it	cs
 80004f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	18c0      	adds	r0, r0, r3
 8000500:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	d507      	bpl.n	800051a <__adddf3+0xe6>
 800050a:	f04f 0e00 	mov.w	lr, #0
 800050e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000512:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000516:	eb6e 0101 	sbc.w	r1, lr, r1
 800051a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051e:	d31b      	bcc.n	8000558 <__adddf3+0x124>
 8000520:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000524:	d30c      	bcc.n	8000540 <__adddf3+0x10c>
 8000526:	0849      	lsrs	r1, r1, #1
 8000528:	ea5f 0030 	movs.w	r0, r0, rrx
 800052c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000530:	f104 0401 	add.w	r4, r4, #1
 8000534:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000538:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800053c:	f080 809a 	bcs.w	8000674 <__adddf3+0x240>
 8000540:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	ea41 0105 	orr.w	r1, r1, r5
 8000556:	bd30      	pop	{r4, r5, pc}
 8000558:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800055c:	4140      	adcs	r0, r0
 800055e:	eb41 0101 	adc.w	r1, r1, r1
 8000562:	3c01      	subs	r4, #1
 8000564:	bf28      	it	cs
 8000566:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056a:	d2e9      	bcs.n	8000540 <__adddf3+0x10c>
 800056c:	f091 0f00 	teq	r1, #0
 8000570:	bf04      	itt	eq
 8000572:	4601      	moveq	r1, r0
 8000574:	2000      	moveq	r0, #0
 8000576:	fab1 f381 	clz	r3, r1
 800057a:	bf08      	it	eq
 800057c:	3320      	addeq	r3, #32
 800057e:	f1a3 030b 	sub.w	r3, r3, #11
 8000582:	f1b3 0220 	subs.w	r2, r3, #32
 8000586:	da0c      	bge.n	80005a2 <__adddf3+0x16e>
 8000588:	320c      	adds	r2, #12
 800058a:	dd08      	ble.n	800059e <__adddf3+0x16a>
 800058c:	f102 0c14 	add.w	ip, r2, #20
 8000590:	f1c2 020c 	rsb	r2, r2, #12
 8000594:	fa01 f00c 	lsl.w	r0, r1, ip
 8000598:	fa21 f102 	lsr.w	r1, r1, r2
 800059c:	e00c      	b.n	80005b8 <__adddf3+0x184>
 800059e:	f102 0214 	add.w	r2, r2, #20
 80005a2:	bfd8      	it	le
 80005a4:	f1c2 0c20 	rsble	ip, r2, #32
 80005a8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b0:	bfdc      	itt	le
 80005b2:	ea41 010c 	orrle.w	r1, r1, ip
 80005b6:	4090      	lslle	r0, r2
 80005b8:	1ae4      	subs	r4, r4, r3
 80005ba:	bfa2      	ittt	ge
 80005bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c0:	4329      	orrge	r1, r5
 80005c2:	bd30      	popge	{r4, r5, pc}
 80005c4:	ea6f 0404 	mvn.w	r4, r4
 80005c8:	3c1f      	subs	r4, #31
 80005ca:	da1c      	bge.n	8000606 <__adddf3+0x1d2>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc0e      	bgt.n	80005ee <__adddf3+0x1ba>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0220 	rsb	r2, r4, #32
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f302 	lsl.w	r3, r1, r2
 80005e0:	ea40 0003 	orr.w	r0, r0, r3
 80005e4:	fa21 f304 	lsr.w	r3, r1, r4
 80005e8:	ea45 0103 	orr.w	r1, r5, r3
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	f1c4 040c 	rsb	r4, r4, #12
 80005f2:	f1c4 0220 	rsb	r2, r4, #32
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 f304 	lsl.w	r3, r1, r4
 80005fe:	ea40 0003 	orr.w	r0, r0, r3
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	fa21 f004 	lsr.w	r0, r1, r4
 800060a:	4629      	mov	r1, r5
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	f094 0f00 	teq	r4, #0
 8000612:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000616:	bf06      	itte	eq
 8000618:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800061c:	3401      	addeq	r4, #1
 800061e:	3d01      	subne	r5, #1
 8000620:	e74e      	b.n	80004c0 <__adddf3+0x8c>
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf18      	it	ne
 8000628:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800062c:	d029      	beq.n	8000682 <__adddf3+0x24e>
 800062e:	ea94 0f05 	teq	r4, r5
 8000632:	bf08      	it	eq
 8000634:	ea90 0f02 	teqeq	r0, r2
 8000638:	d005      	beq.n	8000646 <__adddf3+0x212>
 800063a:	ea54 0c00 	orrs.w	ip, r4, r0
 800063e:	bf04      	itt	eq
 8000640:	4619      	moveq	r1, r3
 8000642:	4610      	moveq	r0, r2
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	ea91 0f03 	teq	r1, r3
 800064a:	bf1e      	ittt	ne
 800064c:	2100      	movne	r1, #0
 800064e:	2000      	movne	r0, #0
 8000650:	bd30      	popne	{r4, r5, pc}
 8000652:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000656:	d105      	bne.n	8000664 <__adddf3+0x230>
 8000658:	0040      	lsls	r0, r0, #1
 800065a:	4149      	adcs	r1, r1
 800065c:	bf28      	it	cs
 800065e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000668:	bf3c      	itt	cc
 800066a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066e:	bd30      	popcc	{r4, r5, pc}
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000678:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800067c:	f04f 0000 	mov.w	r0, #0
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000686:	bf1a      	itte	ne
 8000688:	4619      	movne	r1, r3
 800068a:	4610      	movne	r0, r2
 800068c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000690:	bf1c      	itt	ne
 8000692:	460b      	movne	r3, r1
 8000694:	4602      	movne	r2, r0
 8000696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069a:	bf06      	itte	eq
 800069c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a0:	ea91 0f03 	teqeq	r1, r3
 80006a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop

080006ac <__aeabi_ui2d>:
 80006ac:	f090 0f00 	teq	r0, #0
 80006b0:	bf04      	itt	eq
 80006b2:	2100      	moveq	r1, #0
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c0:	f04f 0500 	mov.w	r5, #0
 80006c4:	f04f 0100 	mov.w	r1, #0
 80006c8:	e750      	b.n	800056c <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_i2d>:
 80006cc:	f090 0f00 	teq	r0, #0
 80006d0:	bf04      	itt	eq
 80006d2:	2100      	moveq	r1, #0
 80006d4:	4770      	bxeq	lr
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e4:	bf48      	it	mi
 80006e6:	4240      	negmi	r0, r0
 80006e8:	f04f 0100 	mov.w	r1, #0
 80006ec:	e73e      	b.n	800056c <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2d>:
 80006f0:	0042      	lsls	r2, r0, #1
 80006f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fe:	bf1f      	itttt	ne
 8000700:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000708:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800070c:	4770      	bxne	lr
 800070e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000712:	bf08      	it	eq
 8000714:	4770      	bxeq	lr
 8000716:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071a:	bf04      	itt	eq
 800071c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	e71c      	b.n	800056c <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_ul2d>:
 8000734:	ea50 0201 	orrs.w	r2, r0, r1
 8000738:	bf08      	it	eq
 800073a:	4770      	bxeq	lr
 800073c:	b530      	push	{r4, r5, lr}
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	e00a      	b.n	800075a <__aeabi_l2d+0x16>

08000744 <__aeabi_l2d>:
 8000744:	ea50 0201 	orrs.w	r2, r0, r1
 8000748:	bf08      	it	eq
 800074a:	4770      	bxeq	lr
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000752:	d502      	bpl.n	800075a <__aeabi_l2d+0x16>
 8000754:	4240      	negs	r0, r0
 8000756:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000762:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000766:	f43f aed8 	beq.w	800051a <__adddf3+0xe6>
 800076a:	f04f 0203 	mov.w	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077a:	bf18      	it	ne
 800077c:	3203      	addne	r2, #3
 800077e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	fa00 fc03 	lsl.w	ip, r0, r3
 800078a:	fa20 f002 	lsr.w	r0, r0, r2
 800078e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000792:	ea40 000e 	orr.w	r0, r0, lr
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	4414      	add	r4, r2
 800079c:	e6bd      	b.n	800051a <__adddf3+0xe6>
 800079e:	bf00      	nop

080007a0 <__aeabi_d2uiz>:
 80007a0:	004a      	lsls	r2, r1, #1
 80007a2:	d211      	bcs.n	80007c8 <__aeabi_d2uiz+0x28>
 80007a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a8:	d211      	bcs.n	80007ce <__aeabi_d2uiz+0x2e>
 80007aa:	d50d      	bpl.n	80007c8 <__aeabi_d2uiz+0x28>
 80007ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b4:	d40e      	bmi.n	80007d4 <__aeabi_d2uiz+0x34>
 80007b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d2:	d102      	bne.n	80007da <__aeabi_d2uiz+0x3a>
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	4770      	bx	lr
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	4770      	bx	lr

080007e0 <DMA1_Stream0_IRQHandler>:
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
}

/************************************* DMA1 ISRs************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF0_BIT_POS);
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <DMA1_Stream0_IRQHandler+0x24>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <DMA1_Stream0_IRQHandler+0x24>)
 80007ea:	f043 0320 	orr.w	r3, r3, #32
 80007ee:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[0] != NULL)
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <DMA1_Stream0_IRQHandler+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <DMA1_Stream0_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[0]();
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <DMA1_Stream0_IRQHandler+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4798      	blx	r3
	}
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40026000 	.word	0x40026000
 8000808:	20000080 	.word	0x20000080

0800080c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF1_BIT_POS);
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <DMA1_Stream1_IRQHandler+0x24>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <DMA1_Stream1_IRQHandler+0x24>)
 8000816:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800081a:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[1] != NULL)
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <DMA1_Stream1_IRQHandler+0x28>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <DMA1_Stream1_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[1]();
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <DMA1_Stream1_IRQHandler+0x28>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	4798      	blx	r3
	}
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40026000 	.word	0x40026000
 8000834:	20000080 	.word	0x20000080

08000838 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF2_BIT_POS);
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <DMA1_Stream2_IRQHandler+0x24>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <DMA1_Stream2_IRQHandler+0x24>)
 8000842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000846:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[2] != NULL)
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <DMA1_Stream2_IRQHandler+0x28>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <DMA1_Stream2_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[2]();
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <DMA1_Stream2_IRQHandler+0x28>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	4798      	blx	r3
	}
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40026000 	.word	0x40026000
 8000860:	20000080 	.word	0x20000080

08000864 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF3_BIT_POS);
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <DMA1_Stream3_IRQHandler+0x24>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <DMA1_Stream3_IRQHandler+0x24>)
 800086e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000872:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[3] != NULL)
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <DMA1_Stream3_IRQHandler+0x28>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d002      	beq.n	8000882 <DMA1_Stream3_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[3]();
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <DMA1_Stream3_IRQHandler+0x28>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4798      	blx	r3
	}
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40026000 	.word	0x40026000
 800088c:	20000080 	.word	0x20000080

08000890 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF4_BIT_POS);
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <DMA1_Stream4_IRQHandler+0x24>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <DMA1_Stream4_IRQHandler+0x24>)
 800089a:	f043 0320 	orr.w	r3, r3, #32
 800089e:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[4] != NULL)
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <DMA1_Stream4_IRQHandler+0x28>)
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <DMA1_Stream4_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[4]();
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <DMA1_Stream4_IRQHandler+0x28>)
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	4798      	blx	r3
	}
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40026000 	.word	0x40026000
 80008b8:	20000080 	.word	0x20000080

080008bc <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF5_BIT_POS);
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <DMA1_Stream5_IRQHandler+0x24>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <DMA1_Stream5_IRQHandler+0x24>)
 80008c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008ca:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[5] != NULL)
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <DMA1_Stream5_IRQHandler+0x28>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <DMA1_Stream5_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[5]();
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <DMA1_Stream5_IRQHandler+0x28>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	4798      	blx	r3
	}
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40026000 	.word	0x40026000
 80008e4:	20000080 	.word	0x20000080

080008e8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF6_BIT_POS);
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <DMA1_Stream6_IRQHandler+0x24>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <DMA1_Stream6_IRQHandler+0x24>)
 80008f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f6:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[6] != NULL)
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <DMA1_Stream6_IRQHandler+0x28>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <DMA1_Stream6_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[6]();
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <DMA1_Stream6_IRQHandler+0x28>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4798      	blx	r3
	}
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40026000 	.word	0x40026000
 8000910:	20000080 	.word	0x20000080

08000914 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF7_BIT_POS);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <DMA1_Stream7_IRQHandler+0x24>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <DMA1_Stream7_IRQHandler+0x24>)
 800091e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000922:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[7] != NULL)
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <DMA1_Stream7_IRQHandler+0x28>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <DMA1_Stream7_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[7]();
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <DMA1_Stream7_IRQHandler+0x28>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	4798      	blx	r3
	}
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40026000 	.word	0x40026000
 800093c:	20000080 	.word	0x20000080

08000940 <DMA2_Stream0_IRQHandler>:

/************************************* DMA2 ISRs************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF0_BIT_POS);
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <DMA2_Stream0_IRQHandler+0x24>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <DMA2_Stream0_IRQHandler+0x24>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[0] != NULL)
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <DMA2_Stream0_IRQHandler+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <DMA2_Stream0_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[0]();
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <DMA2_Stream0_IRQHandler+0x28>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4798      	blx	r3
	}
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40026400 	.word	0x40026400
 8000968:	200000a0 	.word	0x200000a0

0800096c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF1_BIT_POS);
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <DMA2_Stream1_IRQHandler+0x24>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <DMA2_Stream1_IRQHandler+0x24>)
 8000976:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800097a:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[1] != NULL)
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <DMA2_Stream1_IRQHandler+0x28>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <DMA2_Stream1_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[1]();
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <DMA2_Stream1_IRQHandler+0x28>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	4798      	blx	r3
	}
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40026400 	.word	0x40026400
 8000994:	200000a0 	.word	0x200000a0

08000998 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF2_BIT_POS);
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <DMA2_Stream2_IRQHandler+0x24>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <DMA2_Stream2_IRQHandler+0x24>)
 80009a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a6:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[2] != NULL)
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <DMA2_Stream2_IRQHandler+0x28>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <DMA2_Stream2_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[2]();
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <DMA2_Stream2_IRQHandler+0x28>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4798      	blx	r3
	}
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40026400 	.word	0x40026400
 80009c0:	200000a0 	.word	0x200000a0

080009c4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF3_BIT_POS);
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <DMA2_Stream3_IRQHandler+0x24>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <DMA2_Stream3_IRQHandler+0x24>)
 80009ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009d2:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[3] != NULL)
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <DMA2_Stream3_IRQHandler+0x28>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d002      	beq.n	80009e2 <DMA2_Stream3_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[3]();
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <DMA2_Stream3_IRQHandler+0x28>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	4798      	blx	r3
	}
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40026400 	.word	0x40026400
 80009ec:	200000a0 	.word	0x200000a0

080009f0 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF4_BIT_POS);
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <DMA2_Stream4_IRQHandler+0x24>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <DMA2_Stream4_IRQHandler+0x24>)
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[4] != NULL)
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <DMA2_Stream4_IRQHandler+0x28>)
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <DMA2_Stream4_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[4]();
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <DMA2_Stream4_IRQHandler+0x28>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	4798      	blx	r3
	}
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40026400 	.word	0x40026400
 8000a18:	200000a0 	.word	0x200000a0

08000a1c <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF5_BIT_POS);
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <DMA2_Stream5_IRQHandler+0x24>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <DMA2_Stream5_IRQHandler+0x24>)
 8000a26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a2a:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[5] != NULL)
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <DMA2_Stream5_IRQHandler+0x28>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <DMA2_Stream5_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[5]();
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <DMA2_Stream5_IRQHandler+0x28>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	4798      	blx	r3
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40026400 	.word	0x40026400
 8000a44:	200000a0 	.word	0x200000a0

08000a48 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF6_BIT_POS);
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <DMA2_Stream6_IRQHandler+0x24>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <DMA2_Stream6_IRQHandler+0x24>)
 8000a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a56:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[6] != NULL)
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <DMA2_Stream6_IRQHandler+0x28>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <DMA2_Stream6_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[6]();
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <DMA2_Stream6_IRQHandler+0x28>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4798      	blx	r3
	}
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40026400 	.word	0x40026400
 8000a70:	200000a0 	.word	0x200000a0

08000a74 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF7_BIT_POS);
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <DMA2_Stream7_IRQHandler+0x24>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <DMA2_Stream7_IRQHandler+0x24>)
 8000a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a82:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[7] != NULL)
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <DMA2_Stream7_IRQHandler+0x28>)
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <DMA2_Stream7_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[7]();
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <DMA2_Stream7_IRQHandler+0x28>)
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	4798      	blx	r3
	}
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40026400 	.word	0x40026400
 8000a9c:	200000a0 	.word	0x200000a0

08000aa0 <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MEXTI_voidClearPendingFlag+0x2c>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <MEXTI_voidClearPendingFlag+0x2c>)
 8000aba:	430b      	orrs	r3, r1
 8000abc:	6153      	str	r3, [r2, #20]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40013c00 	.word	0x40013c00

08000ad0 <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MEXTI_u8GetPendingFlag+0x28>)
 8000adc:	695a      	ldr	r2, [r3, #20]
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	b2db      	uxtb	r3, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40013c00 	.word	0x40013c00

08000afc <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <EXTI0_IRQHandler+0x1c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <EXTI0_IRQHandler+0x1c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff ffc6 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000c0 	.word	0x200000c0

08000b1c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <EXTI1_IRQHandler+0x1c>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <EXTI1_IRQHandler+0x1c>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff ffb6 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200000c0 	.word	0x200000c0

08000b3c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <EXTI2_IRQHandler+0x1c>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <EXTI2_IRQHandler+0x1c>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff ffa6 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200000c0 	.word	0x200000c0

08000b5c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <EXTI3_IRQHandler+0x1c>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <EXTI3_IRQHandler+0x1c>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f7ff ff96 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000c0 	.word	0x200000c0

08000b7c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <EXTI4_IRQHandler+0x1c>)
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <EXTI4_IRQHandler+0x1c>)
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 8000b8e:	2004      	movs	r0, #4
 8000b90:	f7ff ff86 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000c0 	.word	0x200000c0

08000b9c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 8000ba0:	2005      	movs	r0, #5
 8000ba2:	f7ff ff95 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00a      	beq.n	8000bc2 <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 8000bba:	2005      	movs	r0, #5
 8000bbc:	f7ff ff70 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 8000bc0:	e042      	b.n	8000c48 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 8000bc2:	2006      	movs	r0, #6
 8000bc4:	f7ff ff84 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00a      	beq.n	8000be4 <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 8000bdc:	2006      	movs	r0, #6
 8000bde:	f7ff ff5f 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000be2:	e031      	b.n	8000c48 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 8000be4:	2007      	movs	r0, #7
 8000be6:	f7ff ff73 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00a      	beq.n	8000c06 <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f7ff ff4e 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000c04:	e020      	b.n	8000c48 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 8000c06:	2008      	movs	r0, #8
 8000c08:	f7ff ff62 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00a      	beq.n	8000c28 <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000c14:	6a1b      	ldr	r3, [r3, #32]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000c1c:	6a1b      	ldr	r3, [r3, #32]
 8000c1e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 8000c20:	2008      	movs	r0, #8
 8000c22:	f7ff ff3d 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000c26:	e00f      	b.n	8000c48 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 8000c28:	2009      	movs	r0, #9
 8000c2a:	f7ff ff51 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d009      	beq.n	8000c48 <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <EXTI9_5_IRQHandler+0xb0>)
 8000c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c40:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 8000c42:	2009      	movs	r0, #9
 8000c44:	f7ff ff2c 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000c0 	.word	0x200000c0

08000c50 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 8000c54:	200a      	movs	r0, #10
 8000c56:	f7ff ff3b 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00a      	beq.n	8000c76 <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6c:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f7ff ff16 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 8000c74:	e053      	b.n	8000d1e <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 8000c76:	200b      	movs	r0, #11
 8000c78:	f7ff ff2a 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00a      	beq.n	8000c98 <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 8000c8a:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 8000c90:	200b      	movs	r0, #11
 8000c92:	f7ff ff05 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000c96:	e042      	b.n	8000d1e <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 8000c98:	200c      	movs	r0, #12
 8000c9a:	f7ff ff19 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00a      	beq.n	8000cba <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 8000cb2:	200c      	movs	r0, #12
 8000cb4:	f7ff fef4 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000cb8:	e031      	b.n	8000d1e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 8000cba:	200d      	movs	r0, #13
 8000cbc:	f7ff ff08 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00a      	beq.n	8000cdc <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd2:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 8000cd4:	200d      	movs	r0, #13
 8000cd6:	f7ff fee3 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000cda:	e020      	b.n	8000d1e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 8000cdc:	200e      	movs	r0, #14
 8000cde:	f7ff fef7 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00a      	beq.n	8000cfe <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf4:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 8000cf6:	200e      	movs	r0, #14
 8000cf8:	f7ff fed2 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000cfc:	e00f      	b.n	8000d1e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f7ff fee6 	bl	8000ad0 <MEXTI_u8GetPendingFlag>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d009      	beq.n	8000d1e <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <EXTI15_10_IRQHandler+0xd4>)
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 8000d18:	200f      	movs	r0, #15
 8000d1a:	f7ff fec1 	bl	8000aa0 <MEXTI_voidClearPendingFlag>
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000c0 	.word	0x200000c0

08000d28 <GPIO_voidSetPinMode>:
#include"../../../Inc/MCAL/GPIO/GPIO_config.h"
#include"../../../Inc/MCAL/GPIO/GPIO_interface.h"
#include"../../../Inc/MCAL/GPIO/GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	460b      	mov	r3, r1
 8000d34:	71bb      	strb	r3, [r7, #6]
 8000d36:	4613      	mov	r3, r2
 8000d38:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d02c      	beq.n	8000d9a <GPIO_voidSetPinMode+0x72>
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	dc3d      	bgt.n	8000dc0 <GPIO_voidSetPinMode+0x98>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <GPIO_voidSetPinMode+0x26>
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d013      	beq.n	8000d74 <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8000d4c:	e038      	b.n	8000dc0 <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <GPIO_voidSetPinMode+0xa8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	79ba      	ldrb	r2, [r7, #6]
 8000d54:	0052      	lsls	r2, r2, #1
 8000d56:	2103      	movs	r1, #3
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	43d2      	mvns	r2, r2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	7979      	ldrb	r1, [r7, #5]
 8000d62:	79ba      	ldrb	r2, [r7, #6]
 8000d64:	0052      	lsls	r2, r2, #1
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <GPIO_voidSetPinMode+0xa8>)
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	6013      	str	r3, [r2, #0]
      break;
 8000d72:	e026      	b.n	8000dc2 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <GPIO_voidSetPinMode+0xac>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	79ba      	ldrb	r2, [r7, #6]
 8000d7a:	0052      	lsls	r2, r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	43d2      	mvns	r2, r2
 8000d84:	4013      	ands	r3, r2
 8000d86:	7979      	ldrb	r1, [r7, #5]
 8000d88:	79ba      	ldrb	r2, [r7, #6]
 8000d8a:	0052      	lsls	r2, r2, #1
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	4611      	mov	r1, r2
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <GPIO_voidSetPinMode+0xac>)
 8000d94:	430b      	orrs	r3, r1
 8000d96:	6013      	str	r3, [r2, #0]
      break;
 8000d98:	e013      	b.n	8000dc2 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <GPIO_voidSetPinMode+0xb0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	79ba      	ldrb	r2, [r7, #6]
 8000da0:	0052      	lsls	r2, r2, #1
 8000da2:	2103      	movs	r1, #3
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	43d2      	mvns	r2, r2
 8000daa:	4013      	ands	r3, r2
 8000dac:	7979      	ldrb	r1, [r7, #5]
 8000dae:	79ba      	ldrb	r2, [r7, #6]
 8000db0:	0052      	lsls	r2, r2, #1
 8000db2:	fa01 f202 	lsl.w	r2, r1, r2
 8000db6:	4611      	mov	r1, r2
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <GPIO_voidSetPinMode+0xb0>)
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	6013      	str	r3, [r2, #0]
      break;
 8000dbe:	e000      	b.n	8000dc2 <GPIO_voidSetPinMode+0x9a>
      break;
 8000dc0:	bf00      	nop
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40020800 	.word	0x40020800

08000ddc <GPIO_voidSetPinAlternateFunction>:
    default:
      break;
  }
}
void GPIO_voidSetPinAlternateFunction(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex, u8 Copy_u8AlternateFunction)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
 8000de6:	460b      	mov	r3, r1
 8000de8:	71bb      	strb	r3, [r7, #6]
 8000dea:	4613      	mov	r3, r2
 8000dec:	717b      	strb	r3, [r7, #5]
	switch (Copy_PortIndex) {
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d05d      	beq.n	8000eb0 <GPIO_voidSetPinAlternateFunction+0xd4>
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	f300 8086 	bgt.w	8000f06 <GPIO_voidSetPinAlternateFunction+0x12a>
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <GPIO_voidSetPinAlternateFunction+0x28>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d02b      	beq.n	8000e5a <GPIO_voidSetPinAlternateFunction+0x7e>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
	    				Copy_u8AlternateFunction << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS);
	    	}
	      break;
	    default:
	      break;
 8000e02:	e080      	b.n	8000f06 <GPIO_voidSetPinAlternateFunction+0x12a>
             if(Copy_PinIndex < 8)
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	2b07      	cmp	r3, #7
 8000e08:	d812      	bhi.n	8000e30 <GPIO_voidSetPinAlternateFunction+0x54>
            	 MODIFY_REG(GPIOA_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <GPIO_voidSetPinAlternateFunction+0x138>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	79ba      	ldrb	r2, [r7, #6]
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	210f      	movs	r1, #15
 8000e14:	fa01 f202 	lsl.w	r2, r1, r2
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	7979      	ldrb	r1, [r7, #5]
 8000e1e:	79ba      	ldrb	r2, [r7, #6]
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	4611      	mov	r1, r2
 8000e28:	4a3a      	ldr	r2, [pc, #232]	; (8000f14 <GPIO_voidSetPinAlternateFunction+0x138>)
 8000e2a:	430b      	orrs	r3, r1
 8000e2c:	6013      	str	r3, [r2, #0]
	      break;
 8000e2e:	e06b      	b.n	8000f08 <GPIO_voidSetPinAlternateFunction+0x12c>
            	 MODIFY_REG(GPIOA_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <GPIO_voidSetPinAlternateFunction+0x13c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	79ba      	ldrb	r2, [r7, #6]
 8000e36:	3a08      	subs	r2, #8
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e40:	43d2      	mvns	r2, r2
 8000e42:	4013      	ands	r3, r2
 8000e44:	7979      	ldrb	r1, [r7, #5]
 8000e46:	79ba      	ldrb	r2, [r7, #6]
 8000e48:	3a08      	subs	r2, #8
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	4611      	mov	r1, r2
 8000e52:	4a31      	ldr	r2, [pc, #196]	; (8000f18 <GPIO_voidSetPinAlternateFunction+0x13c>)
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6013      	str	r3, [r2, #0]
	      break;
 8000e58:	e056      	b.n	8000f08 <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	d812      	bhi.n	8000e86 <GPIO_voidSetPinAlternateFunction+0xaa>
	    		MODIFY_REG(GPIOB_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 8000e60:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <GPIO_voidSetPinAlternateFunction+0x140>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	79ba      	ldrb	r2, [r7, #6]
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	210f      	movs	r1, #15
 8000e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6e:	43d2      	mvns	r2, r2
 8000e70:	4013      	ands	r3, r2
 8000e72:	7979      	ldrb	r1, [r7, #5]
 8000e74:	79ba      	ldrb	r2, [r7, #6]
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <GPIO_voidSetPinAlternateFunction+0x140>)
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6013      	str	r3, [r2, #0]
	      break;
 8000e84:	e040      	b.n	8000f08 <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOB_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <GPIO_voidSetPinAlternateFunction+0x144>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	79ba      	ldrb	r2, [r7, #6]
 8000e8c:	3a08      	subs	r2, #8
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	210f      	movs	r1, #15
 8000e92:	fa01 f202 	lsl.w	r2, r1, r2
 8000e96:	43d2      	mvns	r2, r2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	7979      	ldrb	r1, [r7, #5]
 8000e9c:	79ba      	ldrb	r2, [r7, #6]
 8000e9e:	3a08      	subs	r2, #8
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <GPIO_voidSetPinAlternateFunction+0x144>)
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	6013      	str	r3, [r2, #0]
	      break;
 8000eae:	e02b      	b.n	8000f08 <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b07      	cmp	r3, #7
 8000eb4:	d812      	bhi.n	8000edc <GPIO_voidSetPinAlternateFunction+0x100>
	    		MODIFY_REG(GPIOC_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <GPIO_voidSetPinAlternateFunction+0x148>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	79ba      	ldrb	r2, [r7, #6]
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	43d2      	mvns	r2, r2
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	7979      	ldrb	r1, [r7, #5]
 8000eca:	79ba      	ldrb	r2, [r7, #6]
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <GPIO_voidSetPinAlternateFunction+0x148>)
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	6013      	str	r3, [r2, #0]
	      break;
 8000eda:	e015      	b.n	8000f08 <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <GPIO_voidSetPinAlternateFunction+0x14c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	79ba      	ldrb	r2, [r7, #6]
 8000ee2:	3a08      	subs	r2, #8
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	43d2      	mvns	r2, r2
 8000eee:	4013      	ands	r3, r2
 8000ef0:	7979      	ldrb	r1, [r7, #5]
 8000ef2:	79ba      	ldrb	r2, [r7, #6]
 8000ef4:	3a08      	subs	r2, #8
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4611      	mov	r1, r2
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <GPIO_voidSetPinAlternateFunction+0x14c>)
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6013      	str	r3, [r2, #0]
	      break;
 8000f04:	e000      	b.n	8000f08 <GPIO_voidSetPinAlternateFunction+0x12c>
	      break;
 8000f06:	bf00      	nop
	  }
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	40020020 	.word	0x40020020
 8000f18:	40020024 	.word	0x40020024
 8000f1c:	40020420 	.word	0x40020420
 8000f20:	40020424 	.word	0x40020424
 8000f24:	40020820 	.word	0x40020820
 8000f28:	40020824 	.word	0x40020824

08000f2c <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 8000f30:	f000 f8bc 	bl	80010ac <MSCB_voidSetPriorityGrouping>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <RCC_void_HSI_Init>:
static void RCC_void_APB2Prescaler_Init(void);
/************************************************/

/******* Local Functions Implementation ********/
static void RCC_void_HSI_Init(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Enable HSI
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <RCC_void_HSI_Init+0x58>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <RCC_void_HSI_Init+0x58>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE  
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <RCC_void_HSI_Init+0x58>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <RCC_void_HSI_Init+0x58>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <RCC_void_HSI_Init+0x58>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <RCC_void_HSI_Init+0x58>)
 8000f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f5e:	6013      	str	r3, [r2, #0]
    // Polling (Busy Wait)
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
 8000f60:	bf00      	nop
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <RCC_void_HSI_Init+0x58>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f9      	beq.n	8000f62 <RCC_void_HSI_Init+0x2a>
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <RCC_void_HSI_Init+0x5c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <RCC_void_HSI_Init+0x5c>)
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <RCC_void_HSI_Init+0x5c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <RCC_void_HSI_Init+0x5c>)
 8000f80:	f023 0302 	bic.w	r3, r3, #2
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40023808 	.word	0x40023808

08000f98 <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_1;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_2
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fa6:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_2;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb2:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023808 	.word	0x40023808

08000fc4 <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <RCC_void_APB1Prescaler_Init+0x24>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <RCC_void_APB1Prescaler_Init+0x24>)
 8000fce:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000fd2:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <RCC_void_APB1Prescaler_Init+0x24>)
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <RCC_void_APB1Prescaler_Init+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023808 	.word	0x40023808

08000fec <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <RCC_void_APB2Prescaler_Init+0x24>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <RCC_void_APB2Prescaler_Init+0x24>)
 8000ff6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ffa:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <RCC_void_APB2Prescaler_Init+0x24>)
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <RCC_void_APB2Prescaler_Init+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023808 	.word	0x40023808

08001014 <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
 8001018:	f7ff ff8e 	bl	8000f38 <RCC_void_HSI_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 800101c:	f7ff ffbc 	bl	8000f98 <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 8001020:	f7ff ffd0 	bl	8000fc4 <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 8001024:	f7ff ffe2 	bl	8000fec <RCC_void_APB2Prescaler_Init>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d01c      	beq.n	800107c <RCC_voidEnablePeripheralClock+0x50>
 8001042:	2b02      	cmp	r3, #2
 8001044:	dc25      	bgt.n	8001092 <RCC_voidEnablePeripheralClock+0x66>
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <RCC_voidEnablePeripheralClock+0x24>
 800104a:	2b01      	cmp	r3, #1
 800104c:	d00b      	beq.n	8001066 <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 800104e:	e020      	b.n	8001092 <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <RCC_voidEnablePeripheralClock+0x74>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	79ba      	ldrb	r2, [r7, #6]
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4611      	mov	r1, r2
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <RCC_voidEnablePeripheralClock+0x74>)
 8001060:	430b      	orrs	r3, r1
 8001062:	6013      	str	r3, [r2, #0]
        break;
 8001064:	e016      	b.n	8001094 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <RCC_voidEnablePeripheralClock+0x78>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	79ba      	ldrb	r2, [r7, #6]
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f202 	lsl.w	r2, r1, r2
 8001072:	4611      	mov	r1, r2
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <RCC_voidEnablePeripheralClock+0x78>)
 8001076:	430b      	orrs	r3, r1
 8001078:	6013      	str	r3, [r2, #0]
        break;
 800107a:	e00b      	b.n	8001094 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <RCC_voidEnablePeripheralClock+0x7c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	79ba      	ldrb	r2, [r7, #6]
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	4611      	mov	r1, r2
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <RCC_voidEnablePeripheralClock+0x7c>)
 800108c:	430b      	orrs	r3, r1
 800108e:	6013      	str	r3, [r2, #0]
        break;  
 8001090:	e000      	b.n	8001094 <RCC_voidEnablePeripheralClock+0x68>
        break;
 8001092:	bf00      	nop
    }
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40023830 	.word	0x40023830
 80010a4:	40023840 	.word	0x40023840
 80010a8:	40023844 	.word	0x40023844

080010ac <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 80010b6:	2305      	movs	r3, #5
 80010b8:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MSCB_voidSetPriorityGrouping+0x44>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c6:	4013      	ands	r3, r2
 80010c8:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	021a      	lsls	r2, r3, #8
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010da:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <MSCB_voidSetPriorityGrouping+0x44>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60d3      	str	r3, [r2, #12]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <MSPI_GPIOInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void MSPI_GPIOInit(const SPI_Config_t* SPIConfig)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d04c      	beq.n	800119e <MSPI_GPIOInit+0xaa>
 8001104:	2b02      	cmp	r3, #2
 8001106:	dc7b      	bgt.n	8001200 <MSPI_GPIOInit+0x10c>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <MSPI_GPIOInit+0x1e>
 800110c:	2b01      	cmp	r3, #1
 800110e:	d019      	beq.n	8001144 <MSPI_GPIOInit+0x50>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);

				break;
		}
}
 8001110:	e076      	b.n	8001200 <MSPI_GPIOInit+0x10c>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8001112:	2100      	movs	r1, #0
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff89 	bl	800102c <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_SCK_PIN
 800111a:	2202      	movs	r2, #2
 800111c:	2105      	movs	r1, #5
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fe02 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN5,SPI1_SCK_AF);
 8001124:	2205      	movs	r2, #5
 8001126:	2105      	movs	r1, #5
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fe57 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN7, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_MOSI_PIN
 800112e:	2202      	movs	r2, #2
 8001130:	2107      	movs	r1, #7
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fdf8 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN7,SPI1_MOSI_AF);
 8001138:	2205      	movs	r2, #5
 800113a:	2107      	movs	r1, #7
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fe4d 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				break;
 8001142:	e05d      	b.n	8001200 <MSPI_GPIOInit+0x10c>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8001144:	2101      	movs	r1, #1
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff ff70 	bl	800102c <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SP2_SCK_PIN
 800114c:	2202      	movs	r2, #2
 800114e:	210a      	movs	r1, #10
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff fde9 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN10, SPI2_SCK_AF);
 8001156:	2205      	movs	r2, #5
 8001158:	210a      	movs	r1, #10
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fe3e 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN12, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI2_NSS_PIN
 8001160:	2202      	movs	r2, #2
 8001162:	210c      	movs	r1, #12
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff fddf 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN12, SPI2_NSS_AF);
 800116a:	2205      	movs	r2, #5
 800116c:	210c      	movs	r1, #12
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff fe34 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN14, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI2_MISO_PIN
 8001174:	2202      	movs	r2, #2
 8001176:	210e      	movs	r1, #14
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff fdd5 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN14, SPI2_MISO_AF);
 800117e:	2205      	movs	r2, #5
 8001180:	210e      	movs	r1, #14
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff fe2a 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN15, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI2_MOSI_PIN
 8001188:	2202      	movs	r2, #2
 800118a:	210f      	movs	r1, #15
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff fdcb 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN15, SPI2_MOSI_AF);
 8001192:	2205      	movs	r2, #5
 8001194:	210f      	movs	r1, #15
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff fe20 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				break;
 800119c:	e030      	b.n	8001200 <MSPI_GPIOInit+0x10c>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 800119e:	2100      	movs	r1, #0
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff43 	bl	800102c <RCC_voidEnablePeripheralClock>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80011a6:	2101      	movs	r1, #1
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff ff3f 	bl	800102c <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN10, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI3_NSS_PIN
 80011ae:	2202      	movs	r2, #2
 80011b0:	210a      	movs	r1, #10
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fdb8 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA, GPIO_PIN10, SPI3_NSS_AF);
 80011b8:	2206      	movs	r2, #6
 80011ba:	210a      	movs	r1, #10
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fe0d 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN3, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_SCK_PIN
 80011c2:	2202      	movs	r2, #2
 80011c4:	2103      	movs	r1, #3
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff fdae 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN3, SPI3_SCK_AF);
 80011cc:	2206      	movs	r2, #6
 80011ce:	2103      	movs	r1, #3
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff fe03 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN4, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MISO_PIN
 80011d6:	2202      	movs	r2, #2
 80011d8:	2104      	movs	r1, #4
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff fda4 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN4, SPI3_MISO_AF);
 80011e0:	2206      	movs	r2, #6
 80011e2:	2104      	movs	r1, #4
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff fdf9 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
 80011ea:	2202      	movs	r2, #2
 80011ec:	2105      	movs	r1, #5
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff fd9a 	bl	8000d28 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);
 80011f4:	2206      	movs	r2, #6
 80011f6:	2105      	movs	r1, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff fdef 	bl	8000ddc <GPIO_voidSetPinAlternateFunction>
				break;
 80011fe:	bf00      	nop
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <SPI_Timeout_Handler>:
						break;
				}
	}
#endif
static void SPI_Timeout_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	SPI_Timeout_Flag=SPI_TIMEOUT;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <SPI_Timeout_Handler+0x14>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000100 	.word	0x20000100

08001220 <MSPIx_voidClockEnable>:


static void MSPIx_voidClockEnable(const SPI_Config_t* SPIConfig){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d010      	beq.n	8001252 <MSPIx_voidClockEnable+0x32>
 8001230:	2b02      	cmp	r3, #2
 8001232:	dc13      	bgt.n	800125c <MSPIx_voidClockEnable+0x3c>
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <MSPIx_voidClockEnable+0x1e>
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <MSPIx_voidClockEnable+0x28>
		break;
	case SPI3_INSTANCE:
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
		break;
	}
}
 800123c:	e00e      	b.n	800125c <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB2,RCC_APB2_SPI1EN);
 800123e:	210c      	movs	r1, #12
 8001240:	2002      	movs	r0, #2
 8001242:	f7ff fef3 	bl	800102c <RCC_voidEnablePeripheralClock>
		break;
 8001246:	e009      	b.n	800125c <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI2EN);
 8001248:	210e      	movs	r1, #14
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff feee 	bl	800102c <RCC_voidEnablePeripheralClock>
		break;
 8001250:	e004      	b.n	800125c <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
 8001252:	210f      	movs	r1, #15
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff fee9 	bl	800102c <RCC_voidEnablePeripheralClock>
		break;
 800125a:	bf00      	nop
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <MSPI_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MSPI_voidInit(const SPI_Config_t* SPIConfig)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	MSPI_GPIOInit(SPIConfig);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff41 	bl	80010f4 <MSPI_GPIOInit>
	MSPIx_voidClockEnable(SPIConfig);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffd4 	bl	8001220 <MSPIx_voidClockEnable>
#if (SPI1_TX_INT_ENABLE || SPI2_TX_INT_ENABLE || SPI3_TX_INT_ENABLE ) ||(SPI1_RX_INT_ENABLE || SPI2_RX_INT_ENABLE || SPI3_RX_INT_ENABLE)==(INTERRUPT_ENABLED)
	MSPI_InterruptInit(SPIConfig);
#endif
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	785a      	ldrb	r2, [r3, #1]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	789b      	ldrb	r3, [r3, #2]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 8001280:	4313      	orrs	r3, r2
 8001282:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	78db      	ldrb	r3, [r3, #3]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 8001288:	4313      	orrs	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	4313      	orrs	r3, r2
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	795b      	ldrb	r3, [r3, #5]
 8001298:	4313      	orrs	r3, r2
 800129a:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MSPI_voidInit+0x70>)
 80012a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012a8:	601a      	str	r2, [r3, #0]
	//SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2,SSOE_BIT_POS);
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR1, SPI_EN_BIT_POS);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MSPI_voidInit+0x70>)
 80012b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <MSPI_voidInit+0x70>)
 80012c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012c8:	601a      	str	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000058 	.word	0x20000058

080012d8 <MSPI_TransmitByte>:
						}
}
#endif

Std_ReturnType MSPI_TransmitByte(SPI_Config_t* SPIConfig , u8 Copy_u8Data , u32 Copy_u32Timeout)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	460b      	mov	r3, r1
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	72fb      	strb	r3, [r7, #11]
	Std_ReturnType Local_u8ErrorState = STD_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]
    u8 Local_u8DummyReceieve = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75bb      	strb	r3, [r7, #22]
    MSysTick_void_ASYNC_Delay_ms(Copy_u32Timeout, SPI_Timeout_Handler);
 80012ee:	491b      	ldr	r1, [pc, #108]	; (800135c <MSPI_TransmitByte+0x84>)
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f89d 	bl	8001430 <MSysTick_void_ASYNC_Delay_ms>
	SPIx[SPIConfig->SPI_Instance]->DR = Copy_u8Data;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MSPI_TransmitByte+0x88>)
 80012fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001302:	7afa      	ldrb	r2, [r7, #11]
 8001304:	60da      	str	r2, [r3, #12]
	while((GET_BIT(SPIx[SPIConfig->SPI_Instance]->SR,SPI_BSY_BIT_POS) == SPI_BUSY) && (SPI_Timeout_Flag != SPI_TIMEOUT));
 8001306:	bf00      	nop
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MSPI_TransmitByte+0x88>)
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	09db      	lsrs	r3, r3, #7
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d103      	bne.n	8001328 <MSPI_TransmitByte+0x50>
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MSPI_TransmitByte+0x8c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d1ef      	bne.n	8001308 <MSPI_TransmitByte+0x30>
	if(SPI_Timeout_Flag == SPI_TIMEOUT)
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MSPI_TransmitByte+0x8c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <MSPI_TransmitByte+0x64>
	{
		Local_u8ErrorState = STD_TIMEOUT;
 8001330:	2302      	movs	r3, #2
 8001332:	75fb      	strb	r3, [r7, #23]
		SPI_Timeout_Flag = SPI_NO_TIMEOUT;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MSPI_TransmitByte+0x8c>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e009      	b.n	8001350 <MSPI_TransmitByte+0x78>
	}
	else
	{
		MSysTick_voidDeInit();
 800133c:	f000 f846 	bl	80013cc <MSysTick_voidDeInit>
		Local_u8DummyReceieve = SPIx[SPIConfig->SPI_Instance]->DR;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MSPI_TransmitByte+0x88>)
 8001348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	75bb      	strb	r3, [r7, #22]
	}
	return Local_u8ErrorState;
 8001350:	7dfb      	ldrb	r3, [r7, #23]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	08001209 	.word	0x08001209
 8001360:	20000058 	.word	0x20000058
 8001364:	20000100 	.word	0x20000100

08001368 <SPI1_IRQHandler>:
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, TXDMAEN_BIT_POS);
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, RXDMAEN_BIT_POS);
}
/*************************************************************SPI IRQ HANDLERS******************************************************************/
void SPI1_IRQHandler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
		{
			SPI1_RX_INT_Callback();
		}
	}
#endif
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
		{
			SPI2_RX_INT_Callback();
		}
	}
#endif
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
		{
			SPI3_RX_INT_Callback();
		}
	}
#endif
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
#elif (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8)
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MSysTick_voidInit+0x34>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <MSysTick_voidInit+0x34>)
 800139e:	f023 0304 	bic.w	r3, r3, #4
 80013a2:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MSysTick_voidInit+0x34>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <MSysTick_voidInit+0x34>)
 80013aa:	f023 0302 	bic.w	r3, r3, #2
 80013ae:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <MSysTick_voidInit+0x34>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <MSysTick_voidInit+0x34>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MSysTick_voidDeInit+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <MSysTick_voidDeInit+0x34>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MSysTick_voidDeInit+0x34>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MSysTick_voidDeInit+0x34>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <MSysTick_voidDeInit+0x34>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <MSysTick_voidDeInit+0x34>)
 80013ee:	f023 0302 	bic.w	r3, r3, #2
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <SysTick_Handler>:
{
	SysTick->LOAD = Copy_u32Ticks;
	SysTick->VAL = 0;
}
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <SysTick_Handler+0x24>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 8001412:	f7ff ffdb 	bl	80013cc <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Handler+0x28>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 800141e:	4b03      	ldr	r3, [pc, #12]	; (800142c <SysTick_Handler+0x28>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4798      	blx	r3
	}
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000108 	.word	0x20000108
 800142c:	20000104 	.word	0x20000104

08001430 <MSysTick_void_ASYNC_Delay_ms>:
	SysTick->LOAD = 0;
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
}
void MSysTick_void_ASYNC_Delay_ms(u32 time_ms,PtrFunction CallBack_Ptr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	u32 Local_ticks = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
	if (CallBack_Ptr != NULL)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d02e      	beq.n	80014a2 <MSysTick_void_ASYNC_Delay_ms+0x72>
		{
			Local_ticks = (u32)(((SYSTICK_AHB_CLK/SYSTICK_CLOCK_SOURCE)/1000.0)*time_ms);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff f931 	bl	80006ac <__aeabi_ui2d>
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MSysTick_void_ASYNC_Delay_ms+0x7c>)
 8001450:	f7fe fec0 	bl	80001d4 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff f9a0 	bl	80007a0 <__aeabi_d2uiz>
 8001460:	4603      	mov	r3, r0
 8001462:	60fb      	str	r3, [r7, #12]
			if(Local_ticks>SysTick_LOAD_RELOAD_Msk)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146a:	d302      	bcc.n	8001472 <MSysTick_void_ASYNC_Delay_ms+0x42>
			{
				Local_ticks = SysTick_LOAD_RELOAD_Msk;
 800146c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001470:	60fb      	str	r3, [r7, #12]
			}
		  /* Set Reload Register to SysTick Ticks */
		  	SysTick->LOAD = Local_ticks;
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6053      	str	r3, [r2, #4]
		  	SysTick->VAL = 0;
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
			/* Copy The User CallBack to Local ptrFunction */
			SysTick_CallBack = CallBack_Ptr;
 800147e:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <MSysTick_void_ASYNC_Delay_ms+0x84>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6013      	str	r3, [r2, #0]
			/* Set The SysTick Timer to Single Interval Mode */
			SysTick_Mode = SysTick_SingleInterval_Mode;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MSysTick_void_ASYNC_Delay_ms+0x88>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
			/*Enable SysTick IRQ */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6013      	str	r3, [r2, #0]
			/* Enable SysTick Counter */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6013      	str	r3, [r2, #0]
		}
		else { /* Nothing */}
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	408f4000 	.word	0x408f4000
 80014b0:	e000e010 	.word	0xe000e010
 80014b4:	20000104 	.word	0x20000104
 80014b8:	20000108 	.word	0x20000108

080014bc <main>:

// ----------------------------------------------------------------------------
u32 counter;

int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

	MSPI_voidInit(&SPI1_Config);
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <main+0x2c>)
 80014c4:	f7ff fece 	bl	8001264 <MSPI_voidInit>


	while(1)
	{
		MSPI_TransmitByte(&SPI1_Config,'M', 1000);
 80014c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014cc:	214d      	movs	r1, #77	; 0x4d
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <main+0x2c>)
 80014d0:	f7ff ff02 	bl	80012d8 <MSPI_TransmitByte>
		Delay_ms(1000);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <main+0x30>)
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	e002      	b.n	80014e0 <main+0x24>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3b01      	subs	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <main+0x1e>
		MSPI_TransmitByte(&SPI1_Config,'M', 1000);
 80014e6:	e7ef      	b.n	80014c8 <main+0xc>
 80014e8:	20000000 	.word	0x20000000
 80014ec:	000c3500 	.word	0x000c3500

080014f0 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	RCC_voidInit();
 80014f4:	f7ff fd8e 	bl	8001014 <RCC_voidInit>
	MSysTick_voidInit();
 80014f8:	f7ff ff4c 	bl	8001394 <MSysTick_voidInit>
	MNVIC_voidInit();
 80014fc:	f7ff fd16 	bl	8000f2c <MNVIC_voidInit>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001506:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001508:	f7ff fff2 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <LoopForever+0x6>)
  ldr r1, =_edata
 800150e:	490d      	ldr	r1, [pc, #52]	; (8001544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <LoopForever+0xe>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001524:	4c0a      	ldr	r4, [pc, #40]	; (8001550 <LoopForever+0x16>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001532:	f000 f811 	bl	8001558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001536:	f7ff ffc1 	bl	80014bc <main>

0800153a <LoopForever>:

LoopForever:
  b LoopForever
 800153a:	e7fe      	b.n	800153a <LoopForever>
  ldr   r0, =_estack
 800153c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001548:	080015c0 	.word	0x080015c0
  ldr r2, =_sbss
 800154c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001550:	2000010c 	.word	0x2000010c

08001554 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC_IRQHandler>
	...

08001558 <__libc_init_array>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	4d0d      	ldr	r5, [pc, #52]	; (8001590 <__libc_init_array+0x38>)
 800155c:	4c0d      	ldr	r4, [pc, #52]	; (8001594 <__libc_init_array+0x3c>)
 800155e:	1b64      	subs	r4, r4, r5
 8001560:	10a4      	asrs	r4, r4, #2
 8001562:	2600      	movs	r6, #0
 8001564:	42a6      	cmp	r6, r4
 8001566:	d109      	bne.n	800157c <__libc_init_array+0x24>
 8001568:	4d0b      	ldr	r5, [pc, #44]	; (8001598 <__libc_init_array+0x40>)
 800156a:	4c0c      	ldr	r4, [pc, #48]	; (800159c <__libc_init_array+0x44>)
 800156c:	f000 f818 	bl	80015a0 <_init>
 8001570:	1b64      	subs	r4, r4, r5
 8001572:	10a4      	asrs	r4, r4, #2
 8001574:	2600      	movs	r6, #0
 8001576:	42a6      	cmp	r6, r4
 8001578:	d105      	bne.n	8001586 <__libc_init_array+0x2e>
 800157a:	bd70      	pop	{r4, r5, r6, pc}
 800157c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001580:	4798      	blx	r3
 8001582:	3601      	adds	r6, #1
 8001584:	e7ee      	b.n	8001564 <__libc_init_array+0xc>
 8001586:	f855 3b04 	ldr.w	r3, [r5], #4
 800158a:	4798      	blx	r3
 800158c:	3601      	adds	r6, #1
 800158e:	e7f2      	b.n	8001576 <__libc_init_array+0x1e>
 8001590:	080015b8 	.word	0x080015b8
 8001594:	080015b8 	.word	0x080015b8
 8001598:	080015b8 	.word	0x080015b8
 800159c:	080015bc 	.word	0x080015bc

080015a0 <_init>:
 80015a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a2:	bf00      	nop
 80015a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a6:	bc08      	pop	{r3}
 80015a8:	469e      	mov	lr, r3
 80015aa:	4770      	bx	lr

080015ac <_fini>:
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	bf00      	nop
 80015b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b2:	bc08      	pop	{r3}
 80015b4:	469e      	mov	lr, r3
 80015b6:	4770      	bx	lr
