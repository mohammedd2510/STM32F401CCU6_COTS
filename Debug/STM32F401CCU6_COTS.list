
STM32F401CCU6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fbc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001150  08001150  00029aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001150  08001150  00029aa4  2**0
                  CONTENTS
  4 .ARM          00000000  08001150  08001150  00029aa4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001150  08001150  00029aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001150  08001150  00011150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001154  08001154  00011154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00009aa4  20000000  08001158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20009aa4  0800abfc  00029aa4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009b14  0800abfc  00029b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00029aa4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00029ad4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000023bf  00000000  00000000  00029b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000cab  00000000  00000000  0002bed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003a0  00000000  00000000  0002cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000b40  00000000  00000000  0002cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f8f  00000000  00000000  0002da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006f6a  00000000  00000000  0002f9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000271  00000000  00000000  00036961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b70  00000000  00000000  00036bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00037744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20009aa4 	.word	0x20009aa4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001138 	.word	0x08001138

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20009aa8 	.word	0x20009aa8
 80001d0:	08001138 	.word	0x08001138

080001d4 <IR_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void IR_voidInit (IR_Config_t *Copy_IR_Config , pCallBackNotification IR_CallbackNotification)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	MEXTI_CONFIG_t IR_EXTI_Config;
	IR_EXTI_Config.MEXTI_Mode = MEXTI_INTERRUPT_MODE;
 80001de:	2300      	movs	r3, #0
 80001e0:	73fb      	strb	r3, [r7, #15]
	IR_EXTI_Config.MEXTI_SenseSignal = Copy_IR_Config->IR_Trigger_Mode;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	73bb      	strb	r3, [r7, #14]
	IR_EXTI_Config.MEXTI_Line = Copy_IR_Config->IR_Pin;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	785b      	ldrb	r3, [r3, #1]
 80001ec:	737b      	strb	r3, [r7, #13]
    IR_EXTI_Config.MEXTI_Port = Copy_IR_Config->IR_Port;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	733b      	strb	r3, [r7, #12]
	MEXTI_voidInit(&IR_EXTI_Config,IR_EXTI_Handler);
 80001f4:	f107 030c 	add.w	r3, r7, #12
 80001f8:	491a      	ldr	r1, [pc, #104]	; (8000264 <IR_voidInit+0x90>)
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 f982 	bl	8000504 <MEXTI_voidInit>
	switch (Copy_IR_Config->IR_Port)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b02      	cmp	r3, #2
 8000206:	d010      	beq.n	800022a <IR_voidInit+0x56>
 8000208:	2b02      	cmp	r3, #2
 800020a:	dc13      	bgt.n	8000234 <IR_voidInit+0x60>
 800020c:	2b00      	cmp	r3, #0
 800020e:	d002      	beq.n	8000216 <IR_voidInit+0x42>
 8000210:	2b01      	cmp	r3, #1
 8000212:	d005      	beq.n	8000220 <IR_voidInit+0x4c>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 8000214:	e00e      	b.n	8000234 <IR_voidInit+0x60>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8000216:	2100      	movs	r1, #0
 8000218:	2000      	movs	r0, #0
 800021a:	f000 fe23 	bl	8000e64 <RCC_voidEnablePeripheralClock>
	      break;
 800021e:	e00a      	b.n	8000236 <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8000220:	2101      	movs	r1, #1
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fe1e 	bl	8000e64 <RCC_voidEnablePeripheralClock>
	      break;
 8000228:	e005      	b.n	8000236 <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 800022a:	2102      	movs	r1, #2
 800022c:	2000      	movs	r0, #0
 800022e:	f000 fe19 	bl	8000e64 <RCC_voidEnablePeripheralClock>
	      break;
 8000232:	e000      	b.n	8000236 <IR_voidInit+0x62>
	      break;
 8000234:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_MODE);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	7818      	ldrb	r0, [r3, #0]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	785b      	ldrb	r3, [r3, #1]
 800023e:	2200      	movs	r2, #0
 8000240:	4619      	mov	r1, r3
 8000242:	f000 fbb1 	bl	80009a8 <GPIO_voidSetPinMode>
	  GPIO_voidSetPinPullUpDownResistor(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_FLOAT);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	7818      	ldrb	r0, [r3, #0]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	785b      	ldrb	r3, [r3, #1]
 800024e:	2200      	movs	r2, #0
 8000250:	4619      	mov	r1, r3
 8000252:	f000 fd0f 	bl	8000c74 <GPIO_voidSetPinPullUpDownResistor>
	  IR_callback = IR_CallbackNotification;
 8000256:	4a04      	ldr	r2, [pc, #16]	; (8000268 <IR_voidInit+0x94>)
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	08000285 	.word	0x08000285
 8000268:	20009ac0 	.word	0x20009ac0

0800026c <IR_u32GetReceivedData>:
	}
	return Local_IR_ReceivedFlag;
}

u32  IR_u32GetReceivedData(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	return IR_ReceivedData;
 8000270:	4b03      	ldr	r3, [pc, #12]	; (8000280 <IR_u32GetReceivedData+0x14>)
 8000272:	681b      	ldr	r3, [r3, #0]
}
 8000274:	4618      	mov	r0, r3
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20009ac4 	.word	0x20009ac4

08000284 <IR_EXTI_Handler>:

static void IR_EXTI_Handler()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	static u8 IR_Status_Flag = IR_START_SIGNAL_STARTED;
	static s8 IR_BitCounter = IR_BIT_COUNT_INIT;
	u32 IR_ElapsedTime = ZERO_INIT;
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]
	if(IR_Status_Flag == IR_START_SIGNAL_STARTED)
 800028e:	4b49      	ldr	r3, [pc, #292]	; (80003b4 <IR_EXTI_Handler+0x130>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d107      	bne.n	80002a6 <IR_EXTI_Handler+0x22>
	{
		IR_Status_Flag = IR_START_SIGNAL_ENDED;
 8000296:	4b47      	ldr	r3, [pc, #284]	; (80003b4 <IR_EXTI_Handler+0x130>)
 8000298:	2201      	movs	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]
		MSystick_voidSetPreloadvalue(IR_START_SIGNAL_RANGE_HIGH);
 800029c:	f643 2098 	movw	r0, #15000	; 0x3a98
 80002a0:	f000 fea0 	bl	8000fe4 <MSystick_voidSetPreloadvalue>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
		}

	}

}
 80002a4:	e081      	b.n	80003aa <IR_EXTI_Handler+0x126>
	else if (IR_Status_Flag == IR_START_SIGNAL_ENDED)
 80002a6:	4b43      	ldr	r3, [pc, #268]	; (80003b4 <IR_EXTI_Handler+0x130>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d120      	bne.n	80002f0 <IR_EXTI_Handler+0x6c>
		IR_ElapsedTime = MSysTick_u32GetElapsedTime_us();
 80002ae:	f000 fe75 	bl	8000f9c <MSysTick_u32GetElapsedTime_us>
 80002b2:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_START_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_START_SIGNAL_RANGE_HIGH)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f243 22c7 	movw	r2, #12999	; 0x32c7
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d908      	bls.n	80002d0 <IR_EXTI_Handler+0x4c>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d803      	bhi.n	80002d0 <IR_EXTI_Handler+0x4c>
			IR_Status_Flag = IR_GETTING_DATA;
 80002c8:	4b3a      	ldr	r3, [pc, #232]	; (80003b4 <IR_EXTI_Handler+0x130>)
 80002ca:	2202      	movs	r2, #2
 80002cc:	701a      	strb	r2, [r3, #0]
 80002ce:	e00c      	b.n	80002ea <IR_EXTI_Handler+0x66>
		else if(IR_ElapsedTime >=IR_REPEAT_SIGNAL_RANGE_LOW  && IR_ElapsedTime <= IR_REPEAT_SIGNAL_RANGE_HIGH){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f642 22f7 	movw	r2, #10999	; 0x2af7
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d907      	bls.n	80002ea <IR_EXTI_Handler+0x66>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d802      	bhi.n	80002ea <IR_EXTI_Handler+0x66>
			IR_callback();
 80002e4:	4b34      	ldr	r3, [pc, #208]	; (80003b8 <IR_EXTI_Handler+0x134>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4798      	blx	r3
		MSystick_voidResetTimer();
 80002ea:	f000 fe6f 	bl	8000fcc <MSystick_voidResetTimer>
}
 80002ee:	e05c      	b.n	80003aa <IR_EXTI_Handler+0x126>
	else if (IR_Status_Flag == IR_GETTING_DATA)
 80002f0:	4b30      	ldr	r3, [pc, #192]	; (80003b4 <IR_EXTI_Handler+0x130>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d143      	bne.n	8000380 <IR_EXTI_Handler+0xfc>
		IR_ElapsedTime = MSysTick_u32GetElapsedTime_us();
 80002f8:	f000 fe50 	bl	8000f9c <MSysTick_u32GetElapsedTime_us>
 80002fc:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_LOW_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_LOW_LEVEL_SIGNAL_RANGE_HIGH)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000304:	d312      	bcc.n	800032c <IR_EXTI_Handler+0xa8>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800030c:	4293      	cmp	r3, r2
 800030e:	d80d      	bhi.n	800032c <IR_EXTI_Handler+0xa8>
			CLR_BIT(IR_ReceivedData,IR_BitCounter);
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <IR_EXTI_Handler+0x138>)
 8000312:	f993 3000 	ldrsb.w	r3, [r3]
 8000316:	461a      	mov	r2, r3
 8000318:	2301      	movs	r3, #1
 800031a:	4093      	lsls	r3, r2
 800031c:	43db      	mvns	r3, r3
 800031e:	461a      	mov	r2, r3
 8000320:	4b27      	ldr	r3, [pc, #156]	; (80003c0 <IR_EXTI_Handler+0x13c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4013      	ands	r3, r2
 8000326:	4a26      	ldr	r2, [pc, #152]	; (80003c0 <IR_EXTI_Handler+0x13c>)
 8000328:	6013      	str	r3, [r2, #0]
 800032a:	e014      	b.n	8000356 <IR_EXTI_Handler+0xd2>
		else if (IR_ElapsedTime >= IR_HIGH_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_HIGH_LEVEL_SIGNAL_RANGE_HIGH)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000332:	d310      	bcc.n	8000356 <IR_EXTI_Handler+0xd2>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800033a:	4293      	cmp	r3, r2
 800033c:	d80b      	bhi.n	8000356 <IR_EXTI_Handler+0xd2>
			SET_BIT(IR_ReceivedData,IR_BitCounter);
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <IR_EXTI_Handler+0x138>)
 8000340:	f993 3000 	ldrsb.w	r3, [r3]
 8000344:	461a      	mov	r2, r3
 8000346:	2301      	movs	r3, #1
 8000348:	4093      	lsls	r3, r2
 800034a:	461a      	mov	r2, r3
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <IR_EXTI_Handler+0x13c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4313      	orrs	r3, r2
 8000352:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <IR_EXTI_Handler+0x13c>)
 8000354:	6013      	str	r3, [r2, #0]
		IR_BitCounter--;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <IR_EXTI_Handler+0x138>)
 8000358:	f993 3000 	ldrsb.w	r3, [r3]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	3b01      	subs	r3, #1
 8000360:	b2db      	uxtb	r3, r3
 8000362:	b25a      	sxtb	r2, r3
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <IR_EXTI_Handler+0x138>)
 8000366:	701a      	strb	r2, [r3, #0]
		if(IR_BitCounter == IR_BIT_COUNT_END) IR_Status_Flag = IR_END_OF_FRAME_DETECTED;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <IR_EXTI_Handler+0x138>)
 800036a:	f993 3000 	ldrsb.w	r3, [r3]
 800036e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000372:	d102      	bne.n	800037a <IR_EXTI_Handler+0xf6>
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <IR_EXTI_Handler+0x130>)
 8000376:	2205      	movs	r2, #5
 8000378:	701a      	strb	r2, [r3, #0]
		MSystick_voidResetTimer();
 800037a:	f000 fe27 	bl	8000fcc <MSystick_voidResetTimer>
}
 800037e:	e014      	b.n	80003aa <IR_EXTI_Handler+0x126>
	else if(IR_Status_Flag == IR_END_OF_FRAME_DETECTED)
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <IR_EXTI_Handler+0x130>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b05      	cmp	r3, #5
 8000386:	d110      	bne.n	80003aa <IR_EXTI_Handler+0x126>
		IR_BitCounter = IR_BIT_COUNT_INIT;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <IR_EXTI_Handler+0x138>)
 800038a:	221f      	movs	r2, #31
 800038c:	701a      	strb	r2, [r3, #0]
		IR_Status_Flag =  IR_START_SIGNAL_STARTED;
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <IR_EXTI_Handler+0x130>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]
		if(IR_callback != NULL){
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <IR_EXTI_Handler+0x134>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d003      	beq.n	80003a4 <IR_EXTI_Handler+0x120>
			IR_callback();
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <IR_EXTI_Handler+0x134>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4798      	blx	r3
}
 80003a2:	e002      	b.n	80003aa <IR_EXTI_Handler+0x126>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <IR_EXTI_Handler+0x140>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20009ac9 	.word	0x20009ac9
 80003b8:	20009ac0 	.word	0x20009ac0
 80003bc:	20000003 	.word	0x20000003
 80003c0:	20009ac4 	.word	0x20009ac4
 80003c4:	20009ac8 	.word	0x20009ac8

080003c8 <R2RDAC_Bit_init>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void R2RDAC_Bit_init(port_index_t R2RDAC_BitPort, pin_index_t R2RDAC_BitPin)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]
	switch (R2RDAC_BitPort)
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d010      	beq.n	8000400 <R2RDAC_Bit_init+0x38>
 80003de:	2b02      	cmp	r3, #2
 80003e0:	dc13      	bgt.n	800040a <R2RDAC_Bit_init+0x42>
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d002      	beq.n	80003ec <R2RDAC_Bit_init+0x24>
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d005      	beq.n	80003f6 <R2RDAC_Bit_init+0x2e>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 80003ea:	e00e      	b.n	800040a <R2RDAC_Bit_init+0x42>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 80003ec:	2100      	movs	r1, #0
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 fd38 	bl	8000e64 <RCC_voidEnablePeripheralClock>
	      break;
 80003f4:	e00a      	b.n	800040c <R2RDAC_Bit_init+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80003f6:	2101      	movs	r1, #1
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 fd33 	bl	8000e64 <RCC_voidEnablePeripheralClock>
	      break;
 80003fe:	e005      	b.n	800040c <R2RDAC_Bit_init+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8000400:	2102      	movs	r1, #2
 8000402:	2000      	movs	r0, #0
 8000404:	f000 fd2e 	bl	8000e64 <RCC_voidEnablePeripheralClock>
	      break;
 8000408:	e000      	b.n	800040c <R2RDAC_Bit_init+0x44>
	      break;
 800040a:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_OUTPUT_PIN_MODE);
 800040c:	79b9      	ldrb	r1, [r7, #6]
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2201      	movs	r2, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fac8 	bl	80009a8 <GPIO_voidSetPinMode>
	  GPIO_voidSetPinOutputMode(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_OUTPUT_PIN_PUSH_PULL);
 8000418:	79b9      	ldrb	r1, [r7, #6]
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	2200      	movs	r2, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fb1c 	bl	8000a5c <GPIO_voidSetPinOutputMode>
	  GPIO_voidSetPinOutputSpeed(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_OUTPUT_PIN_LOW_SPEED);
 8000424:	79b9      	ldrb	r1, [r7, #6]
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2200      	movs	r2, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f000 fb68 	bl	8000b00 <GPIO_voidSetPinOutputSpeed>
	  GPIO_voidSetPinValue(R2RDAC_BitPort,R2RDAC_BitPin,GPIO_LOW);
 8000430:	79b9      	ldrb	r1, [r7, #6]
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2200      	movs	r2, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fbbc 	bl	8000bb4 <GPIO_voidSetPinValue>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <R2RDAC_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void R2RDAC_voidInit(R2RDAC_config_t* R2RDAC_Config)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	u8 	Local_DAC_BitCounter = ZERO_INIT;
 800044c:	2300      	movs	r3, #0
 800044e:	73fb      	strb	r3, [r7, #15]
	for(Local_DAC_BitCounter = ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 8000450:	2300      	movs	r3, #0
 8000452:	73fb      	strb	r3, [r7, #15]
 8000454:	e00c      	b.n	8000470 <R2RDAC_voidInit+0x2c>
	{
		R2RDAC_Bit_init(R2RDAC_Config->R2RDAC_Bit_Port[Local_DAC_BitCounter],R2RDAC_Config->R2RDAC_Bit_Pin[Local_DAC_BitCounter]);
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	4413      	add	r3, r2
 800045c:	7a18      	ldrb	r0, [r3, #8]
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	5cd3      	ldrb	r3, [r2, r3]
 8000464:	4619      	mov	r1, r3
 8000466:	f7ff ffaf 	bl	80003c8 <R2RDAC_Bit_init>
	for(Local_DAC_BitCounter = ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	3301      	adds	r3, #1
 800046e:	73fb      	strb	r3, [r7, #15]
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	2b07      	cmp	r3, #7
 8000474:	d9ef      	bls.n	8000456 <R2RDAC_voidInit+0x12>
	}

}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <R2RDAC_voidSetSignal>:
void R2RDAC_voidSetSignal(R2RDAC_config_t* R2RDAC_Config,u8* Copy_pu8Signal , u32 Copy_u32SignalLength)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
	u32 Local_DAC_Counter = ZERO_INIT;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
	u8 	Local_DAC_BitCounter = ZERO_INIT;
 8000490:	2300      	movs	r3, #0
 8000492:	76fb      	strb	r3, [r7, #27]
	for(Local_DAC_Counter=ZERO_INIT;Local_DAC_Counter<Copy_u32SignalLength;Local_DAC_Counter++)
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
 8000498:	e02a      	b.n	80004f0 <R2RDAC_voidSetSignal+0x70>
	{
		for(Local_DAC_BitCounter=ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 800049a:	2300      	movs	r3, #0
 800049c:	76fb      	strb	r3, [r7, #27]
 800049e:	e018      	b.n	80004d2 <R2RDAC_voidSetSignal+0x52>
			{
				GPIO_voidSetPinValue
 80004a0:	7efb      	ldrb	r3, [r7, #27]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	4413      	add	r3, r2
 80004a6:	7a18      	ldrb	r0, [r3, #8]
 80004a8:	7efb      	ldrb	r3, [r7, #27]
 80004aa:	68fa      	ldr	r2, [r7, #12]
 80004ac:	5cd1      	ldrb	r1, [r2, r3]
				(
					R2RDAC_Config->R2RDAC_Bit_Port[Local_DAC_BitCounter],
					R2RDAC_Config->R2RDAC_Bit_Pin[Local_DAC_BitCounter],
					GET_BIT(Copy_pu8Signal[Local_DAC_Counter],Local_DAC_BitCounter)
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	69fb      	ldr	r3, [r7, #28]
 80004b2:	4413      	add	r3, r2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	461a      	mov	r2, r3
 80004b8:	7efb      	ldrb	r3, [r7, #27]
 80004ba:	fa42 f303 	asr.w	r3, r2, r3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	b2db      	uxtb	r3, r3
				GPIO_voidSetPinValue
 80004c6:	461a      	mov	r2, r3
 80004c8:	f000 fb74 	bl	8000bb4 <GPIO_voidSetPinValue>
		for(Local_DAC_BitCounter=ZERO_INIT;Local_DAC_BitCounter<R2RDAC_RESOLUTION;Local_DAC_BitCounter++)
 80004cc:	7efb      	ldrb	r3, [r7, #27]
 80004ce:	3301      	adds	r3, #1
 80004d0:	76fb      	strb	r3, [r7, #27]
 80004d2:	7efb      	ldrb	r3, [r7, #27]
 80004d4:	2b07      	cmp	r3, #7
 80004d6:	d9e3      	bls.n	80004a0 <R2RDAC_voidSetSignal+0x20>
				);
			}
		Delay_us(35);
 80004d8:	231c      	movs	r3, #28
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	e002      	b.n	80004e4 <R2RDAC_voidSetSignal+0x64>
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d1f9      	bne.n	80004de <R2RDAC_voidSetSignal+0x5e>
	for(Local_DAC_Counter=ZERO_INIT;Local_DAC_Counter<Copy_u32SignalLength;Local_DAC_Counter++)
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	3301      	adds	r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
 80004f0:	69fa      	ldr	r2, [r7, #28]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d3d0      	bcc.n	800049a <R2RDAC_voidSetSignal+0x1a>
	}
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3720      	adds	r7, #32
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <MEXTI_voidInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MEXTI_voidInit(MEXTI_CONFIG_t* Copy_tEXTIConfig ,void (*pCallBackFunction)(void)){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]

	/*Enable EXTI Line mode interrupt or event*/
	switch(Copy_tEXTIConfig->MEXTI_Mode)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	78db      	ldrb	r3, [r3, #3]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <MEXTI_voidInit+0x18>
 8000516:	2b01      	cmp	r3, #1
 8000518:	d00c      	beq.n	8000534 <MEXTI_voidInit+0x30>
			break;
		case MEXTI_EVENT_MODE:
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 800051a:	e017      	b.n	800054c <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->IMR,Copy_tEXTIConfig->MEXTI_Line);
 800051c:	4b7a      	ldr	r3, [pc, #488]	; (8000708 <MEXTI_voidInit+0x204>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	7852      	ldrb	r2, [r2, #1]
 8000524:	4611      	mov	r1, r2
 8000526:	2201      	movs	r2, #1
 8000528:	408a      	lsls	r2, r1
 800052a:	4611      	mov	r1, r2
 800052c:	4a76      	ldr	r2, [pc, #472]	; (8000708 <MEXTI_voidInit+0x204>)
 800052e:	430b      	orrs	r3, r1
 8000530:	6013      	str	r3, [r2, #0]
			break;
 8000532:	e00b      	b.n	800054c <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
 8000534:	4b74      	ldr	r3, [pc, #464]	; (8000708 <MEXTI_voidInit+0x204>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7852      	ldrb	r2, [r2, #1]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	4611      	mov	r1, r2
 8000544:	4a70      	ldr	r2, [pc, #448]	; (8000708 <MEXTI_voidInit+0x204>)
 8000546:	430b      	orrs	r3, r1
 8000548:	6053      	str	r3, [r2, #4]
			break;
 800054a:	bf00      	nop
	}

	/*Set Notification function*/
	EXTI_pNotificationFunction[Copy_tEXTIConfig->MEXTI_Line] = pCallBackFunction;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	785b      	ldrb	r3, [r3, #1]
 8000550:	4619      	mov	r1, r3
 8000552:	4a6e      	ldr	r2, [pc, #440]	; (800070c <MEXTI_voidInit+0x208>)
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*Set Sense Signal mode RISING, FALLING, ONCHANGE */
	switch(Copy_tEXTIConfig->MEXTI_SenseSignal){
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	789b      	ldrb	r3, [r3, #2]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d036      	beq.n	80005d0 <MEXTI_voidInit+0xcc>
 8000562:	2b02      	cmp	r3, #2
 8000564:	dc4b      	bgt.n	80005fe <MEXTI_voidInit+0xfa>
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <MEXTI_voidInit+0x6c>
 800056a:	2b01      	cmp	r3, #1
 800056c:	d018      	beq.n	80005a0 <MEXTI_voidInit+0x9c>
		case MEXTI_ONCHANGE:
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 800056e:	e046      	b.n	80005fe <MEXTI_voidInit+0xfa>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000570:	4b65      	ldr	r3, [pc, #404]	; (8000708 <MEXTI_voidInit+0x204>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7852      	ldrb	r2, [r2, #1]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a61      	ldr	r2, [pc, #388]	; (8000708 <MEXTI_voidInit+0x204>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6093      	str	r3, [r2, #8]
			CLR_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000586:	4b60      	ldr	r3, [pc, #384]	; (8000708 <MEXTI_voidInit+0x204>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7852      	ldrb	r2, [r2, #1]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	43d2      	mvns	r2, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a5b      	ldr	r2, [pc, #364]	; (8000708 <MEXTI_voidInit+0x204>)
 800059a:	400b      	ands	r3, r1
 800059c:	60d3      	str	r3, [r2, #12]
			break;
 800059e:	e02f      	b.n	8000600 <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 80005a0:	4b59      	ldr	r3, [pc, #356]	; (8000708 <MEXTI_voidInit+0x204>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	7852      	ldrb	r2, [r2, #1]
 80005a8:	4611      	mov	r1, r2
 80005aa:	2201      	movs	r2, #1
 80005ac:	408a      	lsls	r2, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a55      	ldr	r2, [pc, #340]	; (8000708 <MEXTI_voidInit+0x204>)
 80005b2:	430b      	orrs	r3, r1
 80005b4:	60d3      	str	r3, [r2, #12]
			CLR_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 80005b6:	4b54      	ldr	r3, [pc, #336]	; (8000708 <MEXTI_voidInit+0x204>)
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7852      	ldrb	r2, [r2, #1]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	43d2      	mvns	r2, r2
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a4f      	ldr	r2, [pc, #316]	; (8000708 <MEXTI_voidInit+0x204>)
 80005ca:	400b      	ands	r3, r1
 80005cc:	6093      	str	r3, [r2, #8]
			break;
 80005ce:	e017      	b.n	8000600 <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 80005d0:	4b4d      	ldr	r3, [pc, #308]	; (8000708 <MEXTI_voidInit+0x204>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7852      	ldrb	r2, [r2, #1]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a49      	ldr	r2, [pc, #292]	; (8000708 <MEXTI_voidInit+0x204>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 80005e6:	4b48      	ldr	r3, [pc, #288]	; (8000708 <MEXTI_voidInit+0x204>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7852      	ldrb	r2, [r2, #1]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a44      	ldr	r2, [pc, #272]	; (8000708 <MEXTI_voidInit+0x204>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]
			break;
 80005fc:	e000      	b.n	8000600 <MEXTI_voidInit+0xfc>
			break;
 80005fe:	bf00      	nop
	}
	/* Enable SYSCFG Peripheral Clock*/
	RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_SYSCFGEN);
 8000600:	210e      	movs	r1, #14
 8000602:	2002      	movs	r0, #2
 8000604:	f000 fc2e 	bl	8000e64 <RCC_voidEnablePeripheralClock>
	/*Set EXTI Port PORTA, PORTB, PORTC*/
	if(Copy_tEXTIConfig->MEXTI_Line < 4 && Copy_tEXTIConfig->MEXTI_Line >= 0)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d80e      	bhi.n	800062e <MEXTI_voidInit+0x12a>
	{
		SYSCFG_EXTICR1 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8000610:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <MEXTI_voidInit+0x20c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	4611      	mov	r1, r2
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7852      	ldrb	r2, [r2, #1]
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4a3a      	ldr	r2, [pc, #232]	; (8000710 <MEXTI_voidInit+0x20c>)
 8000628:	430b      	orrs	r3, r1
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	e043      	b.n	80006b6 <MEXTI_voidInit+0x1b2>

	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 8 && Copy_tEXTIConfig->MEXTI_Line >= 4){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	2b07      	cmp	r3, #7
 8000634:	d812      	bhi.n	800065c <MEXTI_voidInit+0x158>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	2b03      	cmp	r3, #3
 800063c:	d90e      	bls.n	800065c <MEXTI_voidInit+0x158>
		SYSCFG_EXTICR2 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <MEXTI_voidInit+0x210>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	7812      	ldrb	r2, [r2, #0]
 8000646:	4611      	mov	r1, r2
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7852      	ldrb	r2, [r2, #1]
 800064c:	0092      	lsls	r2, r2, #2
 800064e:	fa01 f202 	lsl.w	r2, r1, r2
 8000652:	4611      	mov	r1, r2
 8000654:	4a2f      	ldr	r2, [pc, #188]	; (8000714 <MEXTI_voidInit+0x210>)
 8000656:	430b      	orrs	r3, r1
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	e02c      	b.n	80006b6 <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 12 && Copy_tEXTIConfig->MEXTI_Line >= 8){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	2b0b      	cmp	r3, #11
 8000662:	d812      	bhi.n	800068a <MEXTI_voidInit+0x186>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	2b07      	cmp	r3, #7
 800066a:	d90e      	bls.n	800068a <MEXTI_voidInit+0x186>
		SYSCFG_EXTICR3 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <MEXTI_voidInit+0x214>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	7812      	ldrb	r2, [r2, #0]
 8000674:	4611      	mov	r1, r2
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	7852      	ldrb	r2, [r2, #1]
 800067a:	0092      	lsls	r2, r2, #2
 800067c:	fa01 f202 	lsl.w	r2, r1, r2
 8000680:	4611      	mov	r1, r2
 8000682:	4a25      	ldr	r2, [pc, #148]	; (8000718 <MEXTI_voidInit+0x214>)
 8000684:	430b      	orrs	r3, r1
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	e015      	b.n	80006b6 <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 16 && Copy_tEXTIConfig->MEXTI_Line >= 12){
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	785b      	ldrb	r3, [r3, #1]
 800068e:	2b0f      	cmp	r3, #15
 8000690:	d811      	bhi.n	80006b6 <MEXTI_voidInit+0x1b2>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	2b0b      	cmp	r3, #11
 8000698:	d90d      	bls.n	80006b6 <MEXTI_voidInit+0x1b2>
		SYSCFG_EXTICR4 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <MEXTI_voidInit+0x218>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	4611      	mov	r1, r2
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	7852      	ldrb	r2, [r2, #1]
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	fa01 f202 	lsl.w	r2, r1, r2
 80006ae:	4611      	mov	r1, r2
 80006b0:	4a1a      	ldr	r2, [pc, #104]	; (800071c <MEXTI_voidInit+0x218>)
 80006b2:	430b      	orrs	r3, r1
 80006b4:	6013      	str	r3, [r2, #0]
	}

	/*Enable NVIC Mask for EXTI Line*/
	if(Copy_tEXTIConfig->MEXTI_Line <5){
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d808      	bhi.n	80006d0 <MEXTI_voidInit+0x1cc>
		MNVIC_voidEnableIRQ(EXTI0_IRQn+Copy_tEXTIConfig->MEXTI_Line);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	3306      	adds	r3, #6
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fb33 	bl	8000d34 <MNVIC_voidEnableIRQ>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
	}
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
	}
}
 80006ce:	e016      	b.n	80006fe <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 5 && Copy_tEXTIConfig->MEXTI_Line <= 9){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d907      	bls.n	80006e8 <MEXTI_voidInit+0x1e4>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	2b09      	cmp	r3, #9
 80006de:	d803      	bhi.n	80006e8 <MEXTI_voidInit+0x1e4>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
 80006e0:	2017      	movs	r0, #23
 80006e2:	f000 fb27 	bl	8000d34 <MNVIC_voidEnableIRQ>
}
 80006e6:	e00a      	b.n	80006fe <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	2b09      	cmp	r3, #9
 80006ee:	d906      	bls.n	80006fe <MEXTI_voidInit+0x1fa>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d802      	bhi.n	80006fe <MEXTI_voidInit+0x1fa>
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
 80006f8:	2028      	movs	r0, #40	; 0x28
 80006fa:	f000 fb1b 	bl	8000d34 <MNVIC_voidEnableIRQ>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40013c00 	.word	0x40013c00
 800070c:	20009acc 	.word	0x20009acc
 8000710:	40013808 	.word	0x40013808
 8000714:	4001380c 	.word	0x4001380c
 8000718:	40013810 	.word	0x40013810
 800071c:	40013814 	.word	0x40013814

08000720 <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MEXTI_voidClearPendingFlag+0x2c>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	2101      	movs	r1, #1
 8000732:	fa01 f202 	lsl.w	r2, r1, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <MEXTI_voidClearPendingFlag+0x2c>)
 800073a:	430b      	orrs	r3, r1
 800073c:	6153      	str	r3, [r2, #20]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40013c00 	.word	0x40013c00

08000750 <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MEXTI_u8GetPendingFlag+0x28>)
 800075c:	695a      	ldr	r2, [r3, #20]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	fa22 f303 	lsr.w	r3, r2, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40013c00 	.word	0x40013c00

0800077c <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <EXTI0_IRQHandler+0x1c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d002      	beq.n	800078e <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <EXTI0_IRQHandler+0x1c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ffc6 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20009acc 	.word	0x20009acc

0800079c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <EXTI1_IRQHandler+0x1c>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <EXTI1_IRQHandler+0x1c>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff ffb6 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20009acc 	.word	0x20009acc

080007bc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <EXTI2_IRQHandler+0x1c>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d002      	beq.n	80007ce <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <EXTI2_IRQHandler+0x1c>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 80007ce:	2002      	movs	r0, #2
 80007d0:	f7ff ffa6 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20009acc 	.word	0x20009acc

080007dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <EXTI3_IRQHandler+0x1c>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <EXTI3_IRQHandler+0x1c>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 80007ee:	2003      	movs	r0, #3
 80007f0:	f7ff ff96 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20009acc 	.word	0x20009acc

080007fc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <EXTI4_IRQHandler+0x1c>)
 8000802:	691b      	ldr	r3, [r3, #16]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <EXTI4_IRQHandler+0x1c>)
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 800080e:	2004      	movs	r0, #4
 8000810:	f7ff ff86 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20009acc 	.word	0x20009acc

0800081c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 8000820:	2005      	movs	r0, #5
 8000822:	f7ff ff95 	bl	8000750 <MEXTI_u8GetPendingFlag>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00a      	beq.n	8000842 <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 800082c:	4b27      	ldr	r3, [pc, #156]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 800083a:	2005      	movs	r0, #5
 800083c:	f7ff ff70 	bl	8000720 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 8000840:	e042      	b.n	80008c8 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 8000842:	2006      	movs	r0, #6
 8000844:	f7ff ff84 	bl	8000750 <MEXTI_u8GetPendingFlag>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00a      	beq.n	8000864 <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 800085c:	2006      	movs	r0, #6
 800085e:	f7ff ff5f 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 8000862:	e031      	b.n	80008c8 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 8000864:	2007      	movs	r0, #7
 8000866:	f7ff ff73 	bl	8000750 <MEXTI_u8GetPendingFlag>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00a      	beq.n	8000886 <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 800087e:	2007      	movs	r0, #7
 8000880:	f7ff ff4e 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 8000884:	e020      	b.n	80008c8 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 8000886:	2008      	movs	r0, #8
 8000888:	f7ff ff62 	bl	8000750 <MEXTI_u8GetPendingFlag>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d00a      	beq.n	80008a8 <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 8000894:	6a1b      	ldr	r3, [r3, #32]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 800089c:	6a1b      	ldr	r3, [r3, #32]
 800089e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 80008a0:	2008      	movs	r0, #8
 80008a2:	f7ff ff3d 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 80008a6:	e00f      	b.n	80008c8 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 80008a8:	2009      	movs	r0, #9
 80008aa:	f7ff ff51 	bl	8000750 <MEXTI_u8GetPendingFlag>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d009      	beq.n	80008c8 <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 80008b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <EXTI9_5_IRQHandler+0xb0>)
 80008be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c0:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 80008c2:	2009      	movs	r0, #9
 80008c4:	f7ff ff2c 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20009acc 	.word	0x20009acc

080008d0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 80008d4:	200a      	movs	r0, #10
 80008d6:	f7ff ff3b 	bl	8000750 <MEXTI_u8GetPendingFlag>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d00a      	beq.n	80008f6 <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 80008e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d002      	beq.n	80008ee <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 80008ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ec:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f7ff ff16 	bl	8000720 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 80008f4:	e053      	b.n	800099e <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 80008f6:	200b      	movs	r0, #11
 80008f8:	f7ff ff2a 	bl	8000750 <MEXTI_u8GetPendingFlag>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00a      	beq.n	8000918 <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 8000902:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 800090c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 8000910:	200b      	movs	r0, #11
 8000912:	f7ff ff05 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 8000916:	e042      	b.n	800099e <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 8000918:	200c      	movs	r0, #12
 800091a:	f7ff ff19 	bl	8000750 <MEXTI_u8GetPendingFlag>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00a      	beq.n	800093a <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 8000932:	200c      	movs	r0, #12
 8000934:	f7ff fef4 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 8000938:	e031      	b.n	800099e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 800093a:	200d      	movs	r0, #13
 800093c:	f7ff ff08 	bl	8000750 <MEXTI_u8GetPendingFlag>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00a      	beq.n	800095c <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 8000948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 8000950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000952:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 8000954:	200d      	movs	r0, #13
 8000956:	f7ff fee3 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 800095a:	e020      	b.n	800099e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 800095c:	200e      	movs	r0, #14
 800095e:	f7ff fef7 	bl	8000750 <MEXTI_u8GetPendingFlag>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00a      	beq.n	800097e <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 800096a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 8000972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000974:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 8000976:	200e      	movs	r0, #14
 8000978:	f7ff fed2 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 800097c:	e00f      	b.n	800099e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 800097e:	200f      	movs	r0, #15
 8000980:	f7ff fee6 	bl	8000750 <MEXTI_u8GetPendingFlag>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d009      	beq.n	800099e <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 800098c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <EXTI15_10_IRQHandler+0xd4>)
 8000994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000996:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 8000998:	200f      	movs	r0, #15
 800099a:	f7ff fec1 	bl	8000720 <MEXTI_voidClearPendingFlag>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20009acc 	.word	0x20009acc

080009a8 <GPIO_voidSetPinMode>:
#include"../../../Inc/MCAL/GPIO/GPIO_config.h"
#include"../../../Inc/MCAL/GPIO/GPIO_interface.h"
#include"../../../Inc/MCAL/GPIO/GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	460b      	mov	r3, r1
 80009b4:	71bb      	strb	r3, [r7, #6]
 80009b6:	4613      	mov	r3, r2
 80009b8:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d02c      	beq.n	8000a1a <GPIO_voidSetPinMode+0x72>
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	dc3d      	bgt.n	8000a40 <GPIO_voidSetPinMode+0x98>
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <GPIO_voidSetPinMode+0x26>
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d013      	beq.n	80009f4 <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 80009cc:	e038      	b.n	8000a40 <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <GPIO_voidSetPinMode+0xa8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	79ba      	ldrb	r2, [r7, #6]
 80009d4:	0052      	lsls	r2, r2, #1
 80009d6:	2103      	movs	r1, #3
 80009d8:	fa01 f202 	lsl.w	r2, r1, r2
 80009dc:	43d2      	mvns	r2, r2
 80009de:	4013      	ands	r3, r2
 80009e0:	7979      	ldrb	r1, [r7, #5]
 80009e2:	79ba      	ldrb	r2, [r7, #6]
 80009e4:	0052      	lsls	r2, r2, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	4611      	mov	r1, r2
 80009ec:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <GPIO_voidSetPinMode+0xa8>)
 80009ee:	430b      	orrs	r3, r1
 80009f0:	6013      	str	r3, [r2, #0]
      break;
 80009f2:	e026      	b.n	8000a42 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <GPIO_voidSetPinMode+0xac>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	79ba      	ldrb	r2, [r7, #6]
 80009fa:	0052      	lsls	r2, r2, #1
 80009fc:	2103      	movs	r1, #3
 80009fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000a02:	43d2      	mvns	r2, r2
 8000a04:	4013      	ands	r3, r2
 8000a06:	7979      	ldrb	r1, [r7, #5]
 8000a08:	79ba      	ldrb	r2, [r7, #6]
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a10:	4611      	mov	r1, r2
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <GPIO_voidSetPinMode+0xac>)
 8000a14:	430b      	orrs	r3, r1
 8000a16:	6013      	str	r3, [r2, #0]
      break;
 8000a18:	e013      	b.n	8000a42 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <GPIO_voidSetPinMode+0xb0>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	79ba      	ldrb	r2, [r7, #6]
 8000a20:	0052      	lsls	r2, r2, #1
 8000a22:	2103      	movs	r1, #3
 8000a24:	fa01 f202 	lsl.w	r2, r1, r2
 8000a28:	43d2      	mvns	r2, r2
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	7979      	ldrb	r1, [r7, #5]
 8000a2e:	79ba      	ldrb	r2, [r7, #6]
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	fa01 f202 	lsl.w	r2, r1, r2
 8000a36:	4611      	mov	r1, r2
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <GPIO_voidSetPinMode+0xb0>)
 8000a3a:	430b      	orrs	r3, r1
 8000a3c:	6013      	str	r3, [r2, #0]
      break;
 8000a3e:	e000      	b.n	8000a42 <GPIO_voidSetPinMode+0x9a>
      break;
 8000a40:	bf00      	nop
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40020800 	.word	0x40020800

08000a5c <GPIO_voidSetPinOutputMode>:
void GPIO_voidSetPinOutputMode(port_index_t Copy_PortIndex,
                               pin_index_t Copy_PinIndex,
                               output_pin_mode_t Copy_OutputPinMode) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	460b      	mov	r3, r1
 8000a68:	71bb      	strb	r3, [r7, #6]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d028      	beq.n	8000ac6 <GPIO_voidSetPinOutputMode+0x6a>
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	dc37      	bgt.n	8000ae8 <GPIO_voidSetPinOutputMode+0x8c>
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <GPIO_voidSetPinOutputMode+0x26>
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d011      	beq.n	8000aa4 <GPIO_voidSetPinOutputMode+0x48>
    case GPIO_PORTC:
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
                 Copy_OutputPinMode << Copy_PinIndex);
      break;
    default:
      break;
 8000a80:	e032      	b.n	8000ae8 <GPIO_voidSetPinOutputMode+0x8c>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <GPIO_voidSetPinOutputMode+0x9c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	79ba      	ldrb	r2, [r7, #6]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8e:	43d2      	mvns	r2, r2
 8000a90:	4013      	ands	r3, r2
 8000a92:	7979      	ldrb	r1, [r7, #5]
 8000a94:	79ba      	ldrb	r2, [r7, #6]
 8000a96:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <GPIO_voidSetPinOutputMode+0x9c>)
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	6013      	str	r3, [r2, #0]
      break;
 8000aa2:	e022      	b.n	8000aea <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <GPIO_voidSetPinOutputMode+0x9c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	79ba      	ldrb	r2, [r7, #6]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	43d2      	mvns	r2, r2
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	7979      	ldrb	r1, [r7, #5]
 8000ab6:	79ba      	ldrb	r2, [r7, #6]
 8000ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8000abc:	4611      	mov	r1, r2
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <GPIO_voidSetPinOutputMode+0x9c>)
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6013      	str	r3, [r2, #0]
      break;
 8000ac4:	e011      	b.n	8000aea <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <GPIO_voidSetPinOutputMode+0xa0>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	79ba      	ldrb	r2, [r7, #6]
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	43d2      	mvns	r2, r2
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	7979      	ldrb	r1, [r7, #5]
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	fa01 f202 	lsl.w	r2, r1, r2
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <GPIO_voidSetPinOutputMode+0xa0>)
 8000ae2:	430b      	orrs	r3, r1
 8000ae4:	6013      	str	r3, [r2, #0]
      break;
 8000ae6:	e000      	b.n	8000aea <GPIO_voidSetPinOutputMode+0x8e>
      break;
 8000ae8:	bf00      	nop
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40020404 	.word	0x40020404
 8000afc:	40020804 	.word	0x40020804

08000b00 <GPIO_voidSetPinOutputSpeed>:
void GPIO_voidSetPinOutputSpeed(port_index_t Copy_PortIndex,
                                pin_index_t Copy_PinIndex,
                                output_pin_speed_mode_t Copy_OutputPinSpeed) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	71bb      	strb	r3, [r7, #6]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d02c      	beq.n	8000b72 <GPIO_voidSetPinOutputSpeed+0x72>
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	dc3d      	bgt.n	8000b98 <GPIO_voidSetPinOutputSpeed+0x98>
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <GPIO_voidSetPinOutputSpeed+0x26>
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d013      	beq.n	8000b4c <GPIO_voidSetPinOutputSpeed+0x4c>
      MODIFY_REG(GPIOC_OSPEEDR,
                 GPIO_MODER_CLEAR_MASK << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex,
                 Copy_OutputPinSpeed << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8000b24:	e038      	b.n	8000b98 <GPIO_voidSetPinOutputSpeed+0x98>
      MODIFY_REG(
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	79ba      	ldrb	r2, [r7, #6]
 8000b2c:	0052      	lsls	r2, r2, #1
 8000b2e:	2103      	movs	r1, #3
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	43d2      	mvns	r2, r2
 8000b36:	4013      	ands	r3, r2
 8000b38:	7979      	ldrb	r1, [r7, #5]
 8000b3a:	79ba      	ldrb	r2, [r7, #6]
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b42:	4611      	mov	r1, r2
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8000b46:	430b      	orrs	r3, r1
 8000b48:	6013      	str	r3, [r2, #0]
      break;
 8000b4a:	e026      	b.n	8000b9a <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <GPIO_voidSetPinOutputSpeed+0xac>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	79ba      	ldrb	r2, [r7, #6]
 8000b52:	0052      	lsls	r2, r2, #1
 8000b54:	2103      	movs	r1, #3
 8000b56:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5a:	43d2      	mvns	r2, r2
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	7979      	ldrb	r1, [r7, #5]
 8000b60:	79ba      	ldrb	r2, [r7, #6]
 8000b62:	0052      	lsls	r2, r2, #1
 8000b64:	fa01 f202 	lsl.w	r2, r1, r2
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <GPIO_voidSetPinOutputSpeed+0xac>)
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	6013      	str	r3, [r2, #0]
      break;
 8000b70:	e013      	b.n	8000b9a <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(GPIOC_OSPEEDR,
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <GPIO_voidSetPinOutputSpeed+0xb0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	79ba      	ldrb	r2, [r7, #6]
 8000b78:	0052      	lsls	r2, r2, #1
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b80:	43d2      	mvns	r2, r2
 8000b82:	4013      	ands	r3, r2
 8000b84:	7979      	ldrb	r1, [r7, #5]
 8000b86:	79ba      	ldrb	r2, [r7, #6]
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <GPIO_voidSetPinOutputSpeed+0xb0>)
 8000b92:	430b      	orrs	r3, r1
 8000b94:	6013      	str	r3, [r2, #0]
      break;
 8000b96:	e000      	b.n	8000b9a <GPIO_voidSetPinOutputSpeed+0x9a>
      break;
 8000b98:	bf00      	nop
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40020008 	.word	0x40020008
 8000bac:	40020408 	.word	0x40020408
 8000bb0:	40020808 	.word	0x40020808

08000bb4 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	71bb      	strb	r3, [r7, #6]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d02c      	beq.n	8000c26 <GPIO_voidSetPinValue+0x72>
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	dc3d      	bgt.n	8000c4c <GPIO_voidSetPinValue+0x98>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <GPIO_voidSetPinValue+0x26>
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d013      	beq.n	8000c00 <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 8000bd8:	e038      	b.n	8000c4c <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8000bda:	797b      	ldrb	r3, [r7, #5]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d105      	bne.n	8000bec <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	2201      	movs	r2, #1
 8000be4:	409a      	lsls	r2, r3
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <GPIO_voidSetPinValue+0xb4>)
 8000be8:	601a      	str	r2, [r3, #0]
      break;
 8000bea:	e031      	b.n	8000c50 <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8000bec:	797b      	ldrb	r3, [r7, #5]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d12e      	bne.n	8000c50 <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8000bf2:	79bb      	ldrb	r3, [r7, #6]
 8000bf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <GPIO_voidSetPinValue+0xb4>)
 8000bfc:	601a      	str	r2, [r3, #0]
      break;
 8000bfe:	e027      	b.n	8000c50 <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8000c00:	797b      	ldrb	r3, [r7, #5]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d105      	bne.n	8000c12 <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8000c06:	79bb      	ldrb	r3, [r7, #6]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <GPIO_voidSetPinValue+0xb8>)
 8000c0e:	601a      	str	r2, [r3, #0]
      break;
 8000c10:	e020      	b.n	8000c54 <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8000c12:	797b      	ldrb	r3, [r7, #5]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d11d      	bne.n	8000c54 <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <GPIO_voidSetPinValue+0xb8>)
 8000c22:	601a      	str	r2, [r3, #0]
      break;
 8000c24:	e016      	b.n	8000c54 <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8000c26:	797b      	ldrb	r3, [r7, #5]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d105      	bne.n	8000c38 <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	409a      	lsls	r2, r3
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <GPIO_voidSetPinValue+0xbc>)
 8000c34:	601a      	str	r2, [r3, #0]
      break;
 8000c36:	e00f      	b.n	8000c58 <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10c      	bne.n	8000c58 <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
 8000c40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c44:	409a      	lsls	r2, r3
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <GPIO_voidSetPinValue+0xbc>)
 8000c48:	601a      	str	r2, [r3, #0]
      break;
 8000c4a:	e005      	b.n	8000c58 <GPIO_voidSetPinValue+0xa4>
      break;
 8000c4c:	bf00      	nop
 8000c4e:	e004      	b.n	8000c5a <GPIO_voidSetPinValue+0xa6>
      break;
 8000c50:	bf00      	nop
 8000c52:	e002      	b.n	8000c5a <GPIO_voidSetPinValue+0xa6>
      break;
 8000c54:	bf00      	nop
 8000c56:	e000      	b.n	8000c5a <GPIO_voidSetPinValue+0xa6>
      break;
 8000c58:	bf00      	nop
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40020018 	.word	0x40020018
 8000c6c:	40020418 	.word	0x40020418
 8000c70:	40020818 	.word	0x40020818

08000c74 <GPIO_voidSetPinPullUpDownResistor>:
void GPIO_voidSetPinPullUpDownResistor(port_index_t Copy_PortIndex,
                                       pin_index_t Copy_PinIndex,
                                       input_pin_mode_t Copy_InputPinMode) {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	71bb      	strb	r3, [r7, #6]
 8000c82:	4613      	mov	r3, r2
 8000c84:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d02c      	beq.n	8000ce6 <GPIO_voidSetPinPullUpDownResistor+0x72>
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	dc3d      	bgt.n	8000d0c <GPIO_voidSetPinPullUpDownResistor+0x98>
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <GPIO_voidSetPinPullUpDownResistor+0x26>
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d013      	beq.n	8000cc0 <GPIO_voidSetPinPullUpDownResistor+0x4c>
      MODIFY_REG(GPIOC_PUPDR,
                 GPIO_PUPDR_CLEAR_MASK << GPIO_PUPDR_PIN_BITS * Copy_PinIndex,
                 Copy_InputPinMode << GPIO_PUPDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8000c98:	e038      	b.n	8000d0c <GPIO_voidSetPinPullUpDownResistor+0x98>
      MODIFY_REG(GPIOA_PUPDR,
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	79ba      	ldrb	r2, [r7, #6]
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	2103      	movs	r1, #3
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	4013      	ands	r3, r2
 8000cac:	7979      	ldrb	r1, [r7, #5]
 8000cae:	79ba      	ldrb	r2, [r7, #6]
 8000cb0:	0052      	lsls	r2, r2, #1
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6013      	str	r3, [r2, #0]
      break;
 8000cbe:	e026      	b.n	8000d0e <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOB_PUPDR,
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <GPIO_voidSetPinPullUpDownResistor+0xac>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	79ba      	ldrb	r2, [r7, #6]
 8000cc6:	0052      	lsls	r2, r2, #1
 8000cc8:	2103      	movs	r1, #3
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	43d2      	mvns	r2, r2
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	7979      	ldrb	r1, [r7, #5]
 8000cd4:	79ba      	ldrb	r2, [r7, #6]
 8000cd6:	0052      	lsls	r2, r2, #1
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <GPIO_voidSetPinPullUpDownResistor+0xac>)
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6013      	str	r3, [r2, #0]
      break;
 8000ce4:	e013      	b.n	8000d0e <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOC_PUPDR,
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	0052      	lsls	r2, r2, #1
 8000cee:	2103      	movs	r1, #3
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	43d2      	mvns	r2, r2
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	7979      	ldrb	r1, [r7, #5]
 8000cfa:	79ba      	ldrb	r2, [r7, #6]
 8000cfc:	0052      	lsls	r2, r2, #1
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	4611      	mov	r1, r2
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 8000d06:	430b      	orrs	r3, r1
 8000d08:	6013      	str	r3, [r2, #0]
      break;
 8000d0a:	e000      	b.n	8000d0e <GPIO_voidSetPinPullUpDownResistor+0x9a>
      break;
 8000d0c:	bf00      	nop
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	4002000c 	.word	0x4002000c
 8000d20:	4002040c 	.word	0x4002040c
 8000d24:	4002080c 	.word	0x4002080c

08000d28 <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 8000d2c:	f000 f8da 	bl	8000ee4 <MSCB_voidSetPriorityGrouping>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <MNVIC_voidEnableIRQ>:

void MNVIC_voidEnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <MNVIC_voidEnableIRQ+0x2a>
	{
		NVIC->ISER[((u32)IRQn >> 5)] = (1UL << ((u32)IRQn & 0x1F));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <MNVIC_voidEnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <RCC_void_HSI_Init>:
static void RCC_void_APB2Prescaler_Init(void);
/************************************************/

/******* Local Functions Implementation ********/
static void RCC_void_HSI_Init(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Enable HSI
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <RCC_void_HSI_Init+0x58>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <RCC_void_HSI_Init+0x58>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE  
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <RCC_void_HSI_Init+0x58>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <RCC_void_HSI_Init+0x58>)
 8000d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <RCC_void_HSI_Init+0x58>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <RCC_void_HSI_Init+0x58>)
 8000d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d96:	6013      	str	r3, [r2, #0]
    // Polling (Busy Wait)
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
 8000d98:	bf00      	nop
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <RCC_void_HSI_Init+0x58>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f9      	beq.n	8000d9a <RCC_void_HSI_Init+0x2a>
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <RCC_void_HSI_Init+0x5c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <RCC_void_HSI_Init+0x5c>)
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <RCC_void_HSI_Init+0x5c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <RCC_void_HSI_Init+0x5c>)
 8000db8:	f023 0302 	bic.w	r3, r3, #2
 8000dbc:	6013      	str	r3, [r2, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40023808 	.word	0x40023808

08000dd0 <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_1;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_2
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dde:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_2;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dea:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023808 	.word	0x40023808

08000dfc <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <RCC_void_APB1Prescaler_Init+0x24>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <RCC_void_APB1Prescaler_Init+0x24>)
 8000e06:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e0a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <RCC_void_APB1Prescaler_Init+0x24>)
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <RCC_void_APB1Prescaler_Init+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023808 	.word	0x40023808

08000e24 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <RCC_void_APB2Prescaler_Init+0x24>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <RCC_void_APB2Prescaler_Init+0x24>)
 8000e2e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e32:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <RCC_void_APB2Prescaler_Init+0x24>)
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <RCC_void_APB2Prescaler_Init+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023808 	.word	0x40023808

08000e4c <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
 8000e50:	f7ff ff8e 	bl	8000d70 <RCC_void_HSI_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 8000e54:	f7ff ffbc 	bl	8000dd0 <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 8000e58:	f7ff ffd0 	bl	8000dfc <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 8000e5c:	f7ff ffe2 	bl	8000e24 <RCC_void_APB2Prescaler_Init>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d01c      	beq.n	8000eb4 <RCC_voidEnablePeripheralClock+0x50>
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	dc25      	bgt.n	8000eca <RCC_voidEnablePeripheralClock+0x66>
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <RCC_voidEnablePeripheralClock+0x24>
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d00b      	beq.n	8000e9e <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 8000e86:	e020      	b.n	8000eca <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <RCC_voidEnablePeripheralClock+0x74>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	79ba      	ldrb	r2, [r7, #6]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fa01 f202 	lsl.w	r2, r1, r2
 8000e94:	4611      	mov	r1, r2
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <RCC_voidEnablePeripheralClock+0x74>)
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	6013      	str	r3, [r2, #0]
        break;
 8000e9c:	e016      	b.n	8000ecc <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <RCC_voidEnablePeripheralClock+0x78>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	79ba      	ldrb	r2, [r7, #6]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <RCC_voidEnablePeripheralClock+0x78>)
 8000eae:	430b      	orrs	r3, r1
 8000eb0:	6013      	str	r3, [r2, #0]
        break;
 8000eb2:	e00b      	b.n	8000ecc <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <RCC_voidEnablePeripheralClock+0x7c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	79ba      	ldrb	r2, [r7, #6]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <RCC_voidEnablePeripheralClock+0x7c>)
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	6013      	str	r3, [r2, #0]
        break;  
 8000ec8:	e000      	b.n	8000ecc <RCC_voidEnablePeripheralClock+0x68>
        break;
 8000eca:	bf00      	nop
    }
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40023830 	.word	0x40023830
 8000edc:	40023840 	.word	0x40023840
 8000ee0:	40023844 	.word	0x40023844

08000ee4 <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MSCB_voidSetPriorityGrouping+0x44>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efe:	4013      	ands	r3, r2
 8000f00:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	021a      	lsls	r2, r3, #8
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f12:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <MSCB_voidSetPriorityGrouping+0x44>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60d3      	str	r3, [r2, #12]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
#elif (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8)
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MSysTick_voidInit+0x34>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <MSysTick_voidInit+0x34>)
 8000f36:	f023 0304 	bic.w	r3, r3, #4
 8000f3a:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MSysTick_voidInit+0x34>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <MSysTick_voidInit+0x34>)
 8000f42:	f023 0302 	bic.w	r3, r3, #2
 8000f46:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <MSysTick_voidInit+0x34>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <MSysTick_voidInit+0x34>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MSysTick_voidDeInit+0x34>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <MSysTick_voidDeInit+0x34>)
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MSysTick_voidDeInit+0x34>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MSysTick_voidDeInit+0x34>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <MSysTick_voidDeInit+0x34>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <MSysTick_voidDeInit+0x34>)
 8000f86:	f023 0302 	bic.w	r3, r3, #2
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <MSysTick_u32GetElapsedTime_us>:
	Local_ElapsedTicks =  (SysTick->LOAD - SysTick->VAL);
	/* Return The Local Variable */
	return Local_ElapsedTicks;
}
u32 MSysTick_u32GetElapsedTime_us(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
	u32 Local_ElapsedTicks = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
	u32 Local_ElapsedTime_us = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
	/* Copy The SysTick Elapsed Ticks to a Local Variable */
	Local_ElapsedTicks =  (SysTick->LOAD - SysTick->VAL);
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MSysTick_u32GetElapsedTime_us+0x2c>)
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MSysTick_u32GetElapsedTime_us+0x2c>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	607b      	str	r3, [r7, #4]
	Local_ElapsedTime_us = Local_ElapsedTicks /((u32)((SYSTICK_AHB_CLK/SYSTICK_CLOCK_SOURCE)/1000000.0));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
	/* Return The Local Variable */
	return Local_ElapsedTime_us;
 8000fba:	683b      	ldr	r3, [r7, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <MSystick_voidResetTimer>:
	/* Return The Local Variable */
	return Local_RemainingTicks;
}

void MSystick_voidResetTimer(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
	SysTick->VAL = 0;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <MSystick_voidResetTimer+0x14>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <MSystick_voidSetPreloadvalue>:

void MSystick_voidSetPreloadvalue(u32 Copy_u32Ticks)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = Copy_u32Ticks;
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <MSystick_voidSetPreloadvalue+0x20>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <MSystick_voidSetPreloadvalue+0x20>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e010 	.word	0xe000e010

08001008 <SysTick_Handler>:
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <SysTick_Handler+0x24>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 8001016:	f7ff ffa5 	bl	8000f64 <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Handler+0x28>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 8001022:	4b03      	ldr	r3, [pc, #12]	; (8001030 <SysTick_Handler+0x28>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4798      	blx	r3
	}
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20009b10 	.word	0x20009b10
 8001030:	20009b0c 	.word	0x20009b0c

08001034 <IR_Handler>:
 ******************************************************************************
 */
#include"main.h"

// ----------------------------------------------------------------------------
void IR_Handler(void){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
		if(IR_u32GetReceivedData() == IR_TV_REMOTE_1)
 8001038:	f7ff f918 	bl	800026c <IR_u32GetReceivedData>
 800103c:	4603      	mov	r3, r0
 800103e:	4a06      	ldr	r2, [pc, #24]	; (8001058 <IR_Handler+0x24>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d106      	bne.n	8001052 <IR_Handler+0x1e>
		{
			R2RDAC_voidSetSignal(&R2RDAC_Config, myaudio_raw,myaudio_raw_len);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <IR_Handler+0x28>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4905      	ldr	r1, [pc, #20]	; (8001060 <IR_Handler+0x2c>)
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <IR_Handler+0x30>)
 800104e:	f7ff fa17 	bl	8000480 <R2RDAC_voidSetSignal>
		}
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	22d9d827 	.word	0x22d9d827
 800105c:	20009aa0 	.word	0x20009aa0
 8001060:	20000014 	.word	0x20000014
 8001064:	20000004 	.word	0x20000004

08001068 <main>:

int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	IR_voidInit(&IR_Config,IR_Handler);
 800106c:	4903      	ldr	r1, [pc, #12]	; (800107c <main+0x14>)
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <main+0x18>)
 8001070:	f7ff f8b0 	bl	80001d4 <IR_voidInit>
	R2RDAC_voidInit(&R2RDAC_Config);
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <main+0x1c>)
 8001076:	f7ff f9e5 	bl	8000444 <R2RDAC_voidInit>
    /* Loop forever */
	while(1)
 800107a:	e7fe      	b.n	800107a <main+0x12>
 800107c:	08001035 	.word	0x08001035
 8001080:	20000000 	.word	0x20000000
 8001084:	20000004 	.word	0x20000004

08001088 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	RCC_voidInit();
 800108c:	f7ff fede 	bl	8000e4c <RCC_voidInit>
	MSysTick_voidInit();
 8001090:	f7ff ff4c 	bl	8000f2c <MSysTick_voidInit>
	MNVIC_voidInit();
 8001094:	f7ff fe48 	bl	8000d28 <MNVIC_voidInit>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a0:	f7ff fff2 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	; (80010dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <LoopForever+0xe>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	; (80010e8 <LoopForever+0x16>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ca:	f000 f811 	bl	80010f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff ffcb 	bl	8001068 <main>

080010d2 <LoopForever>:

LoopForever:
  b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   r0, =_estack
 80010d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20009aa4 	.word	0x20009aa4
  ldr r2, =_sidata
 80010e0:	08001158 	.word	0x08001158
  ldr r2, =_sbss
 80010e4:	20009aa4 	.word	0x20009aa4
  ldr r4, =_ebss
 80010e8:	20009b14 	.word	0x20009b14

080010ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>
	...

080010f0 <__libc_init_array>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	4d0d      	ldr	r5, [pc, #52]	; (8001128 <__libc_init_array+0x38>)
 80010f4:	4c0d      	ldr	r4, [pc, #52]	; (800112c <__libc_init_array+0x3c>)
 80010f6:	1b64      	subs	r4, r4, r5
 80010f8:	10a4      	asrs	r4, r4, #2
 80010fa:	2600      	movs	r6, #0
 80010fc:	42a6      	cmp	r6, r4
 80010fe:	d109      	bne.n	8001114 <__libc_init_array+0x24>
 8001100:	4d0b      	ldr	r5, [pc, #44]	; (8001130 <__libc_init_array+0x40>)
 8001102:	4c0c      	ldr	r4, [pc, #48]	; (8001134 <__libc_init_array+0x44>)
 8001104:	f000 f818 	bl	8001138 <_init>
 8001108:	1b64      	subs	r4, r4, r5
 800110a:	10a4      	asrs	r4, r4, #2
 800110c:	2600      	movs	r6, #0
 800110e:	42a6      	cmp	r6, r4
 8001110:	d105      	bne.n	800111e <__libc_init_array+0x2e>
 8001112:	bd70      	pop	{r4, r5, r6, pc}
 8001114:	f855 3b04 	ldr.w	r3, [r5], #4
 8001118:	4798      	blx	r3
 800111a:	3601      	adds	r6, #1
 800111c:	e7ee      	b.n	80010fc <__libc_init_array+0xc>
 800111e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001122:	4798      	blx	r3
 8001124:	3601      	adds	r6, #1
 8001126:	e7f2      	b.n	800110e <__libc_init_array+0x1e>
 8001128:	08001150 	.word	0x08001150
 800112c:	08001150 	.word	0x08001150
 8001130:	08001150 	.word	0x08001150
 8001134:	08001154 	.word	0x08001154

08001138 <_init>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr

08001144 <_fini>:
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	bf00      	nop
 8001148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114a:	bc08      	pop	{r3}
 800114c:	469e      	mov	lr, r3
 800114e:	4770      	bx	lr
