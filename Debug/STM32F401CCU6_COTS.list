
STM32F401CCU6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d80  08002038  08002038  00012038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002db8  08002db8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db8  08002db8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000006c  08002e2c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002e2c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003a10  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000100c  00000000  00000000  00023aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000538  00000000  00000000  00024b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e13  00000000  00000000  00025038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c23  00000000  00000000  00025e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007bdc  00000000  00000000  00028a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000003b1  00000000  00000000  0003064a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000012dc  00000000  00000000  000309fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00031cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002020 	.word	0x08002020

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	08002020 	.word	0x08002020

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <TFT_GPIO_PinsInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void TFT_GPIO_PinsInit(port_index_t port, pin_index_t pin)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
	switch (port)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d010      	beq.n	800081c <TFT_GPIO_PinsInit+0x38>
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	dc13      	bgt.n	8000826 <TFT_GPIO_PinsInit+0x42>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <TFT_GPIO_PinsInit+0x24>
 8000802:	2b01      	cmp	r3, #1
 8000804:	d005      	beq.n	8000812 <TFT_GPIO_PinsInit+0x2e>
			      break;
			    case GPIO_PORTC:
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
			      break;
			    default:
			      break;
 8000806:	e00e      	b.n	8000826 <TFT_GPIO_PinsInit+0x42>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8000808:	2100      	movs	r1, #0
 800080a:	2000      	movs	r0, #0
 800080c:	f001 f8d0 	bl	80019b0 <RCC_voidEnablePeripheralClock>
			      break;
 8000810:	e00a      	b.n	8000828 <TFT_GPIO_PinsInit+0x44>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8000812:	2101      	movs	r1, #1
 8000814:	2000      	movs	r0, #0
 8000816:	f001 f8cb 	bl	80019b0 <RCC_voidEnablePeripheralClock>
			      break;
 800081a:	e005      	b.n	8000828 <TFT_GPIO_PinsInit+0x44>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 800081c:	2102      	movs	r1, #2
 800081e:	2000      	movs	r0, #0
 8000820:	f001 f8c6 	bl	80019b0 <RCC_voidEnablePeripheralClock>
			      break;
 8000824:	e000      	b.n	8000828 <TFT_GPIO_PinsInit+0x44>
			      break;
 8000826:	bf00      	nop
			  }
	GPIO_voidSetPinMode(port,pin,GPIO_OUTPUT_PIN_MODE);
 8000828:	79b9      	ldrb	r1, [r7, #6]
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2201      	movs	r2, #1
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fec0 	bl	80015b4 <GPIO_voidSetPinMode>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <TFT_ResetSequence>:

static void TFT_ResetSequence(TFT_t* TFT_Config)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000850:	2201      	movs	r2, #1
 8000852:	4619      	mov	r1, r3
 8000854:	f000 ffb0 	bl	80017b8 <GPIO_voidSetPinValue>
	Delay_us(100);
 8000858:	237d      	movs	r3, #125	; 0x7d
 800085a:	61fb      	str	r3, [r7, #28]
 800085c:	e002      	b.n	8000864 <TFT_ResetSequence+0x28>
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b01      	subs	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f9      	bne.n	800085e <TFT_ResetSequence+0x22>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_LOW);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	f000 ff9d 	bl	80017b8 <GPIO_voidSetPinValue>
	Delay_us(1);
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	e002      	b.n	800088a <TFT_ResetSequence+0x4e>
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	3b01      	subs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1f9      	bne.n	8000884 <TFT_ResetSequence+0x48>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800089c:	2201      	movs	r2, #1
 800089e:	4619      	mov	r1, r3
 80008a0:	f000 ff8a 	bl	80017b8 <GPIO_voidSetPinValue>
	Delay_us(100);
 80008a4:	237d      	movs	r3, #125	; 0x7d
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e002      	b.n	80008b0 <TFT_ResetSequence+0x74>
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f9      	bne.n	80008aa <TFT_ResetSequence+0x6e>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_LOW);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80008c2:	2200      	movs	r2, #0
 80008c4:	4619      	mov	r1, r3
 80008c6:	f000 ff77 	bl	80017b8 <GPIO_voidSetPinValue>
	Delay_us(100);
 80008ca:	237d      	movs	r3, #125	; 0x7d
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	e002      	b.n	80008d6 <TFT_ResetSequence+0x9a>
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f9      	bne.n	80008d0 <TFT_ResetSequence+0x94>
	GPIO_voidSetPinValue(TFT_Config->TFT_RESET_Port,TFT_Config->TFT_RESET_Pin, GPIO_HIGH);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80008e8:	2201      	movs	r2, #1
 80008ea:	4619      	mov	r1, r3
 80008ec:	f000 ff64 	bl	80017b8 <GPIO_voidSetPinValue>
	Delay_ms(120);
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <TFT_ResetSequence+0xd0>)
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e002      	b.n	80008fc <TFT_ResetSequence+0xc0>
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f9      	bne.n	80008f6 <TFT_ResetSequence+0xba>
}
 8000902:	bf00      	nop
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	000249f0 	.word	0x000249f0

08000910 <TFT_voidSendCommand>:
static void TFT_voidSendCommand(TFT_t* TFT_Config, u8 Command)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_LOW);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	f000 ff44 	bl	80017b8 <GPIO_voidSetPinValue>
	MSPI_TransmitByte(&TFT_Config->TFT_SPI_Config, Command , 1000);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	78f9      	ldrb	r1, [r7, #3]
 8000934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000938:	4618      	mov	r0, r3
 800093a:	f001 f981 	bl	8001c40 <MSPI_TransmitByte>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <TFT_voidSendData>:
static void TFT_voidSendData(TFT_t* TFT_Config, u8 Data){
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800095e:	2201      	movs	r2, #1
 8000960:	4619      	mov	r1, r3
 8000962:	f000 ff29 	bl	80017b8 <GPIO_voidSetPinValue>
	MSPI_TransmitByte(&TFT_Config->TFT_SPI_Config, Data , 1000);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	78f9      	ldrb	r1, [r7, #3]
 800096a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f966 	bl	8001c40 <MSPI_TransmitByte>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <TFT_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void TFT_voidInit(TFT_t* TFT_Config)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	TFT_GPIO_PinsInit(TFT_Config->TFT_RESET_Port, TFT_Config->TFT_RESET_Pin);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000990:	4619      	mov	r1, r3
 8000992:	4610      	mov	r0, r2
 8000994:	f7ff ff26 	bl	80007e4 <TFT_GPIO_PinsInit>
	TFT_GPIO_PinsInit(TFT_Config->TFT_DC_Port, TFT_Config->TFT_DC_Pin);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80009a4:	4619      	mov	r1, r3
 80009a6:	4610      	mov	r0, r2
 80009a8:	f7ff ff1c 	bl	80007e4 <TFT_GPIO_PinsInit>
	MSPI_voidInit(&TFT_Config->TFT_SPI_Config);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f8fc 	bl	8001bac <MSPI_voidInit>
	TFT_ResetSequence(TFT_Config);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff41 	bl	800083c <TFT_ResetSequence>
	TFT_voidSendCommand(TFT_Config,SLPOUT_CMD);
 80009ba:	2111      	movs	r1, #17
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ffa7 	bl	8000910 <TFT_voidSendCommand>
	Delay_ms(150);
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <TFT_voidInit+0xb0>)
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e002      	b.n	80009ce <TFT_voidInit+0x52>
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1f9      	bne.n	80009c8 <TFT_voidInit+0x4c>
	TFT_voidSendCommand(TFT_Config,COLMOD_CMD);
 80009d4:	213a      	movs	r1, #58	; 0x3a
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff9a 	bl	8000910 <TFT_voidSendCommand>
	TFT_voidSendData(TFT_Config,RGB565_COLOR_MODE);
 80009dc:	2105      	movs	r1, #5
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffb1 	bl	8000946 <TFT_voidSendData>
	TFT_voidSendCommand(TFT_Config,INVON_CMD);
 80009e4:	2121      	movs	r1, #33	; 0x21
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff92 	bl	8000910 <TFT_voidSendCommand>
	TFT_voidSendCommand(TFT_Config,MADCTL_CMD);
 80009ec:	2136      	movs	r1, #54	; 0x36
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ff8e 	bl	8000910 <TFT_voidSendCommand>
	TFT_voidSendData(TFT_Config,TOP_TO_BOTTOM_MODE);
 80009f4:	21c0      	movs	r1, #192	; 0xc0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffa5 	bl	8000946 <TFT_voidSendData>
	TFT_FillScreen(TFT_Config,TFT_Config->TFT_InitColor);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4619      	mov	r1, r3
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 f939 	bl	8000c7e <TFT_FillScreen>
	TFT_voidSendCommand(TFT_Config,DISPON_CMD);
 8000a0c:	2129      	movs	r1, #41	; 0x29
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff7e 	bl	8000910 <TFT_voidSendCommand>
	TFT_Config->TFT_Row_Loc = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	TFT_Config->TFT_Col_Loc = 0;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	0002dc6c 	.word	0x0002dc6c

08000a30 <TFT_voidSetWindow>:

void TFT_voidSetWindow(TFT_t* TFT_Config ,u8 Copy_u8X0, u8 Copy_u8X1, u8 Copy_u8Y0, u8 Copy_u8Y1)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	4608      	mov	r0, r1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4603      	mov	r3, r0
 8000a40:	70fb      	strb	r3, [r7, #3]
 8000a42:	460b      	mov	r3, r1
 8000a44:	70bb      	strb	r3, [r7, #2]
 8000a46:	4613      	mov	r3, r2
 8000a48:	707b      	strb	r3, [r7, #1]
    // Send Set X Addresses Command
    TFT_voidSendCommand(TFT_Config,CASET_CMD);
 8000a4a:	212a      	movs	r1, #42	; 0x2a
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff5f 	bl	8000910 <TFT_voidSendCommand>
    TFT_voidSendData(TFT_Config,0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff76 	bl	8000946 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config , Copy_u8X0);
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ff71 	bl	8000946 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config , 0);
 8000a64:	2100      	movs	r1, #0
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ff6d 	bl	8000946 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8X1);
 8000a6c:	78bb      	ldrb	r3, [r7, #2]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff68 	bl	8000946 <TFT_voidSendData>
    // Send Set Y Addresses Command
    TFT_voidSendCommand(TFT_Config,RASET_CMD);
 8000a76:	212b      	movs	r1, #43	; 0x2b
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff49 	bl	8000910 <TFT_voidSendCommand>
    TFT_voidSendData(TFT_Config,0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff60 	bl	8000946 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8Y0);
 8000a86:	787b      	ldrb	r3, [r7, #1]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ff5b 	bl	8000946 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ff57 	bl	8000946 <TFT_voidSendData>
    TFT_voidSendData(TFT_Config,Copy_u8Y1);
 8000a98:	7c3b      	ldrb	r3, [r7, #16]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff52 	bl	8000946 <TFT_voidSendData>
    TFT_voidSendCommand(TFT_Config,RAM_WR_CMD);
 8000aa2:	212c      	movs	r1, #44	; 0x2c
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff33 	bl	8000910 <TFT_voidSendCommand>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <TFT_WriteCharPosWithBgColor>:
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
	MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, Copy_pu8Image,TFT_WIDTH*TFT_HEIGHT*2);
}

void TFT_WriteCharPosWithBgColor(TFT_t* TFT_Config,u16 Row, u16 Col, char ch, u16 color, u16 bgcolor)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	817b      	strh	r3, [r7, #10]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	813b      	strh	r3, [r7, #8]
 8000aca:	4613      	mov	r3, r2
 8000acc:	71fb      	strb	r3, [r7, #7]
	u16 Local_RowCounter = ZERO_INIT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	82fb      	strh	r3, [r7, #22]
	u16 Local_ColCounter = ZERO_INIT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	82bb      	strh	r3, [r7, #20]
	u16 FontRowData = ZERO_INIT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	827b      	strh	r3, [r7, #18]
	if(Row*TFT_FONT_HEIGHT + TFT_FONT_HEIGHT > TFT_HEIGHT || Col*TFT_FONT_WIDTH + TFT_FONT_WIDTH > TFT_WIDTH)
 8000ada:	897b      	ldrh	r3, [r7, #10]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	4613      	mov	r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2ba0      	cmp	r3, #160	; 0xa0
 8000ae8:	f300 8084 	bgt.w	8000bf4 <TFT_WriteCharPosWithBgColor+0x140>
 8000aec:	893b      	ldrh	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	2b80      	cmp	r3, #128	; 0x80
 8000afc:	dc7a      	bgt.n	8000bf4 <TFT_WriteCharPosWithBgColor+0x140>
	{
		return;
	}
	else
	{
		TFT_Config->TFT_Col_Loc = Col*TFT_FONT_WIDTH + TFT_FONT_WIDTH;
 8000afe:	893b      	ldrh	r3, [r7, #8]
 8000b00:	3301      	adds	r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	441a      	add	r2, r3
 8000b0a:	0052      	lsls	r2, r2, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		TFT_voidSetWindow(TFT_Config, Col*TFT_FONT_WIDTH, Col*TFT_FONT_WIDTH + TFT_FONT_WIDTH - 1, Row*TFT_FONT_HEIGHT, Row*TFT_FONT_HEIGHT + TFT_FONT_HEIGHT - 1);
 8000b16:	893b      	ldrh	r3, [r7, #8]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	441a      	add	r2, r3
 8000b20:	0052      	lsls	r2, r2, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	893b      	ldrh	r3, [r7, #8]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	0092      	lsls	r2, r2, #2
 8000b30:	441a      	add	r2, r3
 8000b32:	0052      	lsls	r2, r2, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	897b      	ldrh	r3, [r7, #10]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	00c0      	lsls	r0, r0, #3
 8000b44:	4403      	add	r3, r0
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	b2d8      	uxtb	r0, r3
 8000b4a:	897b      	ldrh	r3, [r7, #10]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461c      	mov	r4, r3
 8000b52:	00e4      	lsls	r4, r4, #3
 8000b54:	4423      	add	r3, r4
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	4603      	mov	r3, r0
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f7ff ff64 	bl	8000a30 <TFT_voidSetWindow>
		for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_FONT_HEIGHT; Local_RowCounter++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	82fb      	strh	r3, [r7, #22]
 8000b6c:	e03e      	b.n	8000bec <TFT_WriteCharPosWithBgColor+0x138>
		{
			FontRowData = (TFT_FONT[(ch - 32)*TFT_FONT_HEIGHT + Local_RowCounter] );
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f1a3 0220 	sub.w	r2, r3, #32
 8000b74:	4613      	mov	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	8afb      	ldrh	r3, [r7, #22]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <TFT_WriteCharPosWithBgColor+0x148>)
 8000b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b88:	827b      	strh	r3, [r7, #18]
			for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_FONT_WIDTH; Local_ColCounter++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	82bb      	strh	r3, [r7, #20]
 8000b8e:	e027      	b.n	8000be0 <TFT_WriteCharPosWithBgColor+0x12c>
			{
				if((FontRowData << Local_ColCounter)& 0X8000)
 8000b90:	8a7a      	ldrh	r2, [r7, #18]
 8000b92:	8abb      	ldrh	r3, [r7, #20]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00e      	beq.n	8000bbe <TFT_WriteCharPosWithBgColor+0x10a>
				{
					TFT_voidSendData(TFT_Config, color>>8);
 8000ba0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4619      	mov	r1, r3
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f7ff fecb 	bl	8000946 <TFT_voidSendData>
					TFT_voidSendData(TFT_Config,(u8)color);
 8000bb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff fec5 	bl	8000946 <TFT_voidSendData>
 8000bbc:	e00d      	b.n	8000bda <TFT_WriteCharPosWithBgColor+0x126>
				}
				else
				{
					TFT_voidSendData(TFT_Config,bgcolor>>8);
 8000bbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff febc 	bl	8000946 <TFT_voidSendData>
					TFT_voidSendData(TFT_Config,(u8)bgcolor);
 8000bce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff feb6 	bl	8000946 <TFT_voidSendData>
			for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_FONT_WIDTH; Local_ColCounter++)
 8000bda:	8abb      	ldrh	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	82bb      	strh	r3, [r7, #20]
 8000be0:	8abb      	ldrh	r3, [r7, #20]
 8000be2:	2b0a      	cmp	r3, #10
 8000be4:	d9d4      	bls.n	8000b90 <TFT_WriteCharPosWithBgColor+0xdc>
		for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_FONT_HEIGHT; Local_RowCounter++)
 8000be6:	8afb      	ldrh	r3, [r7, #22]
 8000be8:	3301      	adds	r3, #1
 8000bea:	82fb      	strh	r3, [r7, #22]
 8000bec:	8afb      	ldrh	r3, [r7, #22]
 8000bee:	2b11      	cmp	r3, #17
 8000bf0:	d9bd      	bls.n	8000b6e <TFT_WriteCharPosWithBgColor+0xba>
 8000bf2:	e000      	b.n	8000bf6 <TFT_WriteCharPosWithBgColor+0x142>
		return;
 8000bf4:	bf00      	nop
				}
			}
		}
	}
}
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	0800205c 	.word	0x0800205c

08000c00 <TFT_WriteStringPosWithBgColor>:
void TFT_WriteStringPosWithBgColor(TFT_t* TFT_Config,u16 Row, u16 Col, char*str, u16 color, u16 bgcolor)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	817b      	strh	r3, [r7, #10]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	813b      	strh	r3, [r7, #8]
	u8 RowCounter = Row;
 8000c12:	897b      	ldrh	r3, [r7, #10]
 8000c14:	75fb      	strb	r3, [r7, #23]
	u8 ColCounter = Col;
 8000c16:	893b      	ldrh	r3, [r7, #8]
 8000c18:	75bb      	strb	r3, [r7, #22]
	while(*str)
 8000c1a:	e026      	b.n	8000c6a <TFT_WriteStringPosWithBgColor+0x6a>
	{
		if(ColCounter + TFT_FONT_WIDTH > TFT_WIDTH)
 8000c1c:	7dbb      	ldrb	r3, [r7, #22]
 8000c1e:	2b75      	cmp	r3, #117	; 0x75
 8000c20:	d90c      	bls.n	8000c3c <TFT_WriteStringPosWithBgColor+0x3c>
		{
			ColCounter =0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	75bb      	strb	r3, [r7, #22]
			RowCounter++;
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	75fb      	strb	r3, [r7, #23]

			if(*str == ' ')
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b20      	cmp	r3, #32
 8000c32:	d103      	bne.n	8000c3c <TFT_WriteStringPosWithBgColor+0x3c>
			{
				str++;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3301      	adds	r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
				continue;
 8000c3a:	e016      	b.n	8000c6a <TFT_WriteStringPosWithBgColor+0x6a>
			}
		}
		if(RowCounter + TFT_FONT_HEIGHT > TFT_HEIGHT)
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	2b8e      	cmp	r3, #142	; 0x8e
 8000c40:	d818      	bhi.n	8000c74 <TFT_WriteStringPosWithBgColor+0x74>
		{
			break;
		}
		TFT_WriteCharPosWithBgColor(TFT_Config,RowCounter,ColCounter,*str,color,bgcolor);
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	b299      	uxth	r1, r3
 8000c46:	7dbb      	ldrb	r3, [r7, #22]
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7818      	ldrb	r0, [r3, #0]
 8000c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	8c3b      	ldrh	r3, [r7, #32]
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	4603      	mov	r3, r0
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff ff2b 	bl	8000ab4 <TFT_WriteCharPosWithBgColor>
		ColCounter++;
 8000c5e:	7dbb      	ldrb	r3, [r7, #22]
 8000c60:	3301      	adds	r3, #1
 8000c62:	75bb      	strb	r3, [r7, #22]
		str++;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3301      	adds	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
	while(*str)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1d4      	bne.n	8000c1c <TFT_WriteStringPosWithBgColor+0x1c>
	}
}
 8000c72:	e000      	b.n	8000c76 <TFT_WriteStringPosWithBgColor+0x76>
			break;
 8000c74:	bf00      	nop
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <TFT_FillScreen>:
		str++;
	}
}

void TFT_FillScreen(TFT_t* TFT_Config, u16 color)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af02      	add	r7, sp, #8
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	807b      	strh	r3, [r7, #2]
	u16 Local_RowCounter = ZERO_INIT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	81fb      	strh	r3, [r7, #14]
	u16 Local_ColCounter = ZERO_INIT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	81bb      	strh	r3, [r7, #12]
	u8 color_arr[2]={color>>8,(u8)color};
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	723b      	strb	r3, [r7, #8]
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	727b      	strb	r3, [r7, #9]
	TFT_voidSetWindow(TFT_Config,0,TFT_WIDTH-1,0,TFT_HEIGHT-1);
 8000ca2:	239f      	movs	r3, #159	; 0x9f
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	227f      	movs	r2, #127	; 0x7f
 8000caa:	2100      	movs	r1, #0
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff febf 	bl	8000a30 <TFT_voidSetWindow>
	GPIO_voidSetPinValue(TFT_Config->TFT_DC_Port,TFT_Config->TFT_DC_Pin, GPIO_HIGH);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f000 fd79 	bl	80017b8 <GPIO_voidSetPinValue>
	for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_HEIGHT; Local_RowCounter++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	81fb      	strh	r3, [r7, #14]
 8000cca:	e012      	b.n	8000cf2 <TFT_FillScreen+0x74>
	{
		for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_WIDTH; Local_ColCounter++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	81bb      	strh	r3, [r7, #12]
 8000cd0:	e009      	b.n	8000ce6 <TFT_FillScreen+0x68>
		{
			MSPI_DMA_Transmit(&TFT_Config->TFT_SPI_Config, color_arr,2);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f107 0108 	add.w	r1, r7, #8
 8000cd8:	2202      	movs	r2, #2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 f816 	bl	8001d0c <MSPI_DMA_Transmit>
		for(Local_ColCounter = ZERO_INIT; Local_ColCounter < TFT_WIDTH; Local_ColCounter++)
 8000ce0:	89bb      	ldrh	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	81bb      	strh	r3, [r7, #12]
 8000ce6:	89bb      	ldrh	r3, [r7, #12]
 8000ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cea:	d9f2      	bls.n	8000cd2 <TFT_FillScreen+0x54>
	for(Local_RowCounter = ZERO_INIT; Local_RowCounter < TFT_HEIGHT; Local_RowCounter++)
 8000cec:	89fb      	ldrh	r3, [r7, #14]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	81fb      	strh	r3, [r7, #14]
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	2b9f      	cmp	r3, #159	; 0x9f
 8000cf6:	d9e9      	bls.n	8000ccc <TFT_FillScreen+0x4e>
		}
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <TFT_ClearScreen>:

void TFT_ClearScreen(TFT_t* TFT_Config)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	TFT_Config->TFT_Col_Loc = ZERO_INIT;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	TFT_Config->TFT_Row_Loc = ZERO_INIT;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	TFT_FillScreen(TFT_Config, TFT_Config->TFT_InitColor);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ffaa 	bl	8000c7e <TFT_FillScreen>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <DMA_ClearTCInterruptFlag>:
/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************
*********************************************************************************************************************/
static void DMA_ClearTCInterruptFlag(DMA_Config_t* DMA_Config)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	if(DMA_Config->Stream == DMA_STREAM_0)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d108      	bne.n	8000d54 <DMA_ClearTCInterruptFlag+0x22>
	{
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF0_BIT_POS);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	609a      	str	r2, [r3, #8]
	}
	else if (DMA_Config->Stream == DMA_STREAM_7)
	{
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF7_BIT_POS);
	}
}
 8000d52:	e059      	b.n	8000e08 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d108      	bne.n	8000d6e <DMA_ClearTCInterruptFlag+0x3c>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF1_BIT_POS);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d6a:	609a      	str	r2, [r3, #8]
}
 8000d6c:	e04c      	b.n	8000e08 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_2)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d108      	bne.n	8000d88 <DMA_ClearTCInterruptFlag+0x56>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF2_BIT_POS);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000d84:	609a      	str	r2, [r3, #8]
}
 8000d86:	e03f      	b.n	8000e08 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_3)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d108      	bne.n	8000da2 <DMA_ClearTCInterruptFlag+0x70>
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF3_BIT_POS);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000d9e:	609a      	str	r2, [r3, #8]
}
 8000da0:	e032      	b.n	8000e08 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_4)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d108      	bne.n	8000dbc <DMA_ClearTCInterruptFlag+0x8a>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF4_BIT_POS);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f042 0220 	orr.w	r2, r2, #32
 8000db8:	60da      	str	r2, [r3, #12]
}
 8000dba:	e025      	b.n	8000e08 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_5)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d108      	bne.n	8000dd6 <DMA_ClearTCInterruptFlag+0xa4>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF5_BIT_POS);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dd2:	60da      	str	r2, [r3, #12]
}
 8000dd4:	e018      	b.n	8000e08 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_6)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d108      	bne.n	8000df0 <DMA_ClearTCInterruptFlag+0xbe>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF6_BIT_POS);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000dec:	60da      	str	r2, [r3, #12]
}
 8000dee:	e00b      	b.n	8000e08 <DMA_ClearTCInterruptFlag+0xd6>
	else if (DMA_Config->Stream == DMA_STREAM_7)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b07      	cmp	r3, #7
 8000df6:	d107      	bne.n	8000e08 <DMA_ClearTCInterruptFlag+0xd6>
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF7_BIT_POS);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000e06:	60da      	str	r2, [r3, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DMA_Interrupt_Init>:
static void DMA_Interrupt_Init(DMA_Config_t* DMA_Config)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	if(DMA_Config->Instance ==  DMA1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <DMA_Interrupt_Init+0xdc>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d11c      	bne.n	8000e60 <DMA_Interrupt_Init+0x4c>
	{
		if(DMA_Config->Stream <=6)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d809      	bhi.n	8000e42 <DMA_Interrupt_Init+0x2e>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 11);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	330b      	adds	r3, #11
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fd22 	bl	8001884 <MNVIC_voidEnableIRQ>
 8000e40:	e006      	b.n	8000e50 <DMA_Interrupt_Init+0x3c>
		}
		else if (DMA_Config->Stream == 7 )
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	d102      	bne.n	8000e50 <DMA_Interrupt_Init+0x3c>
		{
			MNVIC_voidEnableIRQ(DMA1_Stream7_IRQn);
 8000e4a:	202f      	movs	r0, #47	; 0x2f
 8000e4c:	f000 fd1a 	bl	8001884 <MNVIC_voidEnableIRQ>
		}
		DMA1_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e58:	4926      	ldr	r1, [pc, #152]	; (8000ef4 <DMA_Interrupt_Init+0xe0>)
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000e5e:	e02a      	b.n	8000eb6 <DMA_Interrupt_Init+0xa2>
	}
	else if (DMA_Config->Instance == DMA2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a24      	ldr	r2, [pc, #144]	; (8000ef8 <DMA_Interrupt_Init+0xe4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d125      	bne.n	8000eb6 <DMA_Interrupt_Init+0xa2>
	{
		if(DMA_Config->Stream <=4)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d809      	bhi.n	8000e86 <DMA_Interrupt_Init+0x72>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 56);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	3338      	adds	r3, #56	; 0x38
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fd00 	bl	8001884 <MNVIC_voidEnableIRQ>
 8000e84:	e010      	b.n	8000ea8 <DMA_Interrupt_Init+0x94>
		}
		else if ((DMA_Config->Stream > 4) && (DMA_Config->Stream <= 7 ))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d90c      	bls.n	8000ea8 <DMA_Interrupt_Init+0x94>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b07      	cmp	r3, #7
 8000e94:	d808      	bhi.n	8000ea8 <DMA_Interrupt_Init+0x94>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 68);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	3344      	adds	r3, #68	; 0x44
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fcee 	bl	8001884 <MNVIC_voidEnableIRQ>
		}
		DMA2_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000eb0:	4912      	ldr	r1, [pc, #72]	; (8000efc <DMA_Interrupt_Init+0xe8>)
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	else
	{
		/* Nothing */
	}
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR,DMA_TCIE_BIT_POS);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6819      	ldr	r1, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3310      	adds	r3, #16
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6810      	ldr	r0, [r2, #0]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6852      	ldr	r2, [r2, #4]
 8000ed4:	f043 0110 	orr.w	r1, r3, #16
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4403      	add	r3, r0
 8000ee2:	3310      	adds	r3, #16
 8000ee4:	6019      	str	r1, [r3, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40026000 	.word	0x40026000
 8000ef4:	20000088 	.word	0x20000088
 8000ef8:	40026400 	.word	0x40026400
 8000efc:	200000a8 	.word	0x200000a8

08000f00 <MDMA_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void MDMA_voidInit(DMA_Config_t* DMA_Config)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	/* Enable DMA Clock */
	if(DMA_Config->Instance ==  DMA1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <MDMA_voidInit+0xa0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d104      	bne.n	8000f1c <MDMA_voidInit+0x1c>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA1EN);
 8000f12:	2115      	movs	r1, #21
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 fd4b 	bl	80019b0 <RCC_voidEnablePeripheralClock>
 8000f1a:	e008      	b.n	8000f2e <MDMA_voidInit+0x2e>
	}
	else if (DMA_Config->Instance == DMA2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <MDMA_voidInit+0xa4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d103      	bne.n	8000f2e <MDMA_voidInit+0x2e>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA2EN);
 8000f26:	2116      	movs	r1, #22
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 fd41 	bl	80019b0 <RCC_voidEnablePeripheralClock>
	else
	{
		/* Nothing */
	}
	/* Clear DMA stream pervious configuration */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6819      	ldr	r1, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3310      	adds	r3, #16
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
	/* Clear DMA TC interrupt Flag */
	DMA_ClearTCInterruptFlag(DMA_Config);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fef3 	bl	8000d32 <DMA_ClearTCInterruptFlag>
	/* Configure DMA Stream */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
			((DMA_Config->Channel) |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689a      	ldr	r2, [r3, #8]
			(DMA_Config->Direction) |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
			((DMA_Config->Channel) |
 8000f54:	431a      	orrs	r2, r3
			(DMA_Config->PeriphInc) |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
			(DMA_Config->Direction) |
 8000f5a:	431a      	orrs	r2, r3
			(DMA_Config->MemInc) |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
			(DMA_Config->PeriphInc) |
 8000f60:	431a      	orrs	r2, r3
			(DMA_Config->PeriphDataSize) |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
			(DMA_Config->MemInc) |
 8000f66:	ea42 0103 	orr.w	r1, r2, r3
			(DMA_Config->MemDataSize) );
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6810      	ldr	r0, [r2, #0]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6852      	ldr	r2, [r2, #4]
			(DMA_Config->PeriphDataSize) |
 8000f76:	4319      	orrs	r1, r3
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4403      	add	r3, r0
 8000f82:	3310      	adds	r3, #16
 8000f84:	6019      	str	r1, [r3, #0]
	if(DMA_Config->DMA_TC_InterruptEnable == INTERRUPT_ENABLED)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d102      	bne.n	8000f96 <MDMA_voidInit+0x96>
	{
		DMA_Interrupt_Init(DMA_Config);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff3f 	bl	8000e14 <DMA_Interrupt_Init>
	}
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40026000 	.word	0x40026000
 8000fa4:	40026400 	.word	0x40026400

08000fa8 <MDMA_voidStart>:
void MDMA_voidStart(DMA_Config_t* DMA_Config , u32* PeriphAddr , u32* MemAddr , u32 DataLength)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	CLR_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6819      	ldr	r1, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3310      	adds	r3, #16
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	6810      	ldr	r0, [r2, #0]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	6852      	ldr	r2, [r2, #4]
 8000fd4:	f023 0101 	bic.w	r1, r3, #1
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	4403      	add	r3, r0
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].NDTR = DataLength;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6819      	ldr	r1, [r3, #0]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3314      	adds	r3, #20
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	601a      	str	r2, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].PAR = (u32)PeriphAddr;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	4403      	add	r3, r0
 8001014:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].M0AR = (u32)MemAddr;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4403      	add	r3, r0
 800102c:	3304      	adds	r3, #4
 800102e:	6019      	str	r1, [r3, #0]
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6819      	ldr	r1, [r3, #0]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	3310      	adds	r3, #16
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	6810      	ldr	r0, [r2, #0]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	6852      	ldr	r2, [r2, #4]
 800104e:	f043 0101 	orr.w	r1, r3, #1
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4403      	add	r3, r0
 800105c:	3310      	adds	r3, #16
 800105e:	6019      	str	r1, [r3, #0]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DMA1_Stream0_IRQHandler>:

/************************************* DMA1 ISRs************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF0_BIT_POS);
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <DMA1_Stream0_IRQHandler+0x24>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <DMA1_Stream0_IRQHandler+0x24>)
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[0] != NULL)
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <DMA1_Stream0_IRQHandler+0x28>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <DMA1_Stream0_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[0]();
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <DMA1_Stream0_IRQHandler+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4798      	blx	r3
	}
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40026000 	.word	0x40026000
 8001094:	20000088 	.word	0x20000088

08001098 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF1_BIT_POS);
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <DMA1_Stream1_IRQHandler+0x24>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <DMA1_Stream1_IRQHandler+0x24>)
 80010a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a6:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[1] != NULL)
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <DMA1_Stream1_IRQHandler+0x28>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <DMA1_Stream1_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[1]();
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <DMA1_Stream1_IRQHandler+0x28>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4798      	blx	r3
	}
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40026000 	.word	0x40026000
 80010c0:	20000088 	.word	0x20000088

080010c4 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF2_BIT_POS);
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <DMA1_Stream2_IRQHandler+0x24>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <DMA1_Stream2_IRQHandler+0x24>)
 80010ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d2:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[2] != NULL)
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <DMA1_Stream2_IRQHandler+0x28>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <DMA1_Stream2_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[2]();
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <DMA1_Stream2_IRQHandler+0x28>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4798      	blx	r3
	}
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40026000 	.word	0x40026000
 80010ec:	20000088 	.word	0x20000088

080010f0 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF3_BIT_POS);
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <DMA1_Stream3_IRQHandler+0x24>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <DMA1_Stream3_IRQHandler+0x24>)
 80010fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010fe:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[3] != NULL)
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <DMA1_Stream3_IRQHandler+0x28>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <DMA1_Stream3_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[3]();
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <DMA1_Stream3_IRQHandler+0x28>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4798      	blx	r3
	}
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40026000 	.word	0x40026000
 8001118:	20000088 	.word	0x20000088

0800111c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void){
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF4_BIT_POS);
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <DMA1_Stream4_IRQHandler+0x24>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <DMA1_Stream4_IRQHandler+0x24>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[4] != NULL)
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <DMA1_Stream4_IRQHandler+0x28>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <DMA1_Stream4_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[4]();
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <DMA1_Stream4_IRQHandler+0x28>)
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	4798      	blx	r3
	}
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40026000 	.word	0x40026000
 8001144:	20000088 	.word	0x20000088

08001148 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF5_BIT_POS);
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <DMA1_Stream5_IRQHandler+0x24>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <DMA1_Stream5_IRQHandler+0x24>)
 8001152:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001156:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[5] != NULL)
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <DMA1_Stream5_IRQHandler+0x28>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <DMA1_Stream5_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[5]();
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <DMA1_Stream5_IRQHandler+0x28>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4798      	blx	r3
	}
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40026000 	.word	0x40026000
 8001170:	20000088 	.word	0x20000088

08001174 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF6_BIT_POS);
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <DMA1_Stream6_IRQHandler+0x24>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <DMA1_Stream6_IRQHandler+0x24>)
 800117e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001182:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[6] != NULL)
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <DMA1_Stream6_IRQHandler+0x28>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <DMA1_Stream6_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[6]();
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <DMA1_Stream6_IRQHandler+0x28>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4798      	blx	r3
	}
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40026000 	.word	0x40026000
 800119c:	20000088 	.word	0x20000088

080011a0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF7_BIT_POS);
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <DMA1_Stream7_IRQHandler+0x24>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <DMA1_Stream7_IRQHandler+0x24>)
 80011aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011ae:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[7] != NULL)
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <DMA1_Stream7_IRQHandler+0x28>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <DMA1_Stream7_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[7]();
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <DMA1_Stream7_IRQHandler+0x28>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	4798      	blx	r3
	}
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40026000 	.word	0x40026000
 80011c8:	20000088 	.word	0x20000088

080011cc <DMA2_Stream0_IRQHandler>:

/************************************* DMA2 ISRs************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF0_BIT_POS);
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <DMA2_Stream0_IRQHandler+0x24>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <DMA2_Stream0_IRQHandler+0x24>)
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[0] != NULL)
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <DMA2_Stream0_IRQHandler+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <DMA2_Stream0_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[0]();
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <DMA2_Stream0_IRQHandler+0x28>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4798      	blx	r3
	}
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40026400 	.word	0x40026400
 80011f4:	200000a8 	.word	0x200000a8

080011f8 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF1_BIT_POS);
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <DMA2_Stream1_IRQHandler+0x24>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <DMA2_Stream1_IRQHandler+0x24>)
 8001202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001206:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[1] != NULL)
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <DMA2_Stream1_IRQHandler+0x28>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <DMA2_Stream1_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[1]();
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <DMA2_Stream1_IRQHandler+0x28>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4798      	blx	r3
	}
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40026400 	.word	0x40026400
 8001220:	200000a8 	.word	0x200000a8

08001224 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF2_BIT_POS);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <DMA2_Stream2_IRQHandler+0x24>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <DMA2_Stream2_IRQHandler+0x24>)
 800122e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001232:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[2] != NULL)
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <DMA2_Stream2_IRQHandler+0x28>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <DMA2_Stream2_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[2]();
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <DMA2_Stream2_IRQHandler+0x28>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4798      	blx	r3
	}
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40026400 	.word	0x40026400
 800124c:	200000a8 	.word	0x200000a8

08001250 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF3_BIT_POS);
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <DMA2_Stream3_IRQHandler+0x24>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <DMA2_Stream3_IRQHandler+0x24>)
 800125a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800125e:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[3] != NULL)
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <DMA2_Stream3_IRQHandler+0x28>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <DMA2_Stream3_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[3]();
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <DMA2_Stream3_IRQHandler+0x28>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4798      	blx	r3
	}
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40026400 	.word	0x40026400
 8001278:	200000a8 	.word	0x200000a8

0800127c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF4_BIT_POS);
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <DMA2_Stream4_IRQHandler+0x24>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <DMA2_Stream4_IRQHandler+0x24>)
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[4] != NULL)
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <DMA2_Stream4_IRQHandler+0x28>)
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <DMA2_Stream4_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[4]();
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <DMA2_Stream4_IRQHandler+0x28>)
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4798      	blx	r3
	}
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40026400 	.word	0x40026400
 80012a4:	200000a8 	.word	0x200000a8

080012a8 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF5_BIT_POS);
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <DMA2_Stream5_IRQHandler+0x24>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <DMA2_Stream5_IRQHandler+0x24>)
 80012b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012b6:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[5] != NULL)
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <DMA2_Stream5_IRQHandler+0x28>)
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <DMA2_Stream5_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[5]();
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <DMA2_Stream5_IRQHandler+0x28>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	4798      	blx	r3
	}
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40026400 	.word	0x40026400
 80012d0:	200000a8 	.word	0x200000a8

080012d4 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF6_BIT_POS);
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <DMA2_Stream6_IRQHandler+0x24>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <DMA2_Stream6_IRQHandler+0x24>)
 80012de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e2:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[6] != NULL)
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <DMA2_Stream6_IRQHandler+0x28>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <DMA2_Stream6_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[6]();
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <DMA2_Stream6_IRQHandler+0x28>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4798      	blx	r3
	}
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40026400 	.word	0x40026400
 80012fc:	200000a8 	.word	0x200000a8

08001300 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF7_BIT_POS);
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <DMA2_Stream7_IRQHandler+0x24>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <DMA2_Stream7_IRQHandler+0x24>)
 800130a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800130e:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[7] != NULL)
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <DMA2_Stream7_IRQHandler+0x28>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <DMA2_Stream7_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[7]();
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <DMA2_Stream7_IRQHandler+0x28>)
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	4798      	blx	r3
	}
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40026400 	.word	0x40026400
 8001328:	200000a8 	.word	0x200000a8

0800132c <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MEXTI_voidClearPendingFlag+0x2c>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	2101      	movs	r1, #1
 800133e:	fa01 f202 	lsl.w	r2, r1, r2
 8001342:	4611      	mov	r1, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <MEXTI_voidClearPendingFlag+0x2c>)
 8001346:	430b      	orrs	r3, r1
 8001348:	6153      	str	r3, [r2, #20]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40013c00 	.word	0x40013c00

0800135c <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <MEXTI_u8GetPendingFlag+0x28>)
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40013c00 	.word	0x40013c00

08001388 <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <EXTI0_IRQHandler+0x1c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <EXTI0_IRQHandler+0x1c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff ffc6 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200000c8 	.word	0x200000c8

080013a8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <EXTI1_IRQHandler+0x1c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <EXTI1_IRQHandler+0x1c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff ffb6 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200000c8 	.word	0x200000c8

080013c8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <EXTI2_IRQHandler+0x1c>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <EXTI2_IRQHandler+0x1c>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 80013da:	2002      	movs	r0, #2
 80013dc:	f7ff ffa6 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000c8 	.word	0x200000c8

080013e8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <EXTI3_IRQHandler+0x1c>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <EXTI3_IRQHandler+0x1c>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 80013fa:	2003      	movs	r0, #3
 80013fc:	f7ff ff96 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200000c8 	.word	0x200000c8

08001408 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <EXTI4_IRQHandler+0x1c>)
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <EXTI4_IRQHandler+0x1c>)
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 800141a:	2004      	movs	r0, #4
 800141c:	f7ff ff86 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200000c8 	.word	0x200000c8

08001428 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 800142c:	2005      	movs	r0, #5
 800142e:	f7ff ff95 	bl	800135c <MEXTI_u8GetPendingFlag>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00a      	beq.n	800144e <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 8001446:	2005      	movs	r0, #5
 8001448:	f7ff ff70 	bl	800132c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 800144c:	e042      	b.n	80014d4 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 800144e:	2006      	movs	r0, #6
 8001450:	f7ff ff84 	bl	800135c <MEXTI_u8GetPendingFlag>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00a      	beq.n	8001470 <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 8001468:	2006      	movs	r0, #6
 800146a:	f7ff ff5f 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 800146e:	e031      	b.n	80014d4 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 8001470:	2007      	movs	r0, #7
 8001472:	f7ff ff73 	bl	800135c <MEXTI_u8GetPendingFlag>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00a      	beq.n	8001492 <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 800148a:	2007      	movs	r0, #7
 800148c:	f7ff ff4e 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 8001490:	e020      	b.n	80014d4 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 8001492:	2008      	movs	r0, #8
 8001494:	f7ff ff62 	bl	800135c <MEXTI_u8GetPendingFlag>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00a      	beq.n	80014b4 <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 80014ac:	2008      	movs	r0, #8
 80014ae:	f7ff ff3d 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 80014b2:	e00f      	b.n	80014d4 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 80014b4:	2009      	movs	r0, #9
 80014b6:	f7ff ff51 	bl	800135c <MEXTI_u8GetPendingFlag>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d009      	beq.n	80014d4 <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <EXTI9_5_IRQHandler+0xb0>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 80014ce:	2009      	movs	r0, #9
 80014d0:	f7ff ff2c 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200000c8 	.word	0x200000c8

080014dc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 80014e0:	200a      	movs	r0, #10
 80014e2:	f7ff ff3b 	bl	800135c <MEXTI_u8GetPendingFlag>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00a      	beq.n	8001502 <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 80014fa:	200a      	movs	r0, #10
 80014fc:	f7ff ff16 	bl	800132c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 8001500:	e053      	b.n	80015aa <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 8001502:	200b      	movs	r0, #11
 8001504:	f7ff ff2a 	bl	800135c <MEXTI_u8GetPendingFlag>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00a      	beq.n	8001524 <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 800150e:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 800151c:	200b      	movs	r0, #11
 800151e:	f7ff ff05 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 8001522:	e042      	b.n	80015aa <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 8001524:	200c      	movs	r0, #12
 8001526:	f7ff ff19 	bl	800135c <MEXTI_u8GetPendingFlag>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00a      	beq.n	8001546 <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 800153e:	200c      	movs	r0, #12
 8001540:	f7ff fef4 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 8001544:	e031      	b.n	80015aa <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 8001546:	200d      	movs	r0, #13
 8001548:	f7ff ff08 	bl	800135c <MEXTI_u8GetPendingFlag>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00a      	beq.n	8001568 <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 8001554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 800155c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 8001560:	200d      	movs	r0, #13
 8001562:	f7ff fee3 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 8001566:	e020      	b.n	80015aa <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 8001568:	200e      	movs	r0, #14
 800156a:	f7ff fef7 	bl	800135c <MEXTI_u8GetPendingFlag>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00a      	beq.n	800158a <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 8001576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 800157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001580:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 8001582:	200e      	movs	r0, #14
 8001584:	f7ff fed2 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 8001588:	e00f      	b.n	80015aa <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff fee6 	bl	800135c <MEXTI_u8GetPendingFlag>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 8001598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <EXTI15_10_IRQHandler+0xd4>)
 80015a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a2:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 80015a4:	200f      	movs	r0, #15
 80015a6:	f7ff fec1 	bl	800132c <MEXTI_voidClearPendingFlag>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000c8 	.word	0x200000c8

080015b4 <GPIO_voidSetPinMode>:
#include"../../../Inc/MCAL/GPIO/GPIO_config.h"
#include"../../../Inc/MCAL/GPIO/GPIO_interface.h"
#include"../../../Inc/MCAL/GPIO/GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
 80015be:	460b      	mov	r3, r1
 80015c0:	71bb      	strb	r3, [r7, #6]
 80015c2:	4613      	mov	r3, r2
 80015c4:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d02c      	beq.n	8001626 <GPIO_voidSetPinMode+0x72>
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	dc3d      	bgt.n	800164c <GPIO_voidSetPinMode+0x98>
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <GPIO_voidSetPinMode+0x26>
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d013      	beq.n	8001600 <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 80015d8:	e038      	b.n	800164c <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <GPIO_voidSetPinMode+0xa8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	79ba      	ldrb	r2, [r7, #6]
 80015e0:	0052      	lsls	r2, r2, #1
 80015e2:	2103      	movs	r1, #3
 80015e4:	fa01 f202 	lsl.w	r2, r1, r2
 80015e8:	43d2      	mvns	r2, r2
 80015ea:	4013      	ands	r3, r2
 80015ec:	7979      	ldrb	r1, [r7, #5]
 80015ee:	79ba      	ldrb	r2, [r7, #6]
 80015f0:	0052      	lsls	r2, r2, #1
 80015f2:	fa01 f202 	lsl.w	r2, r1, r2
 80015f6:	4611      	mov	r1, r2
 80015f8:	4a18      	ldr	r2, [pc, #96]	; (800165c <GPIO_voidSetPinMode+0xa8>)
 80015fa:	430b      	orrs	r3, r1
 80015fc:	6013      	str	r3, [r2, #0]
      break;
 80015fe:	e026      	b.n	800164e <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <GPIO_voidSetPinMode+0xac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	79ba      	ldrb	r2, [r7, #6]
 8001606:	0052      	lsls	r2, r2, #1
 8001608:	2103      	movs	r1, #3
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	43d2      	mvns	r2, r2
 8001610:	4013      	ands	r3, r2
 8001612:	7979      	ldrb	r1, [r7, #5]
 8001614:	79ba      	ldrb	r2, [r7, #6]
 8001616:	0052      	lsls	r2, r2, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	4611      	mov	r1, r2
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <GPIO_voidSetPinMode+0xac>)
 8001620:	430b      	orrs	r3, r1
 8001622:	6013      	str	r3, [r2, #0]
      break;
 8001624:	e013      	b.n	800164e <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <GPIO_voidSetPinMode+0xb0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	79ba      	ldrb	r2, [r7, #6]
 800162c:	0052      	lsls	r2, r2, #1
 800162e:	2103      	movs	r1, #3
 8001630:	fa01 f202 	lsl.w	r2, r1, r2
 8001634:	43d2      	mvns	r2, r2
 8001636:	4013      	ands	r3, r2
 8001638:	7979      	ldrb	r1, [r7, #5]
 800163a:	79ba      	ldrb	r2, [r7, #6]
 800163c:	0052      	lsls	r2, r2, #1
 800163e:	fa01 f202 	lsl.w	r2, r1, r2
 8001642:	4611      	mov	r1, r2
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <GPIO_voidSetPinMode+0xb0>)
 8001646:	430b      	orrs	r3, r1
 8001648:	6013      	str	r3, [r2, #0]
      break;
 800164a:	e000      	b.n	800164e <GPIO_voidSetPinMode+0x9a>
      break;
 800164c:	bf00      	nop
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800

08001668 <GPIO_voidSetPinAlternateFunction>:
    default:
      break;
  }
}
void GPIO_voidSetPinAlternateFunction(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex, u8 Copy_u8AlternateFunction)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	460b      	mov	r3, r1
 8001674:	71bb      	strb	r3, [r7, #6]
 8001676:	4613      	mov	r3, r2
 8001678:	717b      	strb	r3, [r7, #5]
	switch (Copy_PortIndex) {
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d05d      	beq.n	800173c <GPIO_voidSetPinAlternateFunction+0xd4>
 8001680:	2b02      	cmp	r3, #2
 8001682:	f300 8086 	bgt.w	8001792 <GPIO_voidSetPinAlternateFunction+0x12a>
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <GPIO_voidSetPinAlternateFunction+0x28>
 800168a:	2b01      	cmp	r3, #1
 800168c:	d02b      	beq.n	80016e6 <GPIO_voidSetPinAlternateFunction+0x7e>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
	    				Copy_u8AlternateFunction << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS);
	    	}
	      break;
	    default:
	      break;
 800168e:	e080      	b.n	8001792 <GPIO_voidSetPinAlternateFunction+0x12a>
             if(Copy_PinIndex < 8)
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	2b07      	cmp	r3, #7
 8001694:	d812      	bhi.n	80016bc <GPIO_voidSetPinAlternateFunction+0x54>
            	 MODIFY_REG(GPIOA_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 8001696:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <GPIO_voidSetPinAlternateFunction+0x138>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	79ba      	ldrb	r2, [r7, #6]
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	210f      	movs	r1, #15
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	43d2      	mvns	r2, r2
 80016a6:	4013      	ands	r3, r2
 80016a8:	7979      	ldrb	r1, [r7, #5]
 80016aa:	79ba      	ldrb	r2, [r7, #6]
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	fa01 f202 	lsl.w	r2, r1, r2
 80016b2:	4611      	mov	r1, r2
 80016b4:	4a3a      	ldr	r2, [pc, #232]	; (80017a0 <GPIO_voidSetPinAlternateFunction+0x138>)
 80016b6:	430b      	orrs	r3, r1
 80016b8:	6013      	str	r3, [r2, #0]
	      break;
 80016ba:	e06b      	b.n	8001794 <GPIO_voidSetPinAlternateFunction+0x12c>
            	 MODIFY_REG(GPIOA_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 80016bc:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <GPIO_voidSetPinAlternateFunction+0x13c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	79ba      	ldrb	r2, [r7, #6]
 80016c2:	3a08      	subs	r2, #8
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	210f      	movs	r1, #15
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	43d2      	mvns	r2, r2
 80016ce:	4013      	ands	r3, r2
 80016d0:	7979      	ldrb	r1, [r7, #5]
 80016d2:	79ba      	ldrb	r2, [r7, #6]
 80016d4:	3a08      	subs	r2, #8
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	4611      	mov	r1, r2
 80016de:	4a31      	ldr	r2, [pc, #196]	; (80017a4 <GPIO_voidSetPinAlternateFunction+0x13c>)
 80016e0:	430b      	orrs	r3, r1
 80016e2:	6013      	str	r3, [r2, #0]
	      break;
 80016e4:	e056      	b.n	8001794 <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	2b07      	cmp	r3, #7
 80016ea:	d812      	bhi.n	8001712 <GPIO_voidSetPinAlternateFunction+0xaa>
	    		MODIFY_REG(GPIOB_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <GPIO_voidSetPinAlternateFunction+0x140>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	79ba      	ldrb	r2, [r7, #6]
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	210f      	movs	r1, #15
 80016f6:	fa01 f202 	lsl.w	r2, r1, r2
 80016fa:	43d2      	mvns	r2, r2
 80016fc:	4013      	ands	r3, r2
 80016fe:	7979      	ldrb	r1, [r7, #5]
 8001700:	79ba      	ldrb	r2, [r7, #6]
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	fa01 f202 	lsl.w	r2, r1, r2
 8001708:	4611      	mov	r1, r2
 800170a:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <GPIO_voidSetPinAlternateFunction+0x140>)
 800170c:	430b      	orrs	r3, r1
 800170e:	6013      	str	r3, [r2, #0]
	      break;
 8001710:	e040      	b.n	8001794 <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOB_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <GPIO_voidSetPinAlternateFunction+0x144>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	79ba      	ldrb	r2, [r7, #6]
 8001718:	3a08      	subs	r2, #8
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	210f      	movs	r1, #15
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	43d2      	mvns	r2, r2
 8001724:	4013      	ands	r3, r2
 8001726:	7979      	ldrb	r1, [r7, #5]
 8001728:	79ba      	ldrb	r2, [r7, #6]
 800172a:	3a08      	subs	r2, #8
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	fa01 f202 	lsl.w	r2, r1, r2
 8001732:	4611      	mov	r1, r2
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <GPIO_voidSetPinAlternateFunction+0x144>)
 8001736:	430b      	orrs	r3, r1
 8001738:	6013      	str	r3, [r2, #0]
	      break;
 800173a:	e02b      	b.n	8001794 <GPIO_voidSetPinAlternateFunction+0x12c>
	    	if(Copy_PinIndex < 8)
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	2b07      	cmp	r3, #7
 8001740:	d812      	bhi.n	8001768 <GPIO_voidSetPinAlternateFunction+0x100>
	    		MODIFY_REG(GPIOC_AFRL, GPIO_AF_CLEAR_MASK << Copy_PinIndex * GPIO_AF_PIN_BITS,
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <GPIO_voidSetPinAlternateFunction+0x148>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	79ba      	ldrb	r2, [r7, #6]
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	210f      	movs	r1, #15
 800174c:	fa01 f202 	lsl.w	r2, r1, r2
 8001750:	43d2      	mvns	r2, r2
 8001752:	4013      	ands	r3, r2
 8001754:	7979      	ldrb	r1, [r7, #5]
 8001756:	79ba      	ldrb	r2, [r7, #6]
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	4611      	mov	r1, r2
 8001760:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <GPIO_voidSetPinAlternateFunction+0x148>)
 8001762:	430b      	orrs	r3, r1
 8001764:	6013      	str	r3, [r2, #0]
	      break;
 8001766:	e015      	b.n	8001794 <GPIO_voidSetPinAlternateFunction+0x12c>
	    		MODIFY_REG(GPIOC_AFRH, GPIO_AF_CLEAR_MASK << (Copy_PinIndex-8) * GPIO_AF_PIN_BITS,
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <GPIO_voidSetPinAlternateFunction+0x14c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	79ba      	ldrb	r2, [r7, #6]
 800176e:	3a08      	subs	r2, #8
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	210f      	movs	r1, #15
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	43d2      	mvns	r2, r2
 800177a:	4013      	ands	r3, r2
 800177c:	7979      	ldrb	r1, [r7, #5]
 800177e:	79ba      	ldrb	r2, [r7, #6]
 8001780:	3a08      	subs	r2, #8
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	4611      	mov	r1, r2
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <GPIO_voidSetPinAlternateFunction+0x14c>)
 800178c:	430b      	orrs	r3, r1
 800178e:	6013      	str	r3, [r2, #0]
	      break;
 8001790:	e000      	b.n	8001794 <GPIO_voidSetPinAlternateFunction+0x12c>
	      break;
 8001792:	bf00      	nop
	  }
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40020020 	.word	0x40020020
 80017a4:	40020024 	.word	0x40020024
 80017a8:	40020420 	.word	0x40020420
 80017ac:	40020424 	.word	0x40020424
 80017b0:	40020820 	.word	0x40020820
 80017b4:	40020824 	.word	0x40020824

080017b8 <GPIO_voidSetPinValue>:
      break;
  }
}
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	460b      	mov	r3, r1
 80017c4:	71bb      	strb	r3, [r7, #6]
 80017c6:	4613      	mov	r3, r2
 80017c8:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d02c      	beq.n	800182a <GPIO_voidSetPinValue+0x72>
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	dc3d      	bgt.n	8001850 <GPIO_voidSetPinValue+0x98>
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <GPIO_voidSetPinValue+0x26>
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d013      	beq.n	8001804 <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 80017dc:	e038      	b.n	8001850 <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 80017de:	797b      	ldrb	r3, [r7, #5]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	2201      	movs	r2, #1
 80017e8:	409a      	lsls	r2, r3
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <GPIO_voidSetPinValue+0xb4>)
 80017ec:	601a      	str	r2, [r3, #0]
      break;
 80017ee:	e031      	b.n	8001854 <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d12e      	bne.n	8001854 <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017fc:	409a      	lsls	r2, r3
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <GPIO_voidSetPinValue+0xb4>)
 8001800:	601a      	str	r2, [r3, #0]
      break;
 8001802:	e027      	b.n	8001854 <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8001804:	797b      	ldrb	r3, [r7, #5]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d105      	bne.n	8001816 <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	2201      	movs	r2, #1
 800180e:	409a      	lsls	r2, r3
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <GPIO_voidSetPinValue+0xb8>)
 8001812:	601a      	str	r2, [r3, #0]
      break;
 8001814:	e020      	b.n	8001858 <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d11d      	bne.n	8001858 <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 800181c:	79bb      	ldrb	r3, [r7, #6]
 800181e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001822:	409a      	lsls	r2, r3
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <GPIO_voidSetPinValue+0xb8>)
 8001826:	601a      	str	r2, [r3, #0]
      break;
 8001828:	e016      	b.n	8001858 <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 800182a:	797b      	ldrb	r3, [r7, #5]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	2201      	movs	r2, #1
 8001834:	409a      	lsls	r2, r3
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <GPIO_voidSetPinValue+0xbc>)
 8001838:	601a      	str	r2, [r3, #0]
      break;
 800183a:	e00f      	b.n	800185c <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 800183c:	797b      	ldrb	r3, [r7, #5]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001848:	409a      	lsls	r2, r3
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <GPIO_voidSetPinValue+0xbc>)
 800184c:	601a      	str	r2, [r3, #0]
      break;
 800184e:	e005      	b.n	800185c <GPIO_voidSetPinValue+0xa4>
      break;
 8001850:	bf00      	nop
 8001852:	e004      	b.n	800185e <GPIO_voidSetPinValue+0xa6>
      break;
 8001854:	bf00      	nop
 8001856:	e002      	b.n	800185e <GPIO_voidSetPinValue+0xa6>
      break;
 8001858:	bf00      	nop
 800185a:	e000      	b.n	800185e <GPIO_voidSetPinValue+0xa6>
      break;
 800185c:	bf00      	nop
  }
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40020018 	.word	0x40020018
 8001870:	40020418 	.word	0x40020418
 8001874:	40020818 	.word	0x40020818

08001878 <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 800187c:	f000 f8d8 	bl	8001a30 <MSCB_voidSetPriorityGrouping>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <MNVIC_voidEnableIRQ>:

void MNVIC_voidEnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <MNVIC_voidEnableIRQ+0x2a>
	{
		NVIC->ISER[((u32)IRQn >> 5)] = (1UL << ((u32)IRQn & 0x1F));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <MNVIC_voidEnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <RCC_void_HSE_Init>:
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
}
static void RCC_void_HSE_Init(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Enable HSE
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <RCC_void_HSE_Init+0x58>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <RCC_void_HSE_Init+0x58>)
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Disable HSI
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <RCC_void_HSE_Init+0x58>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a10      	ldr	r2, [pc, #64]	; (8001918 <RCC_void_HSE_Init+0x58>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <RCC_void_HSE_Init+0x58>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <RCC_void_HSE_Init+0x58>)
 80018e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e6:	6013      	str	r3, [r2, #0]
    while (GET_BIT(RCC_CR,RCC_CR_HSERDY_Pos) == 0);
 80018e8:	bf00      	nop
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <RCC_void_HSE_Init+0x58>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f9      	beq.n	80018ea <RCC_void_HSE_Init+0x2a>
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <RCC_void_HSE_Init+0x5c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <RCC_void_HSE_Init+0x5c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <RCC_void_HSE_Init+0x5c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <RCC_void_HSE_Init+0x5c>)
 8001908:	f023 0302 	bic.w	r3, r3, #2
 800190c:	6013      	str	r3, [r2, #0]
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40023800 	.word	0x40023800
 800191c:	40023808 	.word	0x40023808

08001920 <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <RCC_void_AHB1Prescaler_Init+0x24>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <RCC_void_AHB1Prescaler_Init+0x24>)
 800192a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800192e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_1;
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <RCC_void_AHB1Prescaler_Init+0x24>)
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <RCC_void_AHB1Prescaler_Init+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023808 	.word	0x40023808

08001948 <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <RCC_void_APB1Prescaler_Init+0x24>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a06      	ldr	r2, [pc, #24]	; (800196c <RCC_void_APB1Prescaler_Init+0x24>)
 8001952:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001956:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <RCC_void_APB1Prescaler_Init+0x24>)
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <RCC_void_APB1Prescaler_Init+0x24>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023808 	.word	0x40023808

08001970 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <RCC_void_APB2Prescaler_Init+0x24>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <RCC_void_APB2Prescaler_Init+0x24>)
 800197a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800197e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <RCC_void_APB2Prescaler_Init+0x24>)
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <RCC_void_APB2Prescaler_Init+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023808 	.word	0x40023808

08001998 <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
    #elif RCC_CLOCK_SOURCE == RCC_CLK_HSE
        RCC_void_HSE_Init();
 800199c:	f7ff ff90 	bl	80018c0 <RCC_void_HSE_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 80019a0:	f7ff ffbe 	bl	8001920 <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 80019a4:	f7ff ffd0 	bl	8001948 <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 80019a8:	f7ff ffe2 	bl	8001970 <RCC_void_APB2Prescaler_Init>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d01c      	beq.n	8001a00 <RCC_voidEnablePeripheralClock+0x50>
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	dc25      	bgt.n	8001a16 <RCC_voidEnablePeripheralClock+0x66>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <RCC_voidEnablePeripheralClock+0x24>
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d00b      	beq.n	80019ea <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 80019d2:	e020      	b.n	8001a16 <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <RCC_voidEnablePeripheralClock+0x74>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	79ba      	ldrb	r2, [r7, #6]
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	4611      	mov	r1, r2
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <RCC_voidEnablePeripheralClock+0x74>)
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6013      	str	r3, [r2, #0]
        break;
 80019e8:	e016      	b.n	8001a18 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <RCC_voidEnablePeripheralClock+0x78>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	79ba      	ldrb	r2, [r7, #6]
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	4611      	mov	r1, r2
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <RCC_voidEnablePeripheralClock+0x78>)
 80019fa:	430b      	orrs	r3, r1
 80019fc:	6013      	str	r3, [r2, #0]
        break;
 80019fe:	e00b      	b.n	8001a18 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <RCC_voidEnablePeripheralClock+0x7c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	79ba      	ldrb	r2, [r7, #6]
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <RCC_voidEnablePeripheralClock+0x7c>)
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6013      	str	r3, [r2, #0]
        break;  
 8001a14:	e000      	b.n	8001a18 <RCC_voidEnablePeripheralClock+0x68>
        break;
 8001a16:	bf00      	nop
    }
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40023830 	.word	0x40023830
 8001a28:	40023840 	.word	0x40023840
 8001a2c:	40023844 	.word	0x40023844

08001a30 <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <MSCB_voidSetPriorityGrouping+0x44>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	021a      	lsls	r2, r3, #8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5e:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <MSCB_voidSetPriorityGrouping+0x44>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60d3      	str	r3, [r2, #12]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <MSPI_GPIOInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void MSPI_GPIOInit(const SPI_Config_t* SPIConfig)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d042      	beq.n	8001b0e <MSPI_GPIOInit+0x96>
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	dc5d      	bgt.n	8001b48 <MSPI_GPIOInit+0xd0>
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <MSPI_GPIOInit+0x1e>
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d023      	beq.n	8001adc <MSPI_GPIOInit+0x64>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);

				break;
		}
}
 8001a94:	e058      	b.n	8001b48 <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8001a96:	2100      	movs	r1, #0
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff ff89 	bl	80019b0 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN4, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_NSS_PIN
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fd86 	bl	80015b4 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN4,SPI1_NSS_AF);
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	2104      	movs	r1, #4
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fddb 	bl	8001668 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_SCK_PIN
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	2105      	movs	r1, #5
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fd7c 	bl	80015b4 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN5,SPI1_SCK_AF);
 8001abc:	2205      	movs	r2, #5
 8001abe:	2105      	movs	r1, #5
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff fdd1 	bl	8001668 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN7, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI1_MOSI_PIN
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	2107      	movs	r1, #7
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff fd72 	bl	80015b4 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTA,GPIO_PIN7,SPI1_MOSI_AF);
 8001ad0:	2205      	movs	r2, #5
 8001ad2:	2107      	movs	r1, #7
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff fdc7 	bl	8001668 <GPIO_voidSetPinAlternateFunction>
				break;
 8001ada:	e035      	b.n	8001b48 <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8001adc:	2101      	movs	r1, #1
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff ff66 	bl	80019b0 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN10, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SP2_SCK_PIN
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	210a      	movs	r1, #10
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff fd63 	bl	80015b4 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN10, SPI2_SCK_AF);
 8001aee:	2205      	movs	r2, #5
 8001af0:	210a      	movs	r1, #10
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fdb8 	bl	8001668 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN15, GPIO_ALTERNATE_FUNCTION_PIN_MODE); // SPI2_MOSI_PIN
 8001af8:	2202      	movs	r2, #2
 8001afa:	210f      	movs	r1, #15
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff fd59 	bl	80015b4 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN15, SPI2_MOSI_AF);
 8001b02:	2205      	movs	r2, #5
 8001b04:	210f      	movs	r1, #15
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff fdae 	bl	8001668 <GPIO_voidSetPinAlternateFunction>
				break;
 8001b0c:	e01c      	b.n	8001b48 <MSPI_GPIOInit+0xd0>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff ff4d 	bl	80019b0 <RCC_voidEnablePeripheralClock>
				RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8001b16:	2101      	movs	r1, #1
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff ff49 	bl	80019b0 <RCC_voidEnablePeripheralClock>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN3, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_SCK_PIN
 8001b1e:	2202      	movs	r2, #2
 8001b20:	2103      	movs	r1, #3
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff fd46 	bl	80015b4 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN3, SPI3_SCK_AF);
 8001b28:	2206      	movs	r2, #6
 8001b2a:	2103      	movs	r1, #3
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff fd9b 	bl	8001668 <GPIO_voidSetPinAlternateFunction>
				GPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN5, GPIO_ALTERNATE_FUNCTION_PIN_MODE);  // SPI3_MOSI_PIN
 8001b32:	2202      	movs	r2, #2
 8001b34:	2105      	movs	r1, #5
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fd3c 	bl	80015b4 <GPIO_voidSetPinMode>
				GPIO_voidSetPinAlternateFunction(GPIO_PORTB, GPIO_PIN5, SPI3_MOSI_AF);
 8001b3c:	2206      	movs	r2, #6
 8001b3e:	2105      	movs	r1, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff fd91 	bl	8001668 <GPIO_voidSetPinAlternateFunction>
				break;
 8001b46:	bf00      	nop
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <SPI_Timeout_Handler>:
						break;
				}
	}
#endif
static void SPI_Timeout_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
	SPI_Timeout_Flag=SPI_TIMEOUT;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <SPI_Timeout_Handler+0x14>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20000108 	.word	0x20000108

08001b68 <MSPIx_voidClockEnable>:


static void MSPIx_voidClockEnable(const SPI_Config_t* SPIConfig){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	switch (SPIConfig->SPI_Instance){
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d010      	beq.n	8001b9a <MSPIx_voidClockEnable+0x32>
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	dc13      	bgt.n	8001ba4 <MSPIx_voidClockEnable+0x3c>
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <MSPIx_voidClockEnable+0x1e>
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d005      	beq.n	8001b90 <MSPIx_voidClockEnable+0x28>
		break;
	case SPI3_INSTANCE:
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
		break;
	}
}
 8001b84:	e00e      	b.n	8001ba4 <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB2,RCC_APB2_SPI1EN);
 8001b86:	210c      	movs	r1, #12
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff ff11 	bl	80019b0 <RCC_voidEnablePeripheralClock>
		break;
 8001b8e:	e009      	b.n	8001ba4 <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI2EN);
 8001b90:	210e      	movs	r1, #14
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff ff0c 	bl	80019b0 <RCC_voidEnablePeripheralClock>
		break;
 8001b98:	e004      	b.n	8001ba4 <MSPIx_voidClockEnable+0x3c>
		RCC_voidEnablePeripheralClock(RCC_APB1,RCC_APB1_SPI3EN);
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff ff07 	bl	80019b0 <RCC_voidEnablePeripheralClock>
		break;
 8001ba2:	bf00      	nop
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <MSPI_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MSPI_voidInit(const SPI_Config_t* SPIConfig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	MSPI_GPIOInit(SPIConfig);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff5f 	bl	8001a78 <MSPI_GPIOInit>
	MSPIx_voidClockEnable(SPIConfig);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffd4 	bl	8001b68 <MSPIx_voidClockEnable>
#if (SPI1_TX_INT_ENABLE || SPI2_TX_INT_ENABLE || SPI3_TX_INT_ENABLE ) ||(SPI1_RX_INT_ENABLE || SPI2_RX_INT_ENABLE || SPI3_RX_INT_ENABLE)==(INTERRUPT_ENABLED)
	MSPI_InterruptInit(SPIConfig);
#endif
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	785a      	ldrb	r2, [r3, #1]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	789b      	ldrb	r3, [r3, #2]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	78db      	ldrb	r3, [r3, #3]
			| SPIConfig->SPI_FirstBit | SPIConfig->SPI_BaudRatePrescaler;
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	791b      	ldrb	r3, [r3, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	795b      	ldrb	r3, [r3, #5]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b2da      	uxtb	r2, r3
	SPIx[SPIConfig->SPI_Instance]->CR1 =SPIConfig->SPI_Mode | SPIConfig->SPI_CLKPolarity | SPIConfig->SPI_CLKPhase
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MSPI_voidInit+0x90>)
 8001bec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bf0:	601a      	str	r2, [r3, #0]
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2,SSOE_BIT_POS);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MSPI_voidInit+0x90>)
 8001bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <MSPI_voidInit+0x90>)
 8001c08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c0c:	f042 0204 	orr.w	r2, r2, #4
 8001c10:	605a      	str	r2, [r3, #4]
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR1, SPI_EN_BIT_POS);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MSPI_voidInit+0x90>)
 8001c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <MSPI_voidInit+0x90>)
 8001c28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c30:	601a      	str	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000060 	.word	0x20000060

08001c40 <MSPI_TransmitByte>:
						}
}
#endif

Std_ReturnType MSPI_TransmitByte(SPI_Config_t* SPIConfig , u8 Copy_u8Data , u32 Copy_u32Timeout)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	72fb      	strb	r3, [r7, #11]
	Std_ReturnType Local_u8ErrorState = STD_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]
    u8 Local_u8DummyReceieve = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	75bb      	strb	r3, [r7, #22]
    MSysTick_void_ASYNC_Delay_ms(Copy_u32Timeout, SPI_Timeout_Handler);
 8001c56:	492a      	ldr	r1, [pc, #168]	; (8001d00 <MSPI_TransmitByte+0xc0>)
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f8ed 	bl	8001e38 <MSysTick_void_ASYNC_Delay_ms>
    while((GET_BIT(SPIx[SPIConfig->SPI_Instance]->SR,SPI_TXE_BIT_POS) != SPI_BUSY) && (SPI_Timeout_Flag != SPI_TIMEOUT));
 8001c5e:	bf00      	nop
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <MSPI_TransmitByte+0xc4>)
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d003      	beq.n	8001c80 <MSPI_TransmitByte+0x40>
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <MSPI_TransmitByte+0xc8>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d1ef      	bne.n	8001c60 <MSPI_TransmitByte+0x20>
    if(SPI_Timeout_Flag == SPI_TIMEOUT)
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <MSPI_TransmitByte+0xc8>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <MSPI_TransmitByte+0x54>
    {
    	Local_u8ErrorState = STD_TIMEOUT;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	75fb      	strb	r3, [r7, #23]
    	SPI_Timeout_Flag = SPI_NO_TIMEOUT;
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <MSPI_TransmitByte+0xc8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e030      	b.n	8001cf6 <MSPI_TransmitByte+0xb6>
    }
    else
    {
    	MSysTick_void_ASYNC_Delay_ms(Copy_u32Timeout, SPI_Timeout_Handler);
 8001c94:	491a      	ldr	r1, [pc, #104]	; (8001d00 <MSPI_TransmitByte+0xc0>)
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8ce 	bl	8001e38 <MSysTick_void_ASYNC_Delay_ms>
		SPIx[SPIConfig->SPI_Instance]->DR = Copy_u8Data;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <MSPI_TransmitByte+0xc4>)
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	7afa      	ldrb	r2, [r7, #11]
 8001caa:	60da      	str	r2, [r3, #12]
		while((GET_BIT(SPIx[SPIConfig->SPI_Instance]->SR,SPI_BSY_BIT_POS) == SPI_BUSY) && (SPI_Timeout_Flag != SPI_TIMEOUT));
 8001cac:	bf00      	nop
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <MSPI_TransmitByte+0xc4>)
 8001cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	09db      	lsrs	r3, r3, #7
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d103      	bne.n	8001cce <MSPI_TransmitByte+0x8e>
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MSPI_TransmitByte+0xc8>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d1ef      	bne.n	8001cae <MSPI_TransmitByte+0x6e>
		if(SPI_Timeout_Flag == SPI_TIMEOUT)
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MSPI_TransmitByte+0xc8>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d105      	bne.n	8001ce2 <MSPI_TransmitByte+0xa2>
		{
			Local_u8ErrorState = STD_TIMEOUT;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	75fb      	strb	r3, [r7, #23]
			SPI_Timeout_Flag = SPI_NO_TIMEOUT;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MSPI_TransmitByte+0xc8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e009      	b.n	8001cf6 <MSPI_TransmitByte+0xb6>
		}
		else
		{
			MSysTick_voidDeInit();
 8001ce2:	f000 f877 	bl	8001dd4 <MSysTick_voidDeInit>
			Local_u8DummyReceieve = SPIx[SPIConfig->SPI_Instance]->DR;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <MSPI_TransmitByte+0xc4>)
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	75bb      	strb	r3, [r7, #22]
		}
    }
	return Local_u8ErrorState;
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	08001b51 	.word	0x08001b51
 8001d04:	20000060 	.word	0x20000060
 8001d08:	20000108 	.word	0x20000108

08001d0c <MSPI_DMA_Transmit>:
	}
	return Local_u8ErrorState;
}

void MSPI_DMA_Transmit(SPI_Config_t* SPIConfig , u8* Ptr_u8Data , u16 Copy_u16DataSize)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
	MDMA_voidInit(&SPIConfig->SPI_TX_DMA_Config);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f8ee 	bl	8000f00 <MDMA_voidInit>
	MDMA_voidStart(&SPIConfig->SPI_TX_DMA_Config, &SPIx[SPIConfig->SPI_Instance]->DR,(u32*)Ptr_u8Data, Copy_u16DataSize);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f103 0008 	add.w	r0, r3, #8
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MSPI_DMA_Transmit+0x60>)
 8001d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d36:	f103 010c 	add.w	r1, r3, #12
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	f7ff f933 	bl	8000fa8 <MDMA_voidStart>
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, TXDMAEN_BIT_POS);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MSPI_DMA_Transmit+0x60>)
 8001d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <MSPI_DMA_Transmit+0x60>)
 8001d58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d5c:	f042 0202 	orr.w	r2, r2, #2
 8001d60:	605a      	str	r2, [r3, #4]
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000060 	.word	0x20000060

08001d70 <SPI1_IRQHandler>:
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, TXDMAEN_BIT_POS);
	SET_BIT(SPIx[SPIConfig->SPI_Instance]->CR2, RXDMAEN_BIT_POS);
}
/*************************************************************SPI IRQ HANDLERS******************************************************************/
void SPI1_IRQHandler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
		{
			SPI1_RX_INT_Callback();
		}
	}
#endif
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
		{
			SPI2_RX_INT_Callback();
		}
	}
#endif
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
		{
			SPI3_RX_INT_Callback();
		}
	}
#endif
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
#elif (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8)
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MSysTick_voidInit+0x34>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <MSysTick_voidInit+0x34>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MSysTick_voidInit+0x34>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <MSysTick_voidInit+0x34>)
 8001db2:	f023 0302 	bic.w	r3, r3, #2
 8001db6:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <MSysTick_voidInit+0x34>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <MSysTick_voidInit+0x34>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MSysTick_voidDeInit+0x34>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <MSysTick_voidDeInit+0x34>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MSysTick_voidDeInit+0x34>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <MSysTick_voidDeInit+0x34>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <MSysTick_voidDeInit+0x34>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <MSysTick_voidDeInit+0x34>)
 8001df6:	f023 0302 	bic.w	r3, r3, #2
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <SysTick_Handler>:
{
	SysTick->LOAD = Copy_u32Ticks;
	SysTick->VAL = 0;
}
void SysTick_Handler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <SysTick_Handler+0x24>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 8001e1a:	f7ff ffdb 	bl	8001dd4 <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Handler+0x28>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 8001e26:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <SysTick_Handler+0x28>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4798      	blx	r3
	}
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000110 	.word	0x20000110
 8001e34:	2000010c 	.word	0x2000010c

08001e38 <MSysTick_void_ASYNC_Delay_ms>:
	SysTick->LOAD = 0;
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
}
void MSysTick_void_ASYNC_Delay_ms(u32 time_ms,PtrFunction CallBack_Ptr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
	u32 Local_ticks = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
	if (CallBack_Ptr != NULL)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d02e      	beq.n	8001eaa <MSysTick_void_ASYNC_Delay_ms+0x72>
		{
			Local_ticks = (u32)(((SYSTICK_AHB_CLK/SYSTICK_CLOCK_SOURCE)/1000.0)*time_ms);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7fe fc2f 	bl	80006b0 <__aeabi_ui2d>
 8001e52:	a31c      	add	r3, pc, #112	; (adr r3, 8001ec4 <MSysTick_void_ASYNC_Delay_ms+0x8c>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe f9be 	bl	80001d8 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fc9e 	bl	80007a4 <__aeabi_d2uiz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]
			if(Local_ticks>SysTick_LOAD_RELOAD_Msk)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e72:	d302      	bcc.n	8001e7a <MSysTick_void_ASYNC_Delay_ms+0x42>
			{
				Local_ticks = SysTick_LOAD_RELOAD_Msk;
 8001e74:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001e78:	60fb      	str	r3, [r7, #12]
			}
		  /* Set Reload Register to SysTick Ticks */
		  	SysTick->LOAD = Local_ticks;
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6053      	str	r3, [r2, #4]
		  	SysTick->VAL = 0;
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
			/* Copy The User CallBack to Local ptrFunction */
			SysTick_CallBack = CallBack_Ptr;
 8001e86:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <MSysTick_void_ASYNC_Delay_ms+0x84>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6013      	str	r3, [r2, #0]
			/* Set The SysTick Timer to Single Interval Mode */
			SysTick_Mode = SysTick_SingleInterval_Mode;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MSysTick_void_ASYNC_Delay_ms+0x88>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
			/*Enable SysTick IRQ */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	6013      	str	r3, [r2, #0]
			/* Enable SysTick Counter */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6013      	str	r3, [r2, #0]
		}
		else { /* Nothing */}
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	e000e010 	.word	0xe000e010
 8001ebc:	2000010c 	.word	0x2000010c
 8001ec0:	20000110 	.word	0x20000110
 8001ec4:	00000000 	.word	0x00000000
 8001ec8:	40a86a00 	.word	0x40a86a00

08001ecc <main>:

// ----------------------------------------------------------------------------
u32 counter;

int main(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af02      	add	r7, sp, #8

	TFT_voidInit(&TFT_Config);
 8001ed2:	4822      	ldr	r0, [pc, #136]	; (8001f5c <main+0x90>)
 8001ed4:	f7fe fd52 	bl	800097c <TFT_voidInit>


	while(1)
	{

		TFT_WriteStringPosWithBgColor(&TFT_Config,0,0,"HELLO IMT",TFT_BLUE,TFT_WHITE);
 8001ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	231f      	movs	r3, #31
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <main+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	481c      	ldr	r0, [pc, #112]	; (8001f5c <main+0x90>)
 8001eea:	f7fe fe89 	bl	8000c00 <TFT_WriteStringPosWithBgColor>
		Delay_sec(5);
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <main+0x98>)
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e002      	b.n	8001efa <main+0x2e>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <main+0x28>
		TFT_WriteStringPosWithBgColor(&TFT_Config,1,0,"TFT Driver",TFT_RED,TFT_WHITE);
 8001f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <main+0x9c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2101      	movs	r1, #1
 8001f12:	4812      	ldr	r0, [pc, #72]	; (8001f5c <main+0x90>)
 8001f14:	f7fe fe74 	bl	8000c00 <TFT_WriteStringPosWithBgColor>
		Delay_sec(5);
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <main+0x98>)
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	e002      	b.n	8001f24 <main+0x58>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f9      	bne.n	8001f1e <main+0x52>
		TFT_WriteStringPosWithBgColor(&TFT_Config,4,0,"Completed",TFT_GREEN,TFT_WHITE);
 8001f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <main+0xa0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	4807      	ldr	r0, [pc, #28]	; (8001f5c <main+0x90>)
 8001f3e:	f7fe fe5f 	bl	8000c00 <TFT_WriteStringPosWithBgColor>
		Delay_sec(5);
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <main+0x98>)
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	e002      	b.n	8001f4e <main+0x82>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f9      	bne.n	8001f48 <main+0x7c>
		TFT_ClearScreen(&TFT_Config);
 8001f54:	4801      	ldr	r0, [pc, #4]	; (8001f5c <main+0x90>)
 8001f56:	f7fe fed4 	bl	8000d02 <TFT_ClearScreen>
		TFT_WriteStringPosWithBgColor(&TFT_Config,0,0,"HELLO IMT",TFT_BLUE,TFT_WHITE);
 8001f5a:	e7bd      	b.n	8001ed8 <main+0xc>
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	08002038 	.word	0x08002038
 8001f64:	005f5e10 	.word	0x005f5e10
 8001f68:	08002044 	.word	0x08002044
 8001f6c:	08002050 	.word	0x08002050

08001f70 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8001f74:	f7ff fd10 	bl	8001998 <RCC_voidInit>
	MSysTick_voidInit();
 8001f78:	f7ff ff10 	bl	8001d9c <MSysTick_voidInit>
	MNVIC_voidInit();
 8001f7c:	f7ff fc7c 	bl	8001878 <MNVIC_voidInit>
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f88:	f7ff fff2 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8e:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <LoopForever+0xe>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa4:	4c0a      	ldr	r4, [pc, #40]	; (8001fd0 <LoopForever+0x16>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fb2:	f000 f811 	bl	8001fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fb6:	f7ff ff89 	bl	8001ecc <main>

08001fba <LoopForever>:

LoopForever:
  b LoopForever
 8001fba:	e7fe      	b.n	8001fba <LoopForever>
  ldr   r0, =_estack
 8001fbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fc8:	08002dc0 	.word	0x08002dc0
  ldr r2, =_sbss
 8001fcc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001fd0:	20000114 	.word	0x20000114

08001fd4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC_IRQHandler>
	...

08001fd8 <__libc_init_array>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	4d0d      	ldr	r5, [pc, #52]	; (8002010 <__libc_init_array+0x38>)
 8001fdc:	4c0d      	ldr	r4, [pc, #52]	; (8002014 <__libc_init_array+0x3c>)
 8001fde:	1b64      	subs	r4, r4, r5
 8001fe0:	10a4      	asrs	r4, r4, #2
 8001fe2:	2600      	movs	r6, #0
 8001fe4:	42a6      	cmp	r6, r4
 8001fe6:	d109      	bne.n	8001ffc <__libc_init_array+0x24>
 8001fe8:	4d0b      	ldr	r5, [pc, #44]	; (8002018 <__libc_init_array+0x40>)
 8001fea:	4c0c      	ldr	r4, [pc, #48]	; (800201c <__libc_init_array+0x44>)
 8001fec:	f000 f818 	bl	8002020 <_init>
 8001ff0:	1b64      	subs	r4, r4, r5
 8001ff2:	10a4      	asrs	r4, r4, #2
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	42a6      	cmp	r6, r4
 8001ff8:	d105      	bne.n	8002006 <__libc_init_array+0x2e>
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002000:	4798      	blx	r3
 8002002:	3601      	adds	r6, #1
 8002004:	e7ee      	b.n	8001fe4 <__libc_init_array+0xc>
 8002006:	f855 3b04 	ldr.w	r3, [r5], #4
 800200a:	4798      	blx	r3
 800200c:	3601      	adds	r6, #1
 800200e:	e7f2      	b.n	8001ff6 <__libc_init_array+0x1e>
 8002010:	08002db8 	.word	0x08002db8
 8002014:	08002db8 	.word	0x08002db8
 8002018:	08002db8 	.word	0x08002db8
 800201c:	08002dbc 	.word	0x08002dbc

08002020 <_init>:
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	bf00      	nop
 8002024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002026:	bc08      	pop	{r3}
 8002028:	469e      	mov	lr, r3
 800202a:	4770      	bx	lr

0800202c <_fini>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	bf00      	nop
 8002030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002032:	bc08      	pop	{r3}
 8002034:	469e      	mov	lr, r3
 8002036:	4770      	bx	lr
