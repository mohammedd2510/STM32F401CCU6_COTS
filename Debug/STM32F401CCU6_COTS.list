
STM32F401CCU6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d14  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ea8  08000ea8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ea8  08000ea8  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08000ea8  08000ea8  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ea8  08000ea8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ea8  08000ea8  00010ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000eac  08000eac  00010eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08000eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000028  08000ed8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08000ed8  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002233  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bdd  00000000  00000000  000222ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  00022eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ad6  00000000  00000000  00023278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024d9  00000000  00000000  00023d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ac5f  00000000  00000000  00026227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000002a3  00000000  00000000  00030e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c50  00000000  00000000  0003112c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00031d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e90 	.word	0x08000e90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08000e90 	.word	0x08000e90

080001d4 <DMA_Interrupt_Init>:
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************
*********************************************************************************************************************/

static void DMA_Interrupt_Init(DMA_Config_t* DMA_Config)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(DMA_Config->Instance ==  DMA1)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a66      	ldr	r2, [pc, #408]	; (800037c <DMA_Interrupt_Init+0x1a8>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d11c      	bne.n	8000220 <DMA_Interrupt_Init+0x4c>
	{
		if(DMA_Config->Stream <=6)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	2b06      	cmp	r3, #6
 80001ec:	d809      	bhi.n	8000202 <DMA_Interrupt_Init+0x2e>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 11);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	330b      	adds	r3, #11
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	b25b      	sxtb	r3, r3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fc22 	bl	8000a44 <MNVIC_voidEnableIRQ>
 8000200:	e006      	b.n	8000210 <DMA_Interrupt_Init+0x3c>
		}
		else if (DMA_Config->Stream == 7 )
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	2b07      	cmp	r3, #7
 8000208:	d102      	bne.n	8000210 <DMA_Interrupt_Init+0x3c>
		{
			MNVIC_voidEnableIRQ(DMA1_Stream7_IRQn);
 800020a:	202f      	movs	r0, #47	; 0x2f
 800020c:	f000 fc1a 	bl	8000a44 <MNVIC_voidEnableIRQ>
		}
		DMA1_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	687a      	ldr	r2, [r7, #4]
 8000216:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000218:	4959      	ldr	r1, [pc, #356]	; (8000380 <DMA_Interrupt_Init+0x1ac>)
 800021a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800021e:	e02a      	b.n	8000276 <DMA_Interrupt_Init+0xa2>
	}
	else if (DMA_Config->Instance == DMA2)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a57      	ldr	r2, [pc, #348]	; (8000384 <DMA_Interrupt_Init+0x1b0>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d125      	bne.n	8000276 <DMA_Interrupt_Init+0xa2>
	{
		if(DMA_Config->Stream <=4)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	2b04      	cmp	r3, #4
 8000230:	d809      	bhi.n	8000246 <DMA_Interrupt_Init+0x72>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 56);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	b2db      	uxtb	r3, r3
 8000238:	3338      	adds	r3, #56	; 0x38
 800023a:	b2db      	uxtb	r3, r3
 800023c:	b25b      	sxtb	r3, r3
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fc00 	bl	8000a44 <MNVIC_voidEnableIRQ>
 8000244:	e010      	b.n	8000268 <DMA_Interrupt_Init+0x94>
		}
		else if ((DMA_Config->Stream > 4) && (DMA_Config->Stream <= 7 ))
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	2b04      	cmp	r3, #4
 800024c:	d90c      	bls.n	8000268 <DMA_Interrupt_Init+0x94>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d808      	bhi.n	8000268 <DMA_Interrupt_Init+0x94>
		{
			MNVIC_voidEnableIRQ(DMA_Config->Stream + 68);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	3344      	adds	r3, #68	; 0x44
 800025e:	b2db      	uxtb	r3, r3
 8000260:	b25b      	sxtb	r3, r3
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fbee 	bl	8000a44 <MNVIC_voidEnableIRQ>
		}
		DMA2_TCx_Callback[DMA_Config->Stream] = DMA_Config->DMA_TC_Callback;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000270:	4945      	ldr	r1, [pc, #276]	; (8000388 <DMA_Interrupt_Init+0x1b4>)
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	else
	{
		/* Nothing */
	}
	if(DMA_Config->Stream == DMA_STREAM_0)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d108      	bne.n	8000290 <DMA_Interrupt_Init+0xbc>
	{
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF0_BIT_POS);
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	689a      	ldr	r2, [r3, #8]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f042 0220 	orr.w	r2, r2, #32
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	e059      	b.n	8000344 <DMA_Interrupt_Init+0x170>
	}
	else if (DMA_Config->Stream == DMA_STREAM_1)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d108      	bne.n	80002aa <DMA_Interrupt_Init+0xd6>
	{
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF1_BIT_POS);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	689a      	ldr	r2, [r3, #8]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	e04c      	b.n	8000344 <DMA_Interrupt_Init+0x170>
	}
	else if (DMA_Config->Stream == DMA_STREAM_2)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d108      	bne.n	80002c4 <DMA_Interrupt_Init+0xf0>
	{
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF2_BIT_POS);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	689a      	ldr	r2, [r3, #8]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	e03f      	b.n	8000344 <DMA_Interrupt_Init+0x170>
	}
	else if (DMA_Config->Stream == DMA_STREAM_3)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	2b03      	cmp	r3, #3
 80002ca:	d108      	bne.n	80002de <DMA_Interrupt_Init+0x10a>
	{
		SET_BIT(DMA_Config->Instance->LIFCR ,DMA_CTCIF3_BIT_POS);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	689a      	ldr	r2, [r3, #8]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	e032      	b.n	8000344 <DMA_Interrupt_Init+0x170>
	}
	else if (DMA_Config->Stream == DMA_STREAM_4)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	d108      	bne.n	80002f8 <DMA_Interrupt_Init+0x124>
	{
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF4_BIT_POS);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	68da      	ldr	r2, [r3, #12]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f042 0220 	orr.w	r2, r2, #32
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	e025      	b.n	8000344 <DMA_Interrupt_Init+0x170>
	}
	else if (DMA_Config->Stream == DMA_STREAM_5)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	2b05      	cmp	r3, #5
 80002fe:	d108      	bne.n	8000312 <DMA_Interrupt_Init+0x13e>
	{
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF5_BIT_POS);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	68da      	ldr	r2, [r3, #12]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	e018      	b.n	8000344 <DMA_Interrupt_Init+0x170>
	}
	else if (DMA_Config->Stream == DMA_STREAM_6)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	2b06      	cmp	r3, #6
 8000318:	d108      	bne.n	800032c <DMA_Interrupt_Init+0x158>
	{
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF6_BIT_POS);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	68da      	ldr	r2, [r3, #12]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	e00b      	b.n	8000344 <DMA_Interrupt_Init+0x170>
	}
	else if (DMA_Config->Stream == DMA_STREAM_7)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	2b07      	cmp	r3, #7
 8000332:	d107      	bne.n	8000344 <DMA_Interrupt_Init+0x170>
	{
		SET_BIT(DMA_Config->Instance->HIFCR ,DMA_CTCIF7_BIT_POS);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	68da      	ldr	r2, [r3, #12]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000342:	60da      	str	r2, [r3, #12]
	}
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR,DMA_TCIE_BIT_POS);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6819      	ldr	r1, [r3, #0]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	685a      	ldr	r2, [r3, #4]
 800034c:	4613      	mov	r3, r2
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	4413      	add	r3, r2
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	440b      	add	r3, r1
 8000356:	3310      	adds	r3, #16
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	6810      	ldr	r0, [r2, #0]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	6852      	ldr	r2, [r2, #4]
 8000362:	f043 0110 	orr.w	r1, r3, #16
 8000366:	4613      	mov	r3, r2
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	4413      	add	r3, r2
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	4403      	add	r3, r0
 8000370:	3310      	adds	r3, #16
 8000372:	6019      	str	r1, [r3, #0]
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40026000 	.word	0x40026000
 8000380:	20000044 	.word	0x20000044
 8000384:	40026400 	.word	0x40026400
 8000388:	20000064 	.word	0x20000064

0800038c <MDMA_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void MDMA_voidInit(DMA_Config_t* DMA_Config)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	/* Enable DMA Clock */
	if(DMA_Config->Instance ==  DMA1)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a22      	ldr	r2, [pc, #136]	; (8000424 <MDMA_voidInit+0x98>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d104      	bne.n	80003a8 <MDMA_voidInit+0x1c>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA1EN);
 800039e:	2115      	movs	r1, #21
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 fbe7 	bl	8000b74 <RCC_voidEnablePeripheralClock>
 80003a6:	e008      	b.n	80003ba <MDMA_voidInit+0x2e>
	}
	else if (DMA_Config->Instance == DMA2)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1e      	ldr	r2, [pc, #120]	; (8000428 <MDMA_voidInit+0x9c>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d103      	bne.n	80003ba <MDMA_voidInit+0x2e>
	{
		RCC_voidEnablePeripheralClock(RCC_AHB, RCC_AHB_DMA2EN);
 80003b2:	2116      	movs	r1, #22
 80003b4:	2000      	movs	r0, #0
 80003b6:	f000 fbdd 	bl	8000b74 <RCC_voidEnablePeripheralClock>
	else
	{
		/* Nothing */
	}
	/* Clear DMA stream pervious configuration */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =0;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	6819      	ldr	r1, [r3, #0]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	685a      	ldr	r2, [r3, #4]
 80003c2:	4613      	mov	r3, r2
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	4413      	add	r3, r2
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	440b      	add	r3, r1
 80003cc:	3310      	adds	r3, #16
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
	/* Configure DMA Stream */
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
			((DMA_Config->Channel) |
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	689a      	ldr	r2, [r3, #8]
			(DMA_Config->Direction) |
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	68db      	ldr	r3, [r3, #12]
			((DMA_Config->Channel) |
 80003da:	431a      	orrs	r2, r3
			(DMA_Config->PeriphInc) |
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	691b      	ldr	r3, [r3, #16]
			(DMA_Config->Direction) |
 80003e0:	431a      	orrs	r2, r3
			(DMA_Config->MemInc) |
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	695b      	ldr	r3, [r3, #20]
			(DMA_Config->PeriphInc) |
 80003e6:	431a      	orrs	r2, r3
			(DMA_Config->PeriphDataSize) |
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	699b      	ldr	r3, [r3, #24]
			(DMA_Config->MemInc) |
 80003ec:	ea42 0103 	orr.w	r1, r2, r3
			(DMA_Config->MemDataSize) );
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	69db      	ldr	r3, [r3, #28]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	6810      	ldr	r0, [r2, #0]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	6852      	ldr	r2, [r2, #4]
			(DMA_Config->PeriphDataSize) |
 80003fc:	4319      	orrs	r1, r3
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR =
 80003fe:	4613      	mov	r3, r2
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	4413      	add	r3, r2
 8000404:	00db      	lsls	r3, r3, #3
 8000406:	4403      	add	r3, r0
 8000408:	3310      	adds	r3, #16
 800040a:	6019      	str	r1, [r3, #0]
	if(DMA_Config->DMA_TC_InterruptEnable == INTERRUPT_ENABLED)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d102      	bne.n	800041c <MDMA_voidInit+0x90>
	{
		DMA_Interrupt_Init(DMA_Config);
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff fedc 	bl	80001d4 <DMA_Interrupt_Init>
	}
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40026000 	.word	0x40026000
 8000428:	40026400 	.word	0x40026400

0800042c <MDMA_voidStart>:
void MDMA_voidStart(DMA_Config_t* DMA_Config , u32* PeriphAddr , u32* MemAddr , u32 DataLength)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
 8000438:	603b      	str	r3, [r7, #0]
	CLR_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	685a      	ldr	r2, [r3, #4]
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	440b      	add	r3, r1
 800044c:	3310      	adds	r3, #16
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	6810      	ldr	r0, [r2, #0]
 8000454:	68fa      	ldr	r2, [r7, #12]
 8000456:	6852      	ldr	r2, [r2, #4]
 8000458:	f023 0101 	bic.w	r1, r3, #1
 800045c:	4613      	mov	r3, r2
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	4413      	add	r3, r2
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	4403      	add	r3, r0
 8000466:	3310      	adds	r3, #16
 8000468:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].NDTR = DataLength;
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6819      	ldr	r1, [r3, #0]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	685a      	ldr	r2, [r3, #4]
 8000472:	4613      	mov	r3, r2
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	4413      	add	r3, r2
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	440b      	add	r3, r1
 800047c:	3314      	adds	r3, #20
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	601a      	str	r2, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].PAR = (u32)PeriphAddr;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6818      	ldr	r0, [r3, #0]
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	68b9      	ldr	r1, [r7, #8]
 800048c:	1c5a      	adds	r2, r3, #1
 800048e:	4613      	mov	r3, r2
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	4413      	add	r3, r2
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	4403      	add	r3, r0
 8000498:	6019      	str	r1, [r3, #0]
	DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].M0AR = (u32)MemAddr;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	6818      	ldr	r0, [r3, #0]
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	4413      	add	r3, r2
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	4403      	add	r3, r0
 80004b0:	3304      	adds	r3, #4
 80004b2:	6019      	str	r1, [r3, #0]
	SET_BIT(DMA_Config->Instance->DMA_Sx[DMA_Config->Stream].CR ,DMA_STREAM_ENABLE_BIT_POS);
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	6819      	ldr	r1, [r3, #0]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	685a      	ldr	r2, [r3, #4]
 80004bc:	4613      	mov	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	4413      	add	r3, r2
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	440b      	add	r3, r1
 80004c6:	3310      	adds	r3, #16
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	68fa      	ldr	r2, [r7, #12]
 80004cc:	6810      	ldr	r0, [r2, #0]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	6852      	ldr	r2, [r2, #4]
 80004d2:	f043 0101 	orr.w	r1, r3, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	4413      	add	r3, r2
 80004dc:	00db      	lsls	r3, r3, #3
 80004de:	4403      	add	r3, r0
 80004e0:	3310      	adds	r3, #16
 80004e2:	6019      	str	r1, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <DMA1_Stream0_IRQHandler>:

/************************************* DMA1 ISRs************************************************/
void DMA1_Stream0_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF0_BIT_POS);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <DMA1_Stream0_IRQHandler+0x24>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <DMA1_Stream0_IRQHandler+0x24>)
 80004fa:	f043 0320 	orr.w	r3, r3, #32
 80004fe:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[0] != NULL)
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <DMA1_Stream0_IRQHandler+0x28>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d002      	beq.n	800050e <DMA1_Stream0_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[0]();
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <DMA1_Stream0_IRQHandler+0x28>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4798      	blx	r3
	}
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40026000 	.word	0x40026000
 8000518:	20000044 	.word	0x20000044

0800051c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF1_BIT_POS);
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <DMA1_Stream1_IRQHandler+0x24>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <DMA1_Stream1_IRQHandler+0x24>)
 8000526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800052a:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[1] != NULL)
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <DMA1_Stream1_IRQHandler+0x28>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <DMA1_Stream1_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[1]();
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <DMA1_Stream1_IRQHandler+0x28>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4798      	blx	r3
	}
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40026000 	.word	0x40026000
 8000544:	20000044 	.word	0x20000044

08000548 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF2_BIT_POS);
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <DMA1_Stream2_IRQHandler+0x24>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <DMA1_Stream2_IRQHandler+0x24>)
 8000552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000556:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[2] != NULL)
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <DMA1_Stream2_IRQHandler+0x28>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d002      	beq.n	8000566 <DMA1_Stream2_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[2]();
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <DMA1_Stream2_IRQHandler+0x28>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	4798      	blx	r3
	}
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40026000 	.word	0x40026000
 8000570:	20000044 	.word	0x20000044

08000574 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->LIFCR ,DMA_CTCIF3_BIT_POS);
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <DMA1_Stream3_IRQHandler+0x24>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <DMA1_Stream3_IRQHandler+0x24>)
 800057e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000582:	6093      	str	r3, [r2, #8]
	if(DMA1_TCx_Callback[3] != NULL)
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <DMA1_Stream3_IRQHandler+0x28>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <DMA1_Stream3_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[3]();
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <DMA1_Stream3_IRQHandler+0x28>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	4798      	blx	r3
	}
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40026000 	.word	0x40026000
 800059c:	20000044 	.word	0x20000044

080005a0 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF4_BIT_POS);
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <DMA1_Stream4_IRQHandler+0x24>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <DMA1_Stream4_IRQHandler+0x24>)
 80005aa:	f043 0320 	orr.w	r3, r3, #32
 80005ae:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[4] != NULL)
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <DMA1_Stream4_IRQHandler+0x28>)
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <DMA1_Stream4_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[4]();
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <DMA1_Stream4_IRQHandler+0x28>)
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	4798      	blx	r3
	}
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40026000 	.word	0x40026000
 80005c8:	20000044 	.word	0x20000044

080005cc <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF5_BIT_POS);
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <DMA1_Stream5_IRQHandler+0x24>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <DMA1_Stream5_IRQHandler+0x24>)
 80005d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005da:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[5] != NULL)
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <DMA1_Stream5_IRQHandler+0x28>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <DMA1_Stream5_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[5]();
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <DMA1_Stream5_IRQHandler+0x28>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4798      	blx	r3
	}
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40026000 	.word	0x40026000
 80005f4:	20000044 	.word	0x20000044

080005f8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF6_BIT_POS);
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <DMA1_Stream6_IRQHandler+0x24>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <DMA1_Stream6_IRQHandler+0x24>)
 8000602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000606:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[6] != NULL)
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <DMA1_Stream6_IRQHandler+0x28>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <DMA1_Stream6_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[6]();
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <DMA1_Stream6_IRQHandler+0x28>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4798      	blx	r3
	}
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40026000 	.word	0x40026000
 8000620:	20000044 	.word	0x20000044

08000624 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	SET_BIT(DMA1->HIFCR ,DMA_CTCIF7_BIT_POS);
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <DMA1_Stream7_IRQHandler+0x24>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <DMA1_Stream7_IRQHandler+0x24>)
 800062e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000632:	60d3      	str	r3, [r2, #12]
	if(DMA1_TCx_Callback[7] != NULL)
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <DMA1_Stream7_IRQHandler+0x28>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <DMA1_Stream7_IRQHandler+0x1e>
	{
		DMA1_TCx_Callback[7]();
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <DMA1_Stream7_IRQHandler+0x28>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	4798      	blx	r3
	}
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40026000 	.word	0x40026000
 800064c:	20000044 	.word	0x20000044

08000650 <DMA2_Stream0_IRQHandler>:

/************************************* DMA2 ISRs************************************************/
void DMA2_Stream0_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF0_BIT_POS);
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <DMA2_Stream0_IRQHandler+0x24>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <DMA2_Stream0_IRQHandler+0x24>)
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[0] != NULL)
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <DMA2_Stream0_IRQHandler+0x28>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <DMA2_Stream0_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[0]();
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <DMA2_Stream0_IRQHandler+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4798      	blx	r3
	}
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40026400 	.word	0x40026400
 8000678:	20000064 	.word	0x20000064

0800067c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF1_BIT_POS);
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <DMA2_Stream1_IRQHandler+0x24>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <DMA2_Stream1_IRQHandler+0x24>)
 8000686:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800068a:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[1] != NULL)
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <DMA2_Stream1_IRQHandler+0x28>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <DMA2_Stream1_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[1]();
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <DMA2_Stream1_IRQHandler+0x28>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4798      	blx	r3
	}
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40026400 	.word	0x40026400
 80006a4:	20000064 	.word	0x20000064

080006a8 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF2_BIT_POS);
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <DMA2_Stream2_IRQHandler+0x24>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <DMA2_Stream2_IRQHandler+0x24>)
 80006b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b6:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[2] != NULL)
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <DMA2_Stream2_IRQHandler+0x28>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <DMA2_Stream2_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[2]();
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <DMA2_Stream2_IRQHandler+0x28>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	4798      	blx	r3
	}
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40026400 	.word	0x40026400
 80006d0:	20000064 	.word	0x20000064

080006d4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->LIFCR ,DMA_CTCIF3_BIT_POS);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <DMA2_Stream3_IRQHandler+0x24>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <DMA2_Stream3_IRQHandler+0x24>)
 80006de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006e2:	6093      	str	r3, [r2, #8]
	if(DMA2_TCx_Callback[3] != NULL)
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <DMA2_Stream3_IRQHandler+0x28>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <DMA2_Stream3_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[3]();
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <DMA2_Stream3_IRQHandler+0x28>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4798      	blx	r3
	}
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40026400 	.word	0x40026400
 80006fc:	20000064 	.word	0x20000064

08000700 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF4_BIT_POS);
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <DMA2_Stream4_IRQHandler+0x24>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <DMA2_Stream4_IRQHandler+0x24>)
 800070a:	f043 0320 	orr.w	r3, r3, #32
 800070e:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[4] != NULL)
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <DMA2_Stream4_IRQHandler+0x28>)
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <DMA2_Stream4_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[4]();
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <DMA2_Stream4_IRQHandler+0x28>)
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	4798      	blx	r3
	}
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40026400 	.word	0x40026400
 8000728:	20000064 	.word	0x20000064

0800072c <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF5_BIT_POS);
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <DMA2_Stream5_IRQHandler+0x24>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <DMA2_Stream5_IRQHandler+0x24>)
 8000736:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800073a:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[5] != NULL)
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <DMA2_Stream5_IRQHandler+0x28>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <DMA2_Stream5_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[5]();
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <DMA2_Stream5_IRQHandler+0x28>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	4798      	blx	r3
	}
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40026400 	.word	0x40026400
 8000754:	20000064 	.word	0x20000064

08000758 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF6_BIT_POS);
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <DMA2_Stream6_IRQHandler+0x24>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <DMA2_Stream6_IRQHandler+0x24>)
 8000762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000766:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[6] != NULL)
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <DMA2_Stream6_IRQHandler+0x28>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <DMA2_Stream6_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[6]();
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <DMA2_Stream6_IRQHandler+0x28>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4798      	blx	r3
	}
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40026400 	.word	0x40026400
 8000780:	20000064 	.word	0x20000064

08000784 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	SET_BIT(DMA2->HIFCR ,DMA_CTCIF7_BIT_POS);
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <DMA2_Stream7_IRQHandler+0x24>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <DMA2_Stream7_IRQHandler+0x24>)
 800078e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000792:	60d3      	str	r3, [r2, #12]
	if(DMA2_TCx_Callback[7] != NULL)
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <DMA2_Stream7_IRQHandler+0x28>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <DMA2_Stream7_IRQHandler+0x1e>
	{
		DMA2_TCx_Callback[7]();
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <DMA2_Stream7_IRQHandler+0x28>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	4798      	blx	r3
	}
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40026400 	.word	0x40026400
 80007ac:	20000064 	.word	0x20000064

080007b0 <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MEXTI_voidClearPendingFlag+0x2c>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	79fa      	ldrb	r2, [r7, #7]
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <MEXTI_voidClearPendingFlag+0x2c>)
 80007ca:	430b      	orrs	r3, r1
 80007cc:	6153      	str	r3, [r2, #20]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40013c00 	.word	0x40013c00

080007e0 <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MEXTI_u8GetPendingFlag+0x28>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	fa22 f303 	lsr.w	r3, r2, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	40013c00 	.word	0x40013c00

0800080c <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <EXTI0_IRQHandler+0x1c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <EXTI0_IRQHandler+0x1c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff ffc6 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000084 	.word	0x20000084

0800082c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <EXTI1_IRQHandler+0x1c>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <EXTI1_IRQHandler+0x1c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff ffb6 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000084 	.word	0x20000084

0800084c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <EXTI2_IRQHandler+0x1c>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <EXTI2_IRQHandler+0x1c>)
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff ffa6 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000084 	.word	0x20000084

0800086c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <EXTI3_IRQHandler+0x1c>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <EXTI3_IRQHandler+0x1c>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 800087e:	2003      	movs	r0, #3
 8000880:	f7ff ff96 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000084 	.word	0x20000084

0800088c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <EXTI4_IRQHandler+0x1c>)
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <EXTI4_IRQHandler+0x1c>)
 800089a:	691b      	ldr	r3, [r3, #16]
 800089c:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 800089e:	2004      	movs	r0, #4
 80008a0:	f7ff ff86 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000084 	.word	0x20000084

080008ac <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 80008b0:	2005      	movs	r0, #5
 80008b2:	f7ff ff95 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00a      	beq.n	80008d2 <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d002      	beq.n	80008ca <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 80008ca:	2005      	movs	r0, #5
 80008cc:	f7ff ff70 	bl	80007b0 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 80008d0:	e042      	b.n	8000958 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 80008d2:	2006      	movs	r0, #6
 80008d4:	f7ff ff84 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00a      	beq.n	80008f4 <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 80008ec:	2006      	movs	r0, #6
 80008ee:	f7ff ff5f 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 80008f2:	e031      	b.n	8000958 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 80008f4:	2007      	movs	r0, #7
 80008f6:	f7ff ff73 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00a      	beq.n	8000916 <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 800090e:	2007      	movs	r0, #7
 8000910:	f7ff ff4e 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 8000914:	e020      	b.n	8000958 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 8000916:	2008      	movs	r0, #8
 8000918:	f7ff ff62 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00a      	beq.n	8000938 <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 8000924:	6a1b      	ldr	r3, [r3, #32]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 8000930:	2008      	movs	r0, #8
 8000932:	f7ff ff3d 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 8000936:	e00f      	b.n	8000958 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 8000938:	2009      	movs	r0, #9
 800093a:	f7ff ff51 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d009      	beq.n	8000958 <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 8000946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <EXTI9_5_IRQHandler+0xb0>)
 800094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000950:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 8000952:	2009      	movs	r0, #9
 8000954:	f7ff ff2c 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000084 	.word	0x20000084

08000960 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 8000964:	200a      	movs	r0, #10
 8000966:	f7ff ff3b 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00a      	beq.n	8000986 <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 8000972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 8000978:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 800097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097c:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 800097e:	200a      	movs	r0, #10
 8000980:	f7ff ff16 	bl	80007b0 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 8000984:	e053      	b.n	8000a2e <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 8000986:	200b      	movs	r0, #11
 8000988:	f7ff ff2a 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00a      	beq.n	80009a8 <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 8000994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 80009a0:	200b      	movs	r0, #11
 80009a2:	f7ff ff05 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 80009a6:	e042      	b.n	8000a2e <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 80009a8:	200c      	movs	r0, #12
 80009aa:	f7ff ff19 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00a      	beq.n	80009ca <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d002      	beq.n	80009c2 <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 80009c2:	200c      	movs	r0, #12
 80009c4:	f7ff fef4 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 80009c8:	e031      	b.n	8000a2e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 80009ca:	200d      	movs	r0, #13
 80009cc:	f7ff ff08 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00a      	beq.n	80009ec <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 80009d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 80009e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e2:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 80009e4:	200d      	movs	r0, #13
 80009e6:	f7ff fee3 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 80009ea:	e020      	b.n	8000a2e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 80009ec:	200e      	movs	r0, #14
 80009ee:	f7ff fef7 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00a      	beq.n	8000a0e <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 80009fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 8000a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a04:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 8000a06:	200e      	movs	r0, #14
 8000a08:	f7ff fed2 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 8000a0c:	e00f      	b.n	8000a2e <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 8000a0e:	200f      	movs	r0, #15
 8000a10:	f7ff fee6 	bl	80007e0 <MEXTI_u8GetPendingFlag>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d009      	beq.n	8000a2e <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 8000a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <EXTI15_10_IRQHandler+0xd4>)
 8000a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a26:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 8000a28:	200f      	movs	r0, #15
 8000a2a:	f7ff fec1 	bl	80007b0 <MEXTI_voidClearPendingFlag>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000084 	.word	0x20000084

08000a38 <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 8000a3c:	f000 f8da 	bl	8000bf4 <MSCB_voidSetPriorityGrouping>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <MNVIC_voidEnableIRQ>:

void MNVIC_voidEnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <MNVIC_voidEnableIRQ+0x2a>
	{
		NVIC->ISER[((u32)IRQn >> 5)] = (1UL << ((u32)IRQn & 0x1F));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <MNVIC_voidEnableIRQ+0x38>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <RCC_void_HSI_Init>:
static void RCC_void_APB2Prescaler_Init(void);
/************************************************/

/******* Local Functions Implementation ********/
static void RCC_void_HSI_Init(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Enable HSI
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <RCC_void_HSI_Init+0x58>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <RCC_void_HSI_Init+0x58>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE  
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <RCC_void_HSI_Init+0x58>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <RCC_void_HSI_Init+0x58>)
 8000a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a9a:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <RCC_void_HSI_Init+0x58>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <RCC_void_HSI_Init+0x58>)
 8000aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aa6:	6013      	str	r3, [r2, #0]
    // Polling (Busy Wait)
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
 8000aa8:	bf00      	nop
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <RCC_void_HSI_Init+0x58>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f9      	beq.n	8000aaa <RCC_void_HSI_Init+0x2a>
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <RCC_void_HSI_Init+0x5c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <RCC_void_HSI_Init+0x5c>)
 8000abc:	f023 0301 	bic.w	r3, r3, #1
 8000ac0:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <RCC_void_HSI_Init+0x5c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <RCC_void_HSI_Init+0x5c>)
 8000ac8:	f023 0302 	bic.w	r3, r3, #2
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40023808 	.word	0x40023808

08000ae0 <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_1;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_2
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aee:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_2;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afa:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023808 	.word	0x40023808

08000b0c <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <RCC_void_APB1Prescaler_Init+0x24>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <RCC_void_APB1Prescaler_Init+0x24>)
 8000b16:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000b1a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <RCC_void_APB1Prescaler_Init+0x24>)
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <RCC_void_APB1Prescaler_Init+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023808 	.word	0x40023808

08000b34 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <RCC_void_APB2Prescaler_Init+0x24>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <RCC_void_APB2Prescaler_Init+0x24>)
 8000b3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b42:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <RCC_void_APB2Prescaler_Init+0x24>)
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <RCC_void_APB2Prescaler_Init+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023808 	.word	0x40023808

08000b5c <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
 8000b60:	f7ff ff8e 	bl	8000a80 <RCC_void_HSI_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 8000b64:	f7ff ffbc 	bl	8000ae0 <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 8000b68:	f7ff ffd0 	bl	8000b0c <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 8000b6c:	f7ff ffe2 	bl	8000b34 <RCC_void_APB2Prescaler_Init>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d01c      	beq.n	8000bc4 <RCC_voidEnablePeripheralClock+0x50>
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	dc25      	bgt.n	8000bda <RCC_voidEnablePeripheralClock+0x66>
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <RCC_voidEnablePeripheralClock+0x24>
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d00b      	beq.n	8000bae <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 8000b96:	e020      	b.n	8000bda <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <RCC_voidEnablePeripheralClock+0x74>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	79ba      	ldrb	r2, [r7, #6]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <RCC_voidEnablePeripheralClock+0x74>)
 8000ba8:	430b      	orrs	r3, r1
 8000baa:	6013      	str	r3, [r2, #0]
        break;
 8000bac:	e016      	b.n	8000bdc <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <RCC_voidEnablePeripheralClock+0x78>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	79ba      	ldrb	r2, [r7, #6]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <RCC_voidEnablePeripheralClock+0x78>)
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6013      	str	r3, [r2, #0]
        break;
 8000bc2:	e00b      	b.n	8000bdc <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <RCC_voidEnablePeripheralClock+0x7c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	79ba      	ldrb	r2, [r7, #6]
 8000bca:	2101      	movs	r1, #1
 8000bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <RCC_voidEnablePeripheralClock+0x7c>)
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	6013      	str	r3, [r2, #0]
        break;  
 8000bd8:	e000      	b.n	8000bdc <RCC_voidEnablePeripheralClock+0x68>
        break;
 8000bda:	bf00      	nop
    }
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	40023830 	.word	0x40023830
 8000bec:	40023840 	.word	0x40023840
 8000bf0:	40023844 	.word	0x40023844

08000bf4 <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MSCB_voidSetPriorityGrouping+0x44>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0e:	4013      	ands	r3, r2
 8000c10:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	021a      	lsls	r2, r3, #8
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c22:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <MSCB_voidSetPriorityGrouping+0x44>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60d3      	str	r3, [r2, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <SPI1_IRQHandler>:
	return Local_u8ErrorState;
}


void SPI1_IRQHandler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
		{
			SPI1_RX_INT_Callback();
		}
	}
#endif
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
		{
			SPI2_RX_INT_Callback();
		}
	}
#endif
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
		{
			SPI3_RX_INT_Callback();
		}
	}
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
#elif (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8)
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MSysTick_voidInit+0x34>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <MSysTick_voidInit+0x34>)
 8000c72:	f023 0304 	bic.w	r3, r3, #4
 8000c76:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MSysTick_voidInit+0x34>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <MSysTick_voidInit+0x34>)
 8000c7e:	f023 0302 	bic.w	r3, r3, #2
 8000c82:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <MSysTick_voidInit+0x34>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <MSysTick_voidInit+0x34>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MSysTick_voidDeInit+0x34>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <MSysTick_voidDeInit+0x34>)
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MSysTick_voidDeInit+0x34>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MSysTick_voidDeInit+0x34>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <MSysTick_voidDeInit+0x34>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <MSysTick_voidDeInit+0x34>)
 8000cc2:	f023 0302 	bic.w	r3, r3, #2
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <SysTick_Handler>:
{
	SysTick->LOAD = Copy_u32Ticks;
	SysTick->VAL = 0;
}
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <SysTick_Handler+0x24>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 8000ce6:	f7ff ffdb 	bl	8000ca0 <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Handler+0x28>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 8000cf2:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <SysTick_Handler+0x28>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4798      	blx	r3
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000c8 	.word	0x200000c8
 8000d00:	200000c4 	.word	0x200000c4

08000d04 <main>:
void DMA1_ISR(void);
// ----------------------------------------------------------------------------
u32 counter;

int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 8000d0a:	af00      	add	r7, sp, #0
	u32 srcArr[500]={0};
 8000d0c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8000d10:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f000 f88a 	bl	8000e36 <memset>
	u32 destArr[500];
	u32 srcArrDMA[500]={0};
 8000d22:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8000d26:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d30:	461a      	mov	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	f000 f87f 	bl	8000e36 <memset>
	u32 destArrDMA[500];
	DMA1_Config.DMA_TC_Callback = DMA1_ISR;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <main+0xb0>)
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <main+0xb4>)
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
	MDMA_voidInit(&DMA1_Config);
 8000d3e:	481d      	ldr	r0, [pc, #116]	; (8000db4 <main+0xb0>)
 8000d40:	f7ff fb24 	bl	800038c <MDMA_voidInit>

memset(destArr,1,500);
 8000d44:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 8000d48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f871 	bl	8000e36 <memset>
memset(destArrDMA,1,500);
 8000d54:	463b      	mov	r3, r7
 8000d56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 f86a 	bl	8000e36 <memset>
    /* Loop forever */
	MDMA_voidStart(&DMA1_Config, srcArrDMA, destArrDMA,500);
 8000d62:	463a      	mov	r2, r7
 8000d64:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 8000d68:	3910      	subs	r1, #16
 8000d6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <main+0xb0>)
 8000d70:	f7ff fb5c 	bl	800042c <MDMA_voidStart>
	for(counter=0;counter<500;counter++)
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <main+0xb8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e014      	b.n	8000da6 <main+0xa2>
	{
		*(destArr+counter) = *(srcArr+counter);
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <main+0xb8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000d86:	f102 0210 	add.w	r2, r2, #16
 8000d8a:	441a      	add	r2, r3
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <main+0xb8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	f507 617a 	add.w	r1, r7, #4000	; 0xfa0
 8000d96:	440b      	add	r3, r1
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	601a      	str	r2, [r3, #0]
	for(counter=0;counter<500;counter++)
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <main+0xb8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <main+0xb8>)
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <main+0xb8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dae:	d3e5      	bcc.n	8000d7c <main+0x78>
	}
	while(1)
 8000db0:	e7fe      	b.n	8000db0 <main+0xac>
 8000db2:	bf00      	nop
 8000db4:	20000000 	.word	0x20000000
 8000db8:	08000dc1 	.word	0x08000dc1
 8000dbc:	200000cc 	.word	0x200000cc

08000dc0 <DMA1_ISR>:
	{

	}
}
void DMA1_ISR(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	asm("NOP");
 8000dc4:	bf00      	nop
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8000dd4:	f7ff fec2 	bl	8000b5c <RCC_voidInit>
	MSysTick_voidInit();
 8000dd8:	f7ff ff46 	bl	8000c68 <MSysTick_voidInit>
	MNVIC_voidInit();
 8000ddc:	f7ff fe2c 	bl	8000a38 <MNVIC_voidInit>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000de6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de8:	f7ff fff2 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <LoopForever+0xe>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	; (8000e30 <LoopForever+0x16>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e12:	f000 f819 	bl	8000e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e16:	f7ff ff75 	bl	8000d04 <main>

08000e1a <LoopForever>:

LoopForever:
  b LoopForever
 8000e1a:	e7fe      	b.n	8000e1a <LoopForever>
  ldr   r0, =_estack
 8000e1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000e28:	08000eb0 	.word	0x08000eb0
  ldr r2, =_sbss
 8000e2c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000e30:	200000d0 	.word	0x200000d0

08000e34 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>

08000e36 <memset>:
 8000e36:	4402      	add	r2, r0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d100      	bne.n	8000e40 <memset+0xa>
 8000e3e:	4770      	bx	lr
 8000e40:	f803 1b01 	strb.w	r1, [r3], #1
 8000e44:	e7f9      	b.n	8000e3a <memset+0x4>
	...

08000e48 <__libc_init_array>:
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	4d0d      	ldr	r5, [pc, #52]	; (8000e80 <__libc_init_array+0x38>)
 8000e4c:	4c0d      	ldr	r4, [pc, #52]	; (8000e84 <__libc_init_array+0x3c>)
 8000e4e:	1b64      	subs	r4, r4, r5
 8000e50:	10a4      	asrs	r4, r4, #2
 8000e52:	2600      	movs	r6, #0
 8000e54:	42a6      	cmp	r6, r4
 8000e56:	d109      	bne.n	8000e6c <__libc_init_array+0x24>
 8000e58:	4d0b      	ldr	r5, [pc, #44]	; (8000e88 <__libc_init_array+0x40>)
 8000e5a:	4c0c      	ldr	r4, [pc, #48]	; (8000e8c <__libc_init_array+0x44>)
 8000e5c:	f000 f818 	bl	8000e90 <_init>
 8000e60:	1b64      	subs	r4, r4, r5
 8000e62:	10a4      	asrs	r4, r4, #2
 8000e64:	2600      	movs	r6, #0
 8000e66:	42a6      	cmp	r6, r4
 8000e68:	d105      	bne.n	8000e76 <__libc_init_array+0x2e>
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}
 8000e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e70:	4798      	blx	r3
 8000e72:	3601      	adds	r6, #1
 8000e74:	e7ee      	b.n	8000e54 <__libc_init_array+0xc>
 8000e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7a:	4798      	blx	r3
 8000e7c:	3601      	adds	r6, #1
 8000e7e:	e7f2      	b.n	8000e66 <__libc_init_array+0x1e>
 8000e80:	08000ea8 	.word	0x08000ea8
 8000e84:	08000ea8 	.word	0x08000ea8
 8000e88:	08000ea8 	.word	0x08000ea8
 8000e8c:	08000eac 	.word	0x08000eac

08000e90 <_init>:
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e92:	bf00      	nop
 8000e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e96:	bc08      	pop	{r3}
 8000e98:	469e      	mov	lr, r3
 8000e9a:	4770      	bx	lr

08000e9c <_fini>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	bf00      	nop
 8000ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea2:	bc08      	pop	{r3}
 8000ea4:	469e      	mov	lr, r3
 8000ea6:	4770      	bx	lr
