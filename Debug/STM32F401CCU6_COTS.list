
STM32F401CCU6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001230  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  080013c4  080013c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016c8  080016c8  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  080016c8  080016c8  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016c8  080016c8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016c8  080016c8  000116c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016cc  080016cc  000116cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080016d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000038  08001708  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001708  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001d43  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a01  00000000  00000000  00021dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000328  00000000  00000000  000227f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000152f  00000000  00000000  00022b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b21  00000000  00000000  00024047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000097e1  00000000  00000000  00026b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000021f  00000000  00000000  00030349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b5c  00000000  00000000  00030568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000310c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000038 	.word	0x20000038
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013ac 	.word	0x080013ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000003c 	.word	0x2000003c
 80001d0:	080013ac 	.word	0x080013ac

080001d4 <__aeabi_dmul>:
 80001d4:	b570      	push	{r4, r5, r6, lr}
 80001d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e2:	bf1d      	ittte	ne
 80001e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e8:	ea94 0f0c 	teqne	r4, ip
 80001ec:	ea95 0f0c 	teqne	r5, ip
 80001f0:	f000 f8de 	bleq	80003b0 <__aeabi_dmul+0x1dc>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea81 0603 	eor.w	r6, r1, r3
 80001fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000202:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000206:	bf18      	it	ne
 8000208:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800020c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000214:	d038      	beq.n	8000288 <__aeabi_dmul+0xb4>
 8000216:	fba0 ce02 	umull	ip, lr, r0, r2
 800021a:	f04f 0500 	mov.w	r5, #0
 800021e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000222:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000226:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022a:	f04f 0600 	mov.w	r6, #0
 800022e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000232:	f09c 0f00 	teq	ip, #0
 8000236:	bf18      	it	ne
 8000238:	f04e 0e01 	orrne.w	lr, lr, #1
 800023c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000240:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000244:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000248:	d204      	bcs.n	8000254 <__aeabi_dmul+0x80>
 800024a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024e:	416d      	adcs	r5, r5
 8000250:	eb46 0606 	adc.w	r6, r6, r6
 8000254:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000258:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800025c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000260:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000264:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000268:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800026c:	bf88      	it	hi
 800026e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000272:	d81e      	bhi.n	80002b2 <__aeabi_dmul+0xde>
 8000274:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800028c:	ea46 0101 	orr.w	r1, r6, r1
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	ea81 0103 	eor.w	r1, r1, r3
 8000298:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800029c:	bfc2      	ittt	gt
 800029e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a6:	bd70      	popgt	{r4, r5, r6, pc}
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f04f 0e00 	mov.w	lr, #0
 80002b0:	3c01      	subs	r4, #1
 80002b2:	f300 80ab 	bgt.w	800040c <__aeabi_dmul+0x238>
 80002b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ba:	bfde      	ittt	le
 80002bc:	2000      	movle	r0, #0
 80002be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c2:	bd70      	pople	{r4, r5, r6, pc}
 80002c4:	f1c4 0400 	rsb	r4, r4, #0
 80002c8:	3c20      	subs	r4, #32
 80002ca:	da35      	bge.n	8000338 <__aeabi_dmul+0x164>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc1b      	bgt.n	8000308 <__aeabi_dmul+0x134>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f305 	lsl.w	r3, r0, r5
 80002dc:	fa20 f004 	lsr.w	r0, r0, r4
 80002e0:	fa01 f205 	lsl.w	r2, r1, r5
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f4:	fa21 f604 	lsr.w	r6, r1, r4
 80002f8:	eb42 0106 	adc.w	r1, r2, r6
 80002fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000300:	bf08      	it	eq
 8000302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f1c4 040c 	rsb	r4, r4, #12
 800030c:	f1c4 0520 	rsb	r5, r4, #32
 8000310:	fa00 f304 	lsl.w	r3, r0, r4
 8000314:	fa20 f005 	lsr.w	r0, r0, r5
 8000318:	fa01 f204 	lsl.w	r2, r1, r4
 800031c:	ea40 0002 	orr.w	r0, r0, r2
 8000320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f205 	lsl.w	r2, r0, r5
 8000340:	ea4e 0e02 	orr.w	lr, lr, r2
 8000344:	fa20 f304 	lsr.w	r3, r0, r4
 8000348:	fa01 f205 	lsl.w	r2, r1, r5
 800034c:	ea43 0302 	orr.w	r3, r3, r2
 8000350:	fa21 f004 	lsr.w	r0, r1, r4
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	fa21 f204 	lsr.w	r2, r1, r4
 800035c:	ea20 0002 	bic.w	r0, r0, r2
 8000360:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000368:	bf08      	it	eq
 800036a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f094 0f00 	teq	r4, #0
 8000374:	d10f      	bne.n	8000396 <__aeabi_dmul+0x1c2>
 8000376:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037a:	0040      	lsls	r0, r0, #1
 800037c:	eb41 0101 	adc.w	r1, r1, r1
 8000380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000384:	bf08      	it	eq
 8000386:	3c01      	subeq	r4, #1
 8000388:	d0f7      	beq.n	800037a <__aeabi_dmul+0x1a6>
 800038a:	ea41 0106 	orr.w	r1, r1, r6
 800038e:	f095 0f00 	teq	r5, #0
 8000392:	bf18      	it	ne
 8000394:	4770      	bxne	lr
 8000396:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	eb43 0303 	adc.w	r3, r3, r3
 80003a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a4:	bf08      	it	eq
 80003a6:	3d01      	subeq	r5, #1
 80003a8:	d0f7      	beq.n	800039a <__aeabi_dmul+0x1c6>
 80003aa:	ea43 0306 	orr.w	r3, r3, r6
 80003ae:	4770      	bx	lr
 80003b0:	ea94 0f0c 	teq	r4, ip
 80003b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b8:	bf18      	it	ne
 80003ba:	ea95 0f0c 	teqne	r5, ip
 80003be:	d00c      	beq.n	80003da <__aeabi_dmul+0x206>
 80003c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c4:	bf18      	it	ne
 80003c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ca:	d1d1      	bne.n	8000370 <__aeabi_dmul+0x19c>
 80003cc:	ea81 0103 	eor.w	r1, r1, r3
 80003d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003de:	bf06      	itte	eq
 80003e0:	4610      	moveq	r0, r2
 80003e2:	4619      	moveq	r1, r3
 80003e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e8:	d019      	beq.n	800041e <__aeabi_dmul+0x24a>
 80003ea:	ea94 0f0c 	teq	r4, ip
 80003ee:	d102      	bne.n	80003f6 <__aeabi_dmul+0x222>
 80003f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f4:	d113      	bne.n	800041e <__aeabi_dmul+0x24a>
 80003f6:	ea95 0f0c 	teq	r5, ip
 80003fa:	d105      	bne.n	8000408 <__aeabi_dmul+0x234>
 80003fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000400:	bf1c      	itt	ne
 8000402:	4610      	movne	r0, r2
 8000404:	4619      	movne	r1, r3
 8000406:	d10a      	bne.n	800041e <__aeabi_dmul+0x24a>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000422:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000426:	bd70      	pop	{r4, r5, r6, pc}

08000428 <__aeabi_drsub>:
 8000428:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800042c:	e002      	b.n	8000434 <__adddf3>
 800042e:	bf00      	nop

08000430 <__aeabi_dsub>:
 8000430:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000434 <__adddf3>:
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	bf1f      	itttt	ne
 800044a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000452:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000456:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045a:	f000 80e2 	beq.w	8000622 <__adddf3+0x1ee>
 800045e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000462:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000466:	bfb8      	it	lt
 8000468:	426d      	neglt	r5, r5
 800046a:	dd0c      	ble.n	8000486 <__adddf3+0x52>
 800046c:	442c      	add	r4, r5
 800046e:	ea80 0202 	eor.w	r2, r0, r2
 8000472:	ea81 0303 	eor.w	r3, r1, r3
 8000476:	ea82 0000 	eor.w	r0, r2, r0
 800047a:	ea83 0101 	eor.w	r1, r3, r1
 800047e:	ea80 0202 	eor.w	r2, r0, r2
 8000482:	ea81 0303 	eor.w	r3, r1, r3
 8000486:	2d36      	cmp	r5, #54	; 0x36
 8000488:	bf88      	it	hi
 800048a:	bd30      	pophi	{r4, r5, pc}
 800048c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000490:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000494:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000498:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800049c:	d002      	beq.n	80004a4 <__adddf3+0x70>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x84>
 80004b2:	4252      	negs	r2, r2
 80004b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b8:	ea94 0f05 	teq	r4, r5
 80004bc:	f000 80a7 	beq.w	800060e <__adddf3+0x1da>
 80004c0:	f1a4 0401 	sub.w	r4, r4, #1
 80004c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c8:	db0d      	blt.n	80004e6 <__adddf3+0xb2>
 80004ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ce:	fa22 f205 	lsr.w	r2, r2, r5
 80004d2:	1880      	adds	r0, r0, r2
 80004d4:	f141 0100 	adc.w	r1, r1, #0
 80004d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004dc:	1880      	adds	r0, r0, r2
 80004de:	fa43 f305 	asr.w	r3, r3, r5
 80004e2:	4159      	adcs	r1, r3
 80004e4:	e00e      	b.n	8000504 <__adddf3+0xd0>
 80004e6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ea:	f10e 0e20 	add.w	lr, lr, #32
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f4:	bf28      	it	cs
 80004f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	18c0      	adds	r0, r0, r3
 8000500:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	d507      	bpl.n	800051a <__adddf3+0xe6>
 800050a:	f04f 0e00 	mov.w	lr, #0
 800050e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000512:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000516:	eb6e 0101 	sbc.w	r1, lr, r1
 800051a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051e:	d31b      	bcc.n	8000558 <__adddf3+0x124>
 8000520:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000524:	d30c      	bcc.n	8000540 <__adddf3+0x10c>
 8000526:	0849      	lsrs	r1, r1, #1
 8000528:	ea5f 0030 	movs.w	r0, r0, rrx
 800052c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000530:	f104 0401 	add.w	r4, r4, #1
 8000534:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000538:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800053c:	f080 809a 	bcs.w	8000674 <__adddf3+0x240>
 8000540:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	ea41 0105 	orr.w	r1, r1, r5
 8000556:	bd30      	pop	{r4, r5, pc}
 8000558:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800055c:	4140      	adcs	r0, r0
 800055e:	eb41 0101 	adc.w	r1, r1, r1
 8000562:	3c01      	subs	r4, #1
 8000564:	bf28      	it	cs
 8000566:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056a:	d2e9      	bcs.n	8000540 <__adddf3+0x10c>
 800056c:	f091 0f00 	teq	r1, #0
 8000570:	bf04      	itt	eq
 8000572:	4601      	moveq	r1, r0
 8000574:	2000      	moveq	r0, #0
 8000576:	fab1 f381 	clz	r3, r1
 800057a:	bf08      	it	eq
 800057c:	3320      	addeq	r3, #32
 800057e:	f1a3 030b 	sub.w	r3, r3, #11
 8000582:	f1b3 0220 	subs.w	r2, r3, #32
 8000586:	da0c      	bge.n	80005a2 <__adddf3+0x16e>
 8000588:	320c      	adds	r2, #12
 800058a:	dd08      	ble.n	800059e <__adddf3+0x16a>
 800058c:	f102 0c14 	add.w	ip, r2, #20
 8000590:	f1c2 020c 	rsb	r2, r2, #12
 8000594:	fa01 f00c 	lsl.w	r0, r1, ip
 8000598:	fa21 f102 	lsr.w	r1, r1, r2
 800059c:	e00c      	b.n	80005b8 <__adddf3+0x184>
 800059e:	f102 0214 	add.w	r2, r2, #20
 80005a2:	bfd8      	it	le
 80005a4:	f1c2 0c20 	rsble	ip, r2, #32
 80005a8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b0:	bfdc      	itt	le
 80005b2:	ea41 010c 	orrle.w	r1, r1, ip
 80005b6:	4090      	lslle	r0, r2
 80005b8:	1ae4      	subs	r4, r4, r3
 80005ba:	bfa2      	ittt	ge
 80005bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c0:	4329      	orrge	r1, r5
 80005c2:	bd30      	popge	{r4, r5, pc}
 80005c4:	ea6f 0404 	mvn.w	r4, r4
 80005c8:	3c1f      	subs	r4, #31
 80005ca:	da1c      	bge.n	8000606 <__adddf3+0x1d2>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc0e      	bgt.n	80005ee <__adddf3+0x1ba>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0220 	rsb	r2, r4, #32
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f302 	lsl.w	r3, r1, r2
 80005e0:	ea40 0003 	orr.w	r0, r0, r3
 80005e4:	fa21 f304 	lsr.w	r3, r1, r4
 80005e8:	ea45 0103 	orr.w	r1, r5, r3
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	f1c4 040c 	rsb	r4, r4, #12
 80005f2:	f1c4 0220 	rsb	r2, r4, #32
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 f304 	lsl.w	r3, r1, r4
 80005fe:	ea40 0003 	orr.w	r0, r0, r3
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	fa21 f004 	lsr.w	r0, r1, r4
 800060a:	4629      	mov	r1, r5
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	f094 0f00 	teq	r4, #0
 8000612:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000616:	bf06      	itte	eq
 8000618:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800061c:	3401      	addeq	r4, #1
 800061e:	3d01      	subne	r5, #1
 8000620:	e74e      	b.n	80004c0 <__adddf3+0x8c>
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf18      	it	ne
 8000628:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800062c:	d029      	beq.n	8000682 <__adddf3+0x24e>
 800062e:	ea94 0f05 	teq	r4, r5
 8000632:	bf08      	it	eq
 8000634:	ea90 0f02 	teqeq	r0, r2
 8000638:	d005      	beq.n	8000646 <__adddf3+0x212>
 800063a:	ea54 0c00 	orrs.w	ip, r4, r0
 800063e:	bf04      	itt	eq
 8000640:	4619      	moveq	r1, r3
 8000642:	4610      	moveq	r0, r2
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	ea91 0f03 	teq	r1, r3
 800064a:	bf1e      	ittt	ne
 800064c:	2100      	movne	r1, #0
 800064e:	2000      	movne	r0, #0
 8000650:	bd30      	popne	{r4, r5, pc}
 8000652:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000656:	d105      	bne.n	8000664 <__adddf3+0x230>
 8000658:	0040      	lsls	r0, r0, #1
 800065a:	4149      	adcs	r1, r1
 800065c:	bf28      	it	cs
 800065e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000668:	bf3c      	itt	cc
 800066a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066e:	bd30      	popcc	{r4, r5, pc}
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000678:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800067c:	f04f 0000 	mov.w	r0, #0
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000686:	bf1a      	itte	ne
 8000688:	4619      	movne	r1, r3
 800068a:	4610      	movne	r0, r2
 800068c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000690:	bf1c      	itt	ne
 8000692:	460b      	movne	r3, r1
 8000694:	4602      	movne	r2, r0
 8000696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069a:	bf06      	itte	eq
 800069c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a0:	ea91 0f03 	teqeq	r1, r3
 80006a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop

080006ac <__aeabi_ui2d>:
 80006ac:	f090 0f00 	teq	r0, #0
 80006b0:	bf04      	itt	eq
 80006b2:	2100      	moveq	r1, #0
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c0:	f04f 0500 	mov.w	r5, #0
 80006c4:	f04f 0100 	mov.w	r1, #0
 80006c8:	e750      	b.n	800056c <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_i2d>:
 80006cc:	f090 0f00 	teq	r0, #0
 80006d0:	bf04      	itt	eq
 80006d2:	2100      	moveq	r1, #0
 80006d4:	4770      	bxeq	lr
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e4:	bf48      	it	mi
 80006e6:	4240      	negmi	r0, r0
 80006e8:	f04f 0100 	mov.w	r1, #0
 80006ec:	e73e      	b.n	800056c <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2d>:
 80006f0:	0042      	lsls	r2, r0, #1
 80006f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fe:	bf1f      	itttt	ne
 8000700:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000708:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800070c:	4770      	bxne	lr
 800070e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000712:	bf08      	it	eq
 8000714:	4770      	bxeq	lr
 8000716:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071a:	bf04      	itt	eq
 800071c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	e71c      	b.n	800056c <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_ul2d>:
 8000734:	ea50 0201 	orrs.w	r2, r0, r1
 8000738:	bf08      	it	eq
 800073a:	4770      	bxeq	lr
 800073c:	b530      	push	{r4, r5, lr}
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	e00a      	b.n	800075a <__aeabi_l2d+0x16>

08000744 <__aeabi_l2d>:
 8000744:	ea50 0201 	orrs.w	r2, r0, r1
 8000748:	bf08      	it	eq
 800074a:	4770      	bxeq	lr
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000752:	d502      	bpl.n	800075a <__aeabi_l2d+0x16>
 8000754:	4240      	negs	r0, r0
 8000756:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000762:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000766:	f43f aed8 	beq.w	800051a <__adddf3+0xe6>
 800076a:	f04f 0203 	mov.w	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077a:	bf18      	it	ne
 800077c:	3203      	addne	r2, #3
 800077e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	fa00 fc03 	lsl.w	ip, r0, r3
 800078a:	fa20 f002 	lsr.w	r0, r0, r2
 800078e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000792:	ea40 000e 	orr.w	r0, r0, lr
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	4414      	add	r4, r2
 800079c:	e6bd      	b.n	800051a <__adddf3+0xe6>
 800079e:	bf00      	nop

080007a0 <__aeabi_d2uiz>:
 80007a0:	004a      	lsls	r2, r1, #1
 80007a2:	d211      	bcs.n	80007c8 <__aeabi_d2uiz+0x28>
 80007a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a8:	d211      	bcs.n	80007ce <__aeabi_d2uiz+0x2e>
 80007aa:	d50d      	bpl.n	80007c8 <__aeabi_d2uiz+0x28>
 80007ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b4:	d40e      	bmi.n	80007d4 <__aeabi_d2uiz+0x34>
 80007b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d2:	d102      	bne.n	80007da <__aeabi_d2uiz+0x3a>
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	4770      	bx	lr
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	4770      	bx	lr

080007e0 <LEDMAT_SysTick_CallBack_Handler>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void LEDMAT_SysTick_CallBack_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	LEDMAT_Delay_Flag = LEDMAT_DELAY_COMPLETED;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <LEDMAT_SysTick_CallBack_Handler+0x14>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	20000054 	.word	0x20000054

080007f8 <voidDisableAllRows>:
static void voidDisableAllRows(ledmat_t* ledmat_obj)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	u8 Local_RowsCounter = ZERO_INIT;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e015      	b.n	8000836 <voidDisableAllRows+0x3e>
	{
		GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_LOW);
 800080a:	7bfa      	ldrb	r2, [r7, #15]
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	440b      	add	r3, r1
 8000816:	7818      	ldrb	r0, [r3, #0]
 8000818:	7bfa      	ldrb	r2, [r7, #15]
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	440b      	add	r3, r1
 8000824:	3301      	adds	r3, #1
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	f000 fb76 	bl	8000f1c <GPIO_voidSetPinValue>
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	3301      	adds	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	2b07      	cmp	r3, #7
 800083a:	d9e6      	bls.n	800080a <voidDisableAllRows+0x12>
	}
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <voidDisableAllColumns>:
static void voidDisableAllColumns(ledmat_t* ledmat_obj)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	u8 Local_ColumnsCounter = ZERO_INIT;
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]
	for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	e016      	b.n	8000886 <voidDisableAllColumns+0x40>
	{
		GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port, ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_HIGH);
 8000858:	7bfa      	ldrb	r2, [r7, #15]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	440b      	add	r3, r1
 8000864:	3318      	adds	r3, #24
 8000866:	7818      	ldrb	r0, [r3, #0]
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	440b      	add	r3, r1
 8000874:	3319      	adds	r3, #25
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2201      	movs	r2, #1
 800087a:	4619      	mov	r1, r3
 800087c:	f000 fb4e 	bl	8000f1c <GPIO_voidSetPinValue>
	for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	3301      	adds	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	2b07      	cmp	r3, #7
 800088a:	d9e5      	bls.n	8000858 <voidDisableAllColumns+0x12>
	}
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <voidUpdateScreen_WithDelay>:
static void voidUpdateScreen_WithDelay(ledmat_t* ledmat_obj, u32 time_ms)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	u8 Local_RowsCounter = ZERO_INIT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	73fb      	strb	r3, [r7, #15]
	u8 Local_ColumnsCounter = ZERO_INIT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	73bb      	strb	r3, [r7, #14]
	gpio_logic_t Local_col_pin_logic = GPIO_HIGH;
 80008aa:	2301      	movs	r3, #1
 80008ac:	737b      	strb	r3, [r7, #13]
	voidDisableAllRows(ledmat_obj);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffa2 	bl	80007f8 <voidDisableAllRows>
	MSysTick_void_ASYNC_Delay_ms(time_ms, LEDMAT_SysTick_CallBack_Handler);
 80008b4:	4938      	ldr	r1, [pc, #224]	; (8000998 <voidUpdateScreen_WithDelay+0x100>)
 80008b6:	6838      	ldr	r0, [r7, #0]
 80008b8:	f000 fcc2 	bl	8001240 <MSysTick_void_ASYNC_Delay_ms>
	while(LEDMAT_Delay_Flag == LEDMAT_DELAY_NOT_COMPLETED)
 80008bc:	e061      	b.n	8000982 <voidUpdateScreen_WithDelay+0xea>
	{
		for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 80008be:	2300      	movs	r3, #0
 80008c0:	73fb      	strb	r3, [r7, #15]
 80008c2:	e05b      	b.n	800097c <voidUpdateScreen_WithDelay+0xe4>
		{
			voidDisableAllColumns(ledmat_obj);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ffbe 	bl	8000846 <voidDisableAllColumns>
			GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_HIGH);
 80008ca:	7bfa      	ldrb	r2, [r7, #15]
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	7818      	ldrb	r0, [r3, #0]
 80008d8:	7bfa      	ldrb	r2, [r7, #15]
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	3301      	adds	r3, #1
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2201      	movs	r2, #1
 80008ea:	4619      	mov	r1, r3
 80008ec:	f000 fb16 	bl	8000f1c <GPIO_voidSetPinValue>
			for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	73bb      	strb	r3, [r7, #14]
 80008f4:	e029      	b.n	800094a <voidUpdateScreen_WithDelay+0xb2>
			{
				Local_col_pin_logic= !(ledmat_obj->LedMatrix_Buffer[Local_RowsCounter]>>Local_ColumnsCounter &0x01);
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000900:	461a      	mov	r2, r3
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	fa42 f303 	asr.w	r3, r2, r3
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf0c      	ite	eq
 8000910:	2301      	moveq	r3, #1
 8000912:	2300      	movne	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	737b      	strb	r3, [r7, #13]
				GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port, ledmat_obj->col[Local_ColumnsCounter].pin,Local_col_pin_logic);
 8000918:	7bba      	ldrb	r2, [r7, #14]
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	440b      	add	r3, r1
 8000924:	3318      	adds	r3, #24
 8000926:	7818      	ldrb	r0, [r3, #0]
 8000928:	7bba      	ldrb	r2, [r7, #14]
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	440b      	add	r3, r1
 8000934:	3319      	adds	r3, #25
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	7b7a      	ldrb	r2, [r7, #13]
 800093a:	4619      	mov	r1, r3
 800093c:	f000 faee 	bl	8000f1c <GPIO_voidSetPinValue>
				Frame_delay();
 8000940:	f000 f860 	bl	8000a04 <Frame_delay>
			for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000944:	7bbb      	ldrb	r3, [r7, #14]
 8000946:	3301      	adds	r3, #1
 8000948:	73bb      	strb	r3, [r7, #14]
 800094a:	7bbb      	ldrb	r3, [r7, #14]
 800094c:	2b07      	cmp	r3, #7
 800094e:	d9d2      	bls.n	80008f6 <voidUpdateScreen_WithDelay+0x5e>
			}
			GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_LOW);
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	440b      	add	r3, r1
 800095c:	7818      	ldrb	r0, [r3, #0]
 800095e:	7bfa      	ldrb	r2, [r7, #15]
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	440b      	add	r3, r1
 800096a:	3301      	adds	r3, #1
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2200      	movs	r2, #0
 8000970:	4619      	mov	r1, r3
 8000972:	f000 fad3 	bl	8000f1c <GPIO_voidSetPinValue>
		for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	3301      	adds	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	2b07      	cmp	r3, #7
 8000980:	d9a0      	bls.n	80008c4 <voidUpdateScreen_WithDelay+0x2c>
	while(LEDMAT_Delay_Flag == LEDMAT_DELAY_NOT_COMPLETED)
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <voidUpdateScreen_WithDelay+0x104>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d099      	beq.n	80008be <voidUpdateScreen_WithDelay+0x26>
		}
	}
	LEDMAT_Delay_Flag = LEDMAT_DELAY_NOT_COMPLETED;
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <voidUpdateScreen_WithDelay+0x104>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	080007e1 	.word	0x080007e1
 800099c:	20000054 	.word	0x20000054

080009a0 <voidClearLEDMATBuffer>:
static void voidClearLEDMATBuffer(ledmat_t* ledmat_obj){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	memset(ledmat_obj->LedMatrix_Buffer,0,LED_MATRIX_ROW_NUM);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3330      	adds	r3, #48	; 0x30
 80009ac:	2208      	movs	r2, #8
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fcce 	bl	8001352 <memset>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <voidScrollLeft>:
static void voidScrollLeft(ledmat_t* ledmat_obj)
{
 80009be:	b480      	push	{r7}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	u8 Local_RowsCounter = ZERO_INIT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e00f      	b.n	80009f0 <voidScrollLeft+0x32>
	{
		ledmat_obj->LedMatrix_Buffer[Local_RowsCounter] >>= 1;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	0852      	lsrs	r2, r2, #1
 80009de:	b2d1      	uxtb	r1, r2
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	3301      	adds	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b07      	cmp	r3, #7
 80009f4:	d9ec      	bls.n	80009d0 <voidScrollLeft+0x12>
	}
}
 80009f6:	bf00      	nop
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <Frame_delay>:
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
	{
		ledmat_obj->LedMatrix_Buffer[Local_RowsCounter] <<= 1;
	}
}
static void Frame_delay(){
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 u8 Local_u8DelayCounter = ZERO_INIT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
 	for(Local_u8DelayCounter=ZERO_INIT;Local_u8DelayCounter<10;Local_u8DelayCounter++);
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e002      	b.n	8000a1a <Frame_delay+0x16>
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	3301      	adds	r3, #1
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b09      	cmp	r3, #9
 8000a1e:	d9f9      	bls.n	8000a14 <Frame_delay+0x10>
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <HLEDMAT_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void HLEDMAT_voidInit(ledmat_t* ledmat_obj)
{
 8000a2e:	b590      	push	{r4, r7, lr}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
	u8 Local_RowsCounter = ZERO_INIT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	73fb      	strb	r3, [r7, #15]
	u8 Local_ColumnsCounter = ZERO_INIT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73bb      	strb	r3, [r7, #14]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]
 8000a42:	e076      	b.n	8000b32 <HLEDMAT_voidInit+0x104>
	{
		switch (ledmat_obj->row[Local_RowsCounter].port) {
 8000a44:	7bfa      	ldrb	r2, [r7, #15]
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d010      	beq.n	8000a78 <HLEDMAT_voidInit+0x4a>
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	dc13      	bgt.n	8000a82 <HLEDMAT_voidInit+0x54>
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <HLEDMAT_voidInit+0x36>
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d005      	beq.n	8000a6e <HLEDMAT_voidInit+0x40>
		      break;
		    case GPIO_PORTC:
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
		      break;
		    default:
		      break;
 8000a62:	e00e      	b.n	8000a82 <HLEDMAT_voidInit+0x54>
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8000a64:	2100      	movs	r1, #0
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 fb38 	bl	80010dc <RCC_voidEnablePeripheralClock>
		      break;
 8000a6c:	e00a      	b.n	8000a84 <HLEDMAT_voidInit+0x56>
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fb33 	bl	80010dc <RCC_voidEnablePeripheralClock>
		      break;
 8000a76:	e005      	b.n	8000a84 <HLEDMAT_voidInit+0x56>
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8000a78:	2102      	movs	r1, #2
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 fb2e 	bl	80010dc <RCC_voidEnablePeripheralClock>
		      break;
 8000a80:	e000      	b.n	8000a84 <HLEDMAT_voidInit+0x56>
		      break;
 8000a82:	bf00      	nop
		  }
		  GPIO_voidSetPinMode(ledmat_obj->row[Local_RowsCounter].port,ledmat_obj->row[Local_RowsCounter].pin,GPIO_OUTPUT_PIN_MODE);
 8000a84:	7bfa      	ldrb	r2, [r7, #15]
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	7818      	ldrb	r0, [r3, #0]
 8000a92:	7bfa      	ldrb	r2, [r7, #15]
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f000 f933 	bl	8000d10 <GPIO_voidSetPinMode>
		  GPIO_voidSetPinOutputMode(ledmat_obj->row[Local_RowsCounter].port,ledmat_obj->row[Local_RowsCounter].pin,GPIO_OUTPUT_PIN_PUSH_PULL);
 8000aaa:	7bfa      	ldrb	r2, [r7, #15]
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	7818      	ldrb	r0, [r3, #0]
 8000ab8:	7bfa      	ldrb	r2, [r7, #15]
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	f000 f97a 	bl	8000dc4 <GPIO_voidSetPinOutputMode>
		  GPIO_voidSetPinOutputSpeed(ledmat_obj->row[Local_RowsCounter].port,ledmat_obj->row[Local_RowsCounter].pin,GPIO_OUTPUT_PIN_LOW_SPEED);
 8000ad0:	7bfa      	ldrb	r2, [r7, #15]
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	7818      	ldrb	r0, [r3, #0]
 8000ade:	7bfa      	ldrb	r2, [r7, #15]
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	3301      	adds	r3, #1
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	4619      	mov	r1, r3
 8000af2:	f000 f9b9 	bl	8000e68 <GPIO_voidSetPinOutputSpeed>
		  GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port,ledmat_obj->row[Local_RowsCounter].pin,ledmat_obj->row[Local_RowsCounter].state);
 8000af6:	7bfa      	ldrb	r2, [r7, #15]
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	7818      	ldrb	r0, [r3, #0]
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	3301      	adds	r3, #1
 8000b12:	781c      	ldrb	r4, [r3, #0]
 8000b14:	7bfa      	ldrb	r2, [r7, #15]
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	3302      	adds	r3, #2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4621      	mov	r1, r4
 8000b28:	f000 f9f8 	bl	8000f1c <GPIO_voidSetPinValue>
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b07      	cmp	r3, #7
 8000b36:	d985      	bls.n	8000a44 <HLEDMAT_voidInit+0x16>
	}
	for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73bb      	strb	r3, [r7, #14]
 8000b3c:	e07b      	b.n	8000c36 <HLEDMAT_voidInit+0x208>
		{
			switch (ledmat_obj->col[Local_ColumnsCounter].port) {
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	3318      	adds	r3, #24
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d010      	beq.n	8000b74 <HLEDMAT_voidInit+0x146>
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	dc13      	bgt.n	8000b7e <HLEDMAT_voidInit+0x150>
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <HLEDMAT_voidInit+0x132>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <HLEDMAT_voidInit+0x13c>
			      break;
			    case GPIO_PORTC:
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
			      break;
			    default:
			      break;
 8000b5e:	e00e      	b.n	8000b7e <HLEDMAT_voidInit+0x150>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8000b60:	2100      	movs	r1, #0
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 faba 	bl	80010dc <RCC_voidEnablePeripheralClock>
			      break;
 8000b68:	e00a      	b.n	8000b80 <HLEDMAT_voidInit+0x152>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 fab5 	bl	80010dc <RCC_voidEnablePeripheralClock>
			      break;
 8000b72:	e005      	b.n	8000b80 <HLEDMAT_voidInit+0x152>
			      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8000b74:	2102      	movs	r1, #2
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 fab0 	bl	80010dc <RCC_voidEnablePeripheralClock>
			      break;
 8000b7c:	e000      	b.n	8000b80 <HLEDMAT_voidInit+0x152>
			      break;
 8000b7e:	bf00      	nop
			  }
			  GPIO_voidSetPinMode(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_OUTPUT_PIN_MODE);
 8000b80:	7bba      	ldrb	r2, [r7, #14]
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	4613      	mov	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3318      	adds	r3, #24
 8000b8e:	7818      	ldrb	r0, [r3, #0]
 8000b90:	7bba      	ldrb	r2, [r7, #14]
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3319      	adds	r3, #25
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f000 f8b4 	bl	8000d10 <GPIO_voidSetPinMode>
			  GPIO_voidSetPinOutputMode(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_OUTPUT_PIN_PUSH_PULL);
 8000ba8:	7bba      	ldrb	r2, [r7, #14]
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3318      	adds	r3, #24
 8000bb6:	7818      	ldrb	r0, [r3, #0]
 8000bb8:	7bba      	ldrb	r2, [r7, #14]
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3319      	adds	r3, #25
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f000 f8fa 	bl	8000dc4 <GPIO_voidSetPinOutputMode>
			  GPIO_voidSetPinOutputSpeed(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_OUTPUT_PIN_LOW_SPEED);
 8000bd0:	7bba      	ldrb	r2, [r7, #14]
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4413      	add	r3, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	3318      	adds	r3, #24
 8000bde:	7818      	ldrb	r0, [r3, #0]
 8000be0:	7bba      	ldrb	r2, [r7, #14]
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	3319      	adds	r3, #25
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f000 f938 	bl	8000e68 <GPIO_voidSetPinOutputSpeed>
			  GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,ledmat_obj->col[Local_ColumnsCounter].state);
 8000bf8:	7bba      	ldrb	r2, [r7, #14]
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	3318      	adds	r3, #24
 8000c06:	7818      	ldrb	r0, [r3, #0]
 8000c08:	7bba      	ldrb	r2, [r7, #14]
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	3319      	adds	r3, #25
 8000c16:	781c      	ldrb	r4, [r3, #0]
 8000c18:	7bba      	ldrb	r2, [r7, #14]
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	331a      	adds	r3, #26
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	f000 f976 	bl	8000f1c <GPIO_voidSetPinValue>
	for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	3301      	adds	r3, #1
 8000c34:	73bb      	strb	r3, [r7, #14]
 8000c36:	7bbb      	ldrb	r3, [r7, #14]
 8000c38:	2b07      	cmp	r3, #7
 8000c3a:	d980      	bls.n	8000b3e <HLEDMAT_voidInit+0x110>
		}
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}
	...

08000c48 <HLED_voidDisplayScrollingString>:
		LEDMAT_Delay_Flag =LEDMAT_DELAY_NOT_COMPLETED;
		Copy_pu8Str++;
	}
}
void HLED_voidDisplayScrollingString(ledmat_t* ledmat_obj,u8* Copy_pu8Str,u32 Copy_u32TimeMs)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	u8 Local_u8ColumnCounter = ZERO_INIT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	75fb      	strb	r3, [r7, #23]
	u8 Local_u8RowCounter = ZERO_INIT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	75bb      	strb	r3, [r7, #22]
	voidClearLEDMATBuffer(ledmat_obj);
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f7ff fe9f 	bl	80009a0 <voidClearLEDMATBuffer>
	while(*Copy_pu8Str)
 8000c62:	e03a      	b.n	8000cda <HLED_voidDisplayScrollingString+0x92>
	{
		for (Local_u8ColumnCounter = ZERO_INIT; Local_u8ColumnCounter <LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	75fb      	strb	r3, [r7, #23]
 8000c68:	e031      	b.n	8000cce <HLED_voidDisplayScrollingString+0x86>
			{
				for (Local_u8RowCounter = ZERO_INIT;Local_u8RowCounter<LED_MATRIX_ROW_NUM;Local_u8RowCounter++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	75bb      	strb	r3, [r7, #22]
 8000c6e:	e021      	b.n	8000cb4 <HLED_voidDisplayScrollingString+0x6c>
				{
						ledmat_obj->LedMatrix_Buffer[Local_u8RowCounter] |= ((Chr_font[*Copy_pu8Str-FONT_START][Local_u8RowCounter]>>Local_u8ColumnCounter&0x01)<<7);
 8000c70:	7dbb      	ldrb	r3, [r7, #22]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4413      	add	r3, r2
 8000c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c7a:	b25a      	sxtb	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	f1a3 0120 	sub.w	r1, r3, #32
 8000c84:	7dbb      	ldrb	r3, [r7, #22]
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <HLED_voidDisplayScrollingString+0xc4>)
 8000c88:	00c9      	lsls	r1, r1, #3
 8000c8a:	4401      	add	r1, r0
 8000c8c:	440b      	add	r3, r1
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	fa41 f303 	asr.w	r3, r1, r3
 8000c98:	01db      	lsls	r3, r3, #7
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b25a      	sxtb	r2, r3
 8000ca0:	7dbb      	ldrb	r3, [r7, #22]
 8000ca2:	b2d1      	uxtb	r1, r2
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	460a      	mov	r2, r1
 8000caa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				for (Local_u8RowCounter = ZERO_INIT;Local_u8RowCounter<LED_MATRIX_ROW_NUM;Local_u8RowCounter++)
 8000cae:	7dbb      	ldrb	r3, [r7, #22]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	75bb      	strb	r3, [r7, #22]
 8000cb4:	7dbb      	ldrb	r3, [r7, #22]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	d9da      	bls.n	8000c70 <HLED_voidDisplayScrollingString+0x28>
				}
				voidUpdateScreen_WithDelay(ledmat_obj,Copy_u32TimeMs);
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fdeb 	bl	8000898 <voidUpdateScreen_WithDelay>
				voidScrollLeft(ledmat_obj);
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff fe7b 	bl	80009be <voidScrollLeft>
		for (Local_u8ColumnCounter = ZERO_INIT; Local_u8ColumnCounter <LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	75fb      	strb	r3, [r7, #23]
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d9ca      	bls.n	8000c6a <HLED_voidDisplayScrollingString+0x22>
			}
		Copy_pu8Str++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
	while(*Copy_pu8Str)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1c0      	bne.n	8000c64 <HLED_voidDisplayScrollingString+0x1c>
	}
	for(Local_u8ColumnCounter =0; Local_u8ColumnCounter<LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	75fb      	strb	r3, [r7, #23]
 8000ce6:	e009      	b.n	8000cfc <HLED_voidDisplayScrollingString+0xb4>
	{
		voidScrollLeft(ledmat_obj);
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fe68 	bl	80009be <voidScrollLeft>
		voidUpdateScreen_WithDelay(ledmat_obj,Copy_u32TimeMs);
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f7ff fdd1 	bl	8000898 <voidUpdateScreen_WithDelay>
	for(Local_u8ColumnCounter =0; Local_u8ColumnCounter<LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	75fb      	strb	r3, [r7, #23]
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d9f2      	bls.n	8000ce8 <HLED_voidDisplayScrollingString+0xa0>
	}
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	080013d0 	.word	0x080013d0

08000d10 <GPIO_voidSetPinMode>:
#include"../../../Inc/MCAL/GPIO/GPIO_config.h"
#include"../../../Inc/MCAL/GPIO/GPIO_interface.h"
#include"../../../Inc/MCAL/GPIO/GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	71bb      	strb	r3, [r7, #6]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d02c      	beq.n	8000d82 <GPIO_voidSetPinMode+0x72>
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	dc3d      	bgt.n	8000da8 <GPIO_voidSetPinMode+0x98>
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <GPIO_voidSetPinMode+0x26>
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d013      	beq.n	8000d5c <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8000d34:	e038      	b.n	8000da8 <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <GPIO_voidSetPinMode+0xa8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	79ba      	ldrb	r2, [r7, #6]
 8000d3c:	0052      	lsls	r2, r2, #1
 8000d3e:	2103      	movs	r1, #3
 8000d40:	fa01 f202 	lsl.w	r2, r1, r2
 8000d44:	43d2      	mvns	r2, r2
 8000d46:	4013      	ands	r3, r2
 8000d48:	7979      	ldrb	r1, [r7, #5]
 8000d4a:	79ba      	ldrb	r2, [r7, #6]
 8000d4c:	0052      	lsls	r2, r2, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	4611      	mov	r1, r2
 8000d54:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <GPIO_voidSetPinMode+0xa8>)
 8000d56:	430b      	orrs	r3, r1
 8000d58:	6013      	str	r3, [r2, #0]
      break;
 8000d5a:	e026      	b.n	8000daa <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <GPIO_voidSetPinMode+0xac>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	79ba      	ldrb	r2, [r7, #6]
 8000d62:	0052      	lsls	r2, r2, #1
 8000d64:	2103      	movs	r1, #3
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	43d2      	mvns	r2, r2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	7979      	ldrb	r1, [r7, #5]
 8000d70:	79ba      	ldrb	r2, [r7, #6]
 8000d72:	0052      	lsls	r2, r2, #1
 8000d74:	fa01 f202 	lsl.w	r2, r1, r2
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <GPIO_voidSetPinMode+0xac>)
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	6013      	str	r3, [r2, #0]
      break;
 8000d80:	e013      	b.n	8000daa <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <GPIO_voidSetPinMode+0xb0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	79ba      	ldrb	r2, [r7, #6]
 8000d88:	0052      	lsls	r2, r2, #1
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	4013      	ands	r3, r2
 8000d94:	7979      	ldrb	r1, [r7, #5]
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	0052      	lsls	r2, r2, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <GPIO_voidSetPinMode+0xb0>)
 8000da2:	430b      	orrs	r3, r1
 8000da4:	6013      	str	r3, [r2, #0]
      break;
 8000da6:	e000      	b.n	8000daa <GPIO_voidSetPinMode+0x9a>
      break;
 8000da8:	bf00      	nop
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	40020800 	.word	0x40020800

08000dc4 <GPIO_voidSetPinOutputMode>:
void GPIO_voidSetPinOutputMode(port_index_t Copy_PortIndex,
                               pin_index_t Copy_PinIndex,
                               output_pin_mode_t Copy_OutputPinMode) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	71bb      	strb	r3, [r7, #6]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d028      	beq.n	8000e2e <GPIO_voidSetPinOutputMode+0x6a>
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	dc37      	bgt.n	8000e50 <GPIO_voidSetPinOutputMode+0x8c>
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <GPIO_voidSetPinOutputMode+0x26>
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d011      	beq.n	8000e0c <GPIO_voidSetPinOutputMode+0x48>
    case GPIO_PORTC:
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
                 Copy_OutputPinMode << Copy_PinIndex);
      break;
    default:
      break;
 8000de8:	e032      	b.n	8000e50 <GPIO_voidSetPinOutputMode+0x8c>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <GPIO_voidSetPinOutputMode+0x9c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	79ba      	ldrb	r2, [r7, #6]
 8000df0:	2101      	movs	r1, #1
 8000df2:	fa01 f202 	lsl.w	r2, r1, r2
 8000df6:	43d2      	mvns	r2, r2
 8000df8:	4013      	ands	r3, r2
 8000dfa:	7979      	ldrb	r1, [r7, #5]
 8000dfc:	79ba      	ldrb	r2, [r7, #6]
 8000dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000e02:	4611      	mov	r1, r2
 8000e04:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <GPIO_voidSetPinOutputMode+0x9c>)
 8000e06:	430b      	orrs	r3, r1
 8000e08:	6013      	str	r3, [r2, #0]
      break;
 8000e0a:	e022      	b.n	8000e52 <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <GPIO_voidSetPinOutputMode+0x9c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	79ba      	ldrb	r2, [r7, #6]
 8000e12:	2101      	movs	r1, #1
 8000e14:	fa01 f202 	lsl.w	r2, r1, r2
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	7979      	ldrb	r1, [r7, #5]
 8000e1e:	79ba      	ldrb	r2, [r7, #6]
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4611      	mov	r1, r2
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <GPIO_voidSetPinOutputMode+0x9c>)
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6013      	str	r3, [r2, #0]
      break;
 8000e2c:	e011      	b.n	8000e52 <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <GPIO_voidSetPinOutputMode+0xa0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	79ba      	ldrb	r2, [r7, #6]
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	43d2      	mvns	r2, r2
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	7979      	ldrb	r1, [r7, #5]
 8000e40:	79ba      	ldrb	r2, [r7, #6]
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	4611      	mov	r1, r2
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <GPIO_voidSetPinOutputMode+0xa0>)
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	6013      	str	r3, [r2, #0]
      break;
 8000e4e:	e000      	b.n	8000e52 <GPIO_voidSetPinOutputMode+0x8e>
      break;
 8000e50:	bf00      	nop
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40020404 	.word	0x40020404
 8000e64:	40020804 	.word	0x40020804

08000e68 <GPIO_voidSetPinOutputSpeed>:
void GPIO_voidSetPinOutputSpeed(port_index_t Copy_PortIndex,
                                pin_index_t Copy_PinIndex,
                                output_pin_speed_mode_t Copy_OutputPinSpeed) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	460b      	mov	r3, r1
 8000e74:	71bb      	strb	r3, [r7, #6]
 8000e76:	4613      	mov	r3, r2
 8000e78:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d02c      	beq.n	8000eda <GPIO_voidSetPinOutputSpeed+0x72>
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	dc3d      	bgt.n	8000f00 <GPIO_voidSetPinOutputSpeed+0x98>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <GPIO_voidSetPinOutputSpeed+0x26>
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d013      	beq.n	8000eb4 <GPIO_voidSetPinOutputSpeed+0x4c>
      MODIFY_REG(GPIOC_OSPEEDR,
                 GPIO_MODER_CLEAR_MASK << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex,
                 Copy_OutputPinSpeed << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8000e8c:	e038      	b.n	8000f00 <GPIO_voidSetPinOutputSpeed+0x98>
      MODIFY_REG(
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	79ba      	ldrb	r2, [r7, #6]
 8000e94:	0052      	lsls	r2, r2, #1
 8000e96:	2103      	movs	r1, #3
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	7979      	ldrb	r1, [r7, #5]
 8000ea2:	79ba      	ldrb	r2, [r7, #6]
 8000ea4:	0052      	lsls	r2, r2, #1
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8000eae:	430b      	orrs	r3, r1
 8000eb0:	6013      	str	r3, [r2, #0]
      break;
 8000eb2:	e026      	b.n	8000f02 <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <GPIO_voidSetPinOutputSpeed+0xac>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	79ba      	ldrb	r2, [r7, #6]
 8000eba:	0052      	lsls	r2, r2, #1
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	43d2      	mvns	r2, r2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	7979      	ldrb	r1, [r7, #5]
 8000ec8:	79ba      	ldrb	r2, [r7, #6]
 8000eca:	0052      	lsls	r2, r2, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <GPIO_voidSetPinOutputSpeed+0xac>)
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	6013      	str	r3, [r2, #0]
      break;
 8000ed8:	e013      	b.n	8000f02 <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(GPIOC_OSPEEDR,
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <GPIO_voidSetPinOutputSpeed+0xb0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	43d2      	mvns	r2, r2
 8000eea:	4013      	ands	r3, r2
 8000eec:	7979      	ldrb	r1, [r7, #5]
 8000eee:	79ba      	ldrb	r2, [r7, #6]
 8000ef0:	0052      	lsls	r2, r2, #1
 8000ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <GPIO_voidSetPinOutputSpeed+0xb0>)
 8000efa:	430b      	orrs	r3, r1
 8000efc:	6013      	str	r3, [r2, #0]
      break;
 8000efe:	e000      	b.n	8000f02 <GPIO_voidSetPinOutputSpeed+0x9a>
      break;
 8000f00:	bf00      	nop
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40020008 	.word	0x40020008
 8000f14:	40020408 	.word	0x40020408
 8000f18:	40020808 	.word	0x40020808

08000f1c <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	460b      	mov	r3, r1
 8000f28:	71bb      	strb	r3, [r7, #6]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d02c      	beq.n	8000f8e <GPIO_voidSetPinValue+0x72>
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	dc3d      	bgt.n	8000fb4 <GPIO_voidSetPinValue+0x98>
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <GPIO_voidSetPinValue+0x26>
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d013      	beq.n	8000f68 <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 8000f40:	e038      	b.n	8000fb4 <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8000f42:	797b      	ldrb	r3, [r7, #5]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d105      	bne.n	8000f54 <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <GPIO_voidSetPinValue+0xb4>)
 8000f50:	601a      	str	r2, [r3, #0]
      break;
 8000f52:	e031      	b.n	8000fb8 <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8000f54:	797b      	ldrb	r3, [r7, #5]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d12e      	bne.n	8000fb8 <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f60:	409a      	lsls	r2, r3
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <GPIO_voidSetPinValue+0xb4>)
 8000f64:	601a      	str	r2, [r3, #0]
      break;
 8000f66:	e027      	b.n	8000fb8 <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d105      	bne.n	8000f7a <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	2201      	movs	r2, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <GPIO_voidSetPinValue+0xb8>)
 8000f76:	601a      	str	r2, [r3, #0]
      break;
 8000f78:	e020      	b.n	8000fbc <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d11d      	bne.n	8000fbc <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f86:	409a      	lsls	r2, r3
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <GPIO_voidSetPinValue+0xb8>)
 8000f8a:	601a      	str	r2, [r3, #0]
      break;
 8000f8c:	e016      	b.n	8000fbc <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8000f8e:	797b      	ldrb	r3, [r7, #5]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d105      	bne.n	8000fa0 <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2201      	movs	r2, #1
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <GPIO_voidSetPinValue+0xbc>)
 8000f9c:	601a      	str	r2, [r3, #0]
      break;
 8000f9e:	e00f      	b.n	8000fc0 <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fac:	409a      	lsls	r2, r3
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <GPIO_voidSetPinValue+0xbc>)
 8000fb0:	601a      	str	r2, [r3, #0]
      break;
 8000fb2:	e005      	b.n	8000fc0 <GPIO_voidSetPinValue+0xa4>
      break;
 8000fb4:	bf00      	nop
 8000fb6:	e004      	b.n	8000fc2 <GPIO_voidSetPinValue+0xa6>
      break;
 8000fb8:	bf00      	nop
 8000fba:	e002      	b.n	8000fc2 <GPIO_voidSetPinValue+0xa6>
      break;
 8000fbc:	bf00      	nop
 8000fbe:	e000      	b.n	8000fc2 <GPIO_voidSetPinValue+0xa6>
      break;
 8000fc0:	bf00      	nop
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40020018 	.word	0x40020018
 8000fd4:	40020418 	.word	0x40020418
 8000fd8:	40020818 	.word	0x40020818

08000fdc <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 8000fe0:	f000 f8bc 	bl	800115c <MSCB_voidSetPriorityGrouping>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <RCC_void_HSI_Init>:
static void RCC_void_APB2Prescaler_Init(void);
/************************************************/

/******* Local Functions Implementation ********/
static void RCC_void_HSI_Init(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Enable HSI
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <RCC_void_HSI_Init+0x58>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a13      	ldr	r2, [pc, #76]	; (8001040 <RCC_void_HSI_Init+0x58>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE  
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <RCC_void_HSI_Init+0x58>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <RCC_void_HSI_Init+0x58>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <RCC_void_HSI_Init+0x58>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <RCC_void_HSI_Init+0x58>)
 800100a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800100e:	6013      	str	r3, [r2, #0]
    // Polling (Busy Wait)
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
 8001010:	bf00      	nop
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <RCC_void_HSI_Init+0x58>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f9      	beq.n	8001012 <RCC_void_HSI_Init+0x2a>
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <RCC_void_HSI_Init+0x5c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <RCC_void_HSI_Init+0x5c>)
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <RCC_void_HSI_Init+0x5c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <RCC_void_HSI_Init+0x5c>)
 8001030:	f023 0302 	bic.w	r3, r3, #2
 8001034:	6013      	str	r3, [r2, #0]
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40023800 	.word	0x40023800
 8001044:	40023808 	.word	0x40023808

08001048 <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_1;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_2
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <RCC_void_AHB1Prescaler_Init+0x28>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <RCC_void_AHB1Prescaler_Init+0x28>)
 8001052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001056:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_2;
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <RCC_void_AHB1Prescaler_Init+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <RCC_void_AHB1Prescaler_Init+0x28>)
 800105e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001062:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023808 	.word	0x40023808

08001074 <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <RCC_void_APB1Prescaler_Init+0x24>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <RCC_void_APB1Prescaler_Init+0x24>)
 800107e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001082:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <RCC_void_APB1Prescaler_Init+0x24>)
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <RCC_void_APB1Prescaler_Init+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023808 	.word	0x40023808

0800109c <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <RCC_void_APB2Prescaler_Init+0x24>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <RCC_void_APB2Prescaler_Init+0x24>)
 80010a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010aa:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <RCC_void_APB2Prescaler_Init+0x24>)
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <RCC_void_APB2Prescaler_Init+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023808 	.word	0x40023808

080010c4 <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
 80010c8:	f7ff ff8e 	bl	8000fe8 <RCC_void_HSI_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 80010cc:	f7ff ffbc 	bl	8001048 <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 80010d0:	f7ff ffd0 	bl	8001074 <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 80010d4:	f7ff ffe2 	bl	800109c <RCC_void_APB2Prescaler_Init>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d01c      	beq.n	800112c <RCC_voidEnablePeripheralClock+0x50>
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	dc25      	bgt.n	8001142 <RCC_voidEnablePeripheralClock+0x66>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <RCC_voidEnablePeripheralClock+0x24>
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d00b      	beq.n	8001116 <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 80010fe:	e020      	b.n	8001142 <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <RCC_voidEnablePeripheralClock+0x74>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	4611      	mov	r1, r2
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <RCC_voidEnablePeripheralClock+0x74>)
 8001110:	430b      	orrs	r3, r1
 8001112:	6013      	str	r3, [r2, #0]
        break;
 8001114:	e016      	b.n	8001144 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <RCC_voidEnablePeripheralClock+0x78>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	4611      	mov	r1, r2
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <RCC_voidEnablePeripheralClock+0x78>)
 8001126:	430b      	orrs	r3, r1
 8001128:	6013      	str	r3, [r2, #0]
        break;
 800112a:	e00b      	b.n	8001144 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <RCC_voidEnablePeripheralClock+0x7c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	79ba      	ldrb	r2, [r7, #6]
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4611      	mov	r1, r2
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <RCC_voidEnablePeripheralClock+0x7c>)
 800113c:	430b      	orrs	r3, r1
 800113e:	6013      	str	r3, [r2, #0]
        break;  
 8001140:	e000      	b.n	8001144 <RCC_voidEnablePeripheralClock+0x68>
        break;
 8001142:	bf00      	nop
    }
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40023830 	.word	0x40023830
 8001154:	40023840 	.word	0x40023840
 8001158:	40023844 	.word	0x40023844

0800115c <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 8001166:	2305      	movs	r3, #5
 8001168:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <MSCB_voidSetPriorityGrouping+0x44>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001176:	4013      	ands	r3, r2
 8001178:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	021a      	lsls	r2, r3, #8
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4313      	orrs	r3, r2
 8001182:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118a:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <MSCB_voidSetPriorityGrouping+0x44>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60d3      	str	r3, [r2, #12]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_Pos);
#elif (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8)
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MSysTick_voidInit+0x34>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <MSysTick_voidInit+0x34>)
 80011ae:	f023 0304 	bic.w	r3, r3, #4
 80011b2:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MSysTick_voidInit+0x34>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <MSysTick_voidInit+0x34>)
 80011ba:	f023 0302 	bic.w	r3, r3, #2
 80011be:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <MSysTick_voidInit+0x34>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <MSysTick_voidInit+0x34>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MSysTick_voidDeInit+0x34>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <MSysTick_voidDeInit+0x34>)
 80011e6:	f023 0301 	bic.w	r3, r3, #1
 80011ea:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MSysTick_voidDeInit+0x34>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MSysTick_voidDeInit+0x34>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <MSysTick_voidDeInit+0x34>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <MSysTick_voidDeInit+0x34>)
 80011fe:	f023 0302 	bic.w	r3, r3, #2
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <SysTick_Handler>:
	/* Return The Local Variable */
	return Local_RemainingTicks;
}

void SysTick_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <SysTick_Handler+0x24>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 8001222:	f7ff ffdb 	bl	80011dc <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <SysTick_Handler+0x28>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 800122e:	4b03      	ldr	r3, [pc, #12]	; (800123c <SysTick_Handler+0x28>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4798      	blx	r3
	}
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000005c 	.word	0x2000005c
 800123c:	20000058 	.word	0x20000058

08001240 <MSysTick_void_ASYNC_Delay_ms>:
	SysTick->LOAD = 0;
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
}
void MSysTick_void_ASYNC_Delay_ms(u32 time_ms,PtrFunction CallBack_Ptr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	u32 Local_ticks = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
	if (CallBack_Ptr != NULL)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d02e      	beq.n	80012b2 <MSysTick_void_ASYNC_Delay_ms+0x72>
		{
			Local_ticks = (u32)(((SYSTICK_AHB_CLK/SYSTICK_CLOCK_SOURCE)/1000.0)*time_ms);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fa29 	bl	80006ac <__aeabi_ui2d>
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MSysTick_void_ASYNC_Delay_ms+0x7c>)
 8001260:	f7fe ffb8 	bl	80001d4 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fa98 	bl	80007a0 <__aeabi_d2uiz>
 8001270:	4603      	mov	r3, r0
 8001272:	60fb      	str	r3, [r7, #12]
			if(Local_ticks>SysTick_LOAD_RELOAD_Msk)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127a:	d302      	bcc.n	8001282 <MSysTick_void_ASYNC_Delay_ms+0x42>
			{
				Local_ticks = SysTick_LOAD_RELOAD_Msk;
 800127c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001280:	60fb      	str	r3, [r7, #12]
			}
		  /* Set Reload Register to SysTick Ticks */
		  	SysTick->LOAD = Local_ticks;
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6053      	str	r3, [r2, #4]
		  	SysTick->VAL = 0;
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
			/* Copy The User CallBack to Local ptrFunction */
			SysTick_CallBack = CallBack_Ptr;
 800128e:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <MSysTick_void_ASYNC_Delay_ms+0x84>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	6013      	str	r3, [r2, #0]
			/* Set The SysTick Timer to Single Interval Mode */
			SysTick_Mode = SysTick_SingleInterval_Mode;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MSysTick_void_ASYNC_Delay_ms+0x88>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
			/*Enable SysTick IRQ */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6013      	str	r3, [r2, #0]
			/* Enable SysTick Counter */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6013      	str	r3, [r2, #0]
		}
		else { /* Nothing */}
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	408f4000 	.word	0x408f4000
 80012c0:	e000e010 	.word	0xe000e010
 80012c4:	20000058 	.word	0x20000058
 80012c8:	2000005c 	.word	0x2000005c

080012cc <main>:
#include "HAL/LEDMAT/LEDMAT_config.h"
// ----------------------------------------------------------------------------
u8 ledarr[8]={0, 14, 10, 10, 4, 10, 17, 0};

int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	HLEDMAT_voidInit( &ledmat_obj);
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <main+0x18>)
 80012d2:	f7ff fbac 	bl	8000a2e <HLEDMAT_voidInit>
    /* Loop forever */
	while(1){
		HLED_voidDisplayScrollingString(&ledmat_obj,"ILOVELOLY",130);
 80012d6:	2282      	movs	r2, #130	; 0x82
 80012d8:	4903      	ldr	r1, [pc, #12]	; (80012e8 <main+0x1c>)
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <main+0x18>)
 80012dc:	f7ff fcb4 	bl	8000c48 <HLED_voidDisplayScrollingString>
 80012e0:	e7f9      	b.n	80012d6 <main+0xa>
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000
 80012e8:	080013c4 	.word	0x080013c4

080012ec <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	RCC_voidInit();
 80012f0:	f7ff fee8 	bl	80010c4 <RCC_voidInit>
	MSysTick_voidInit();
 80012f4:	f7ff ff56 	bl	80011a4 <MSysTick_voidInit>
	MNVIC_voidInit();
 80012f8:	f7ff fe70 	bl	8000fdc <MNVIC_voidInit>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001304:	f7ff fff2 	bl	80012ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800132e:	f000 f819 	bl	8001364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff ffcb 	bl	80012cc <main>

08001336 <LoopForever>:

LoopForever:
  b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   r0, =_estack
 8001338:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001344:	080016d0 	.word	0x080016d0
  ldr r2, =_sbss
 8001348:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 800134c:	20000060 	.word	0x20000060

08001350 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC_IRQHandler>

08001352 <memset>:
 8001352:	4402      	add	r2, r0
 8001354:	4603      	mov	r3, r0
 8001356:	4293      	cmp	r3, r2
 8001358:	d100      	bne.n	800135c <memset+0xa>
 800135a:	4770      	bx	lr
 800135c:	f803 1b01 	strb.w	r1, [r3], #1
 8001360:	e7f9      	b.n	8001356 <memset+0x4>
	...

08001364 <__libc_init_array>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4d0d      	ldr	r5, [pc, #52]	; (800139c <__libc_init_array+0x38>)
 8001368:	4c0d      	ldr	r4, [pc, #52]	; (80013a0 <__libc_init_array+0x3c>)
 800136a:	1b64      	subs	r4, r4, r5
 800136c:	10a4      	asrs	r4, r4, #2
 800136e:	2600      	movs	r6, #0
 8001370:	42a6      	cmp	r6, r4
 8001372:	d109      	bne.n	8001388 <__libc_init_array+0x24>
 8001374:	4d0b      	ldr	r5, [pc, #44]	; (80013a4 <__libc_init_array+0x40>)
 8001376:	4c0c      	ldr	r4, [pc, #48]	; (80013a8 <__libc_init_array+0x44>)
 8001378:	f000 f818 	bl	80013ac <_init>
 800137c:	1b64      	subs	r4, r4, r5
 800137e:	10a4      	asrs	r4, r4, #2
 8001380:	2600      	movs	r6, #0
 8001382:	42a6      	cmp	r6, r4
 8001384:	d105      	bne.n	8001392 <__libc_init_array+0x2e>
 8001386:	bd70      	pop	{r4, r5, r6, pc}
 8001388:	f855 3b04 	ldr.w	r3, [r5], #4
 800138c:	4798      	blx	r3
 800138e:	3601      	adds	r6, #1
 8001390:	e7ee      	b.n	8001370 <__libc_init_array+0xc>
 8001392:	f855 3b04 	ldr.w	r3, [r5], #4
 8001396:	4798      	blx	r3
 8001398:	3601      	adds	r6, #1
 800139a:	e7f2      	b.n	8001382 <__libc_init_array+0x1e>
 800139c:	080016c8 	.word	0x080016c8
 80013a0:	080016c8 	.word	0x080016c8
 80013a4:	080016c8 	.word	0x080016c8
 80013a8:	080016cc 	.word	0x080016cc

080013ac <_init>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	bf00      	nop
 80013b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	469e      	mov	lr, r3
 80013b6:	4770      	bx	lr

080013b8 <_fini>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr
