
STM32F401CCU6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a2c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001bc4  08001bc4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001bc4  08001bc4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001bc4  08001bc4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bc4  08001bc4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bc4  08001bc4  00011bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bc8  08001bc8  00011bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000014  08001be0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001be0  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b5a  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e3c  00000000  00000000  00022be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000430  00000000  00000000  00023a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000c36  00000000  00000000  00023e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002633  00000000  00000000  00024a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006fce  00000000  00000000  000270b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000002c4  00000000  00000000  0002e087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000df4  00000000  00000000  0002e34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0002f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001bac 	.word	0x08001bac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08001bac 	.word	0x08001bac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <IR_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void IR_voidInit (IR_Config_t *Copy_IR_Config , pCallBackNotification IR_CallbackNotification)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	MEXTI_CONFIG_t IR_EXTI_Config;
	IR_EXTI_Config.MEXTI_Mode = MEXTI_INTERRUPT_MODE;
 80009be:	2300      	movs	r3, #0
 80009c0:	73fb      	strb	r3, [r7, #15]
	IR_EXTI_Config.MEXTI_SenseSignal = Copy_IR_Config->IR_Trigger_Mode;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	789b      	ldrb	r3, [r3, #2]
 80009c6:	73bb      	strb	r3, [r7, #14]
	IR_EXTI_Config.MEXTI_Line = Copy_IR_Config->IR_Pin;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	785b      	ldrb	r3, [r3, #1]
 80009cc:	737b      	strb	r3, [r7, #13]
    IR_EXTI_Config.MEXTI_Port = Copy_IR_Config->IR_Port;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	733b      	strb	r3, [r7, #12]
	MEXTI_voidInit(&IR_EXTI_Config,IR_EXTI_Handler);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	491a      	ldr	r1, [pc, #104]	; (8000a44 <IR_voidInit+0x90>)
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 faa4 	bl	8000f28 <MEXTI_voidInit>
	switch (Copy_IR_Config->IR_Port)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d010      	beq.n	8000a0a <IR_voidInit+0x56>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	dc13      	bgt.n	8000a14 <IR_voidInit+0x60>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <IR_voidInit+0x42>
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d005      	beq.n	8000a00 <IR_voidInit+0x4c>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 80009f4:	e00e      	b.n	8000a14 <IR_voidInit+0x60>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 80009f6:	2100      	movs	r1, #0
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 ff45 	bl	8001888 <RCC_voidEnablePeripheralClock>
	      break;
 80009fe:	e00a      	b.n	8000a16 <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8000a00:	2101      	movs	r1, #1
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 ff40 	bl	8001888 <RCC_voidEnablePeripheralClock>
	      break;
 8000a08:	e005      	b.n	8000a16 <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 ff3b 	bl	8001888 <RCC_voidEnablePeripheralClock>
	      break;
 8000a12:	e000      	b.n	8000a16 <IR_voidInit+0x62>
	      break;
 8000a14:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_MODE);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7818      	ldrb	r0, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4619      	mov	r1, r3
 8000a22:	f000 fcd3 	bl	80013cc <GPIO_voidSetPinMode>
	  GPIO_voidSetPinPullUpDownResistor(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_FLOAT);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7818      	ldrb	r0, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	785b      	ldrb	r3, [r3, #1]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4619      	mov	r1, r3
 8000a32:	f000 fe31 	bl	8001698 <GPIO_voidSetPinPullUpDownResistor>
	  IR_callback = IR_CallbackNotification;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <IR_voidInit+0x94>)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08000a65 	.word	0x08000a65
 8000a48:	20000030 	.word	0x20000030

08000a4c <IR_u32GetReceivedData>:
	}
	return Local_IR_ReceivedFlag;
}

u32  IR_u32GetReceivedData(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
	return IR_ReceivedData;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <IR_u32GetReceivedData+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000034 	.word	0x20000034

08000a64 <IR_EXTI_Handler>:

static void IR_EXTI_Handler()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	static u8 IR_Status_Flag = IR_START_SIGNAL_STARTED;
	static s8 IR_BitCounter = IR_BIT_COUNT_INIT;
	u32 IR_ElapsedTime = ZERO_INIT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
	if(IR_Status_Flag == IR_START_SIGNAL_STARTED)
 8000a6e:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <IR_EXTI_Handler+0x114>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d107      	bne.n	8000a86 <IR_EXTI_Handler+0x22>
	{
		IR_Status_Flag = IR_START_SIGNAL_ENDED;
 8000a76:	4b40      	ldr	r3, [pc, #256]	; (8000b78 <IR_EXTI_Handler+0x114>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
		MSystick_voidSetPreloadvalue(IR_START_SIGNAL_RANGE_HIGH);
 8000a7c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000a80:	f000 ffc4 	bl	8001a0c <MSystick_voidSetPreloadvalue>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
		}

	}

}
 8000a84:	e073      	b.n	8000b6e <IR_EXTI_Handler+0x10a>
	else if (IR_Status_Flag == IR_START_SIGNAL_ENDED)
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <IR_EXTI_Handler+0x114>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d112      	bne.n	8000ab4 <IR_EXTI_Handler+0x50>
		IR_ElapsedTime = MSysTick_u32GetElapsedTime_us();
 8000a8e:	f000 ff97 	bl	80019c0 <MSysTick_u32GetElapsedTime_us>
 8000a92:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_START_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_START_SIGNAL_RANGE_HIGH)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f243 22c7 	movw	r2, #12999	; 0x32c7
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d907      	bls.n	8000aae <IR_EXTI_Handler+0x4a>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d802      	bhi.n	8000aae <IR_EXTI_Handler+0x4a>
			IR_Status_Flag = IR_GETTING_DATA;
 8000aa8:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <IR_EXTI_Handler+0x114>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	701a      	strb	r2, [r3, #0]
		MSystick_voidResetTimer();
 8000aae:	f000 ffa1 	bl	80019f4 <MSystick_voidResetTimer>
}
 8000ab2:	e05c      	b.n	8000b6e <IR_EXTI_Handler+0x10a>
	else if (IR_Status_Flag == IR_GETTING_DATA)
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <IR_EXTI_Handler+0x114>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d143      	bne.n	8000b44 <IR_EXTI_Handler+0xe0>
		IR_ElapsedTime = MSysTick_u32GetElapsedTime_us();
 8000abc:	f000 ff80 	bl	80019c0 <MSysTick_u32GetElapsedTime_us>
 8000ac0:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_LOW_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_LOW_LEVEL_SIGNAL_RANGE_HIGH)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac8:	d312      	bcc.n	8000af0 <IR_EXTI_Handler+0x8c>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d80d      	bhi.n	8000af0 <IR_EXTI_Handler+0x8c>
			CLR_BIT(IR_ReceivedData,IR_BitCounter);
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <IR_EXTI_Handler+0x118>)
 8000ad6:	f993 3000 	ldrsb.w	r3, [r3]
 8000ada:	461a      	mov	r2, r3
 8000adc:	2301      	movs	r3, #1
 8000ade:	4093      	lsls	r3, r2
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <IR_EXTI_Handler+0x11c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <IR_EXTI_Handler+0x11c>)
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e014      	b.n	8000b1a <IR_EXTI_Handler+0xb6>
		else if (IR_ElapsedTime >= IR_HIGH_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_HIGH_LEVEL_SIGNAL_RANGE_HIGH)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000af6:	d310      	bcc.n	8000b1a <IR_EXTI_Handler+0xb6>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d80b      	bhi.n	8000b1a <IR_EXTI_Handler+0xb6>
			SET_BIT(IR_ReceivedData,IR_BitCounter);
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <IR_EXTI_Handler+0x118>)
 8000b04:	f993 3000 	ldrsb.w	r3, [r3]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4093      	lsls	r3, r2
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <IR_EXTI_Handler+0x11c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <IR_EXTI_Handler+0x11c>)
 8000b18:	6013      	str	r3, [r2, #0]
		IR_BitCounter--;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <IR_EXTI_Handler+0x118>)
 8000b1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	3b01      	subs	r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	b25a      	sxtb	r2, r3
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <IR_EXTI_Handler+0x118>)
 8000b2a:	701a      	strb	r2, [r3, #0]
		if(IR_BitCounter == IR_BIT_COUNT_END) IR_Status_Flag = IR_END_OF_FRAME_DETECTED;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <IR_EXTI_Handler+0x118>)
 8000b2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b36:	d102      	bne.n	8000b3e <IR_EXTI_Handler+0xda>
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <IR_EXTI_Handler+0x114>)
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	701a      	strb	r2, [r3, #0]
		MSystick_voidResetTimer();
 8000b3e:	f000 ff59 	bl	80019f4 <MSystick_voidResetTimer>
}
 8000b42:	e014      	b.n	8000b6e <IR_EXTI_Handler+0x10a>
	else if(IR_Status_Flag == IR_END_OF_FRAME_DETECTED)
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <IR_EXTI_Handler+0x114>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b05      	cmp	r3, #5
 8000b4a:	d110      	bne.n	8000b6e <IR_EXTI_Handler+0x10a>
		IR_BitCounter = IR_BIT_COUNT_INIT;
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <IR_EXTI_Handler+0x118>)
 8000b4e:	221f      	movs	r2, #31
 8000b50:	701a      	strb	r2, [r3, #0]
		IR_Status_Flag =  IR_START_SIGNAL_STARTED;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <IR_EXTI_Handler+0x114>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
		if(IR_callback != NULL){
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <IR_EXTI_Handler+0x120>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <IR_EXTI_Handler+0x104>
			IR_callback();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <IR_EXTI_Handler+0x120>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4798      	blx	r3
}
 8000b66:	e002      	b.n	8000b6e <IR_EXTI_Handler+0x10a>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <IR_EXTI_Handler+0x124>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000039 	.word	0x20000039
 8000b7c:	20000003 	.word	0x20000003
 8000b80:	20000034 	.word	0x20000034
 8000b84:	20000030 	.word	0x20000030
 8000b88:	20000038 	.word	0x20000038

08000b8c <LED_voidInit>:
#include "../../../Inc/HAL/LED/LED_interface.h"
#include "../../../Inc/HAL/LED/LED_private.h"


// Software Interfaces Definitions
void LED_voidInit(Led_t* REF_LedObj) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  switch (REF_LedObj->led_port) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	785b      	ldrb	r3, [r3, #1]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d010      	beq.n	8000bbe <LED_voidInit+0x32>
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	dc13      	bgt.n	8000bc8 <LED_voidInit+0x3c>
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <LED_voidInit+0x1e>
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d005      	beq.n	8000bb4 <LED_voidInit+0x28>
      break;
    case GPIO_PORTC:
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
      break;
    default:
      break;
 8000ba8:	e00e      	b.n	8000bc8 <LED_voidInit+0x3c>
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8000baa:	2100      	movs	r1, #0
 8000bac:	2000      	movs	r0, #0
 8000bae:	f000 fe6b 	bl	8001888 <RCC_voidEnablePeripheralClock>
      break;
 8000bb2:	e00a      	b.n	8000bca <LED_voidInit+0x3e>
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fe66 	bl	8001888 <RCC_voidEnablePeripheralClock>
      break;
 8000bbc:	e005      	b.n	8000bca <LED_voidInit+0x3e>
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fe61 	bl	8001888 <RCC_voidEnablePeripheralClock>
      break;
 8000bc6:	e000      	b.n	8000bca <LED_voidInit+0x3e>
      break;
 8000bc8:	bf00      	nop
  }
  GPIO_voidSetPinMode(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_OUTPUT_PIN_MODE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7858      	ldrb	r0, [r3, #1]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f000 fbf9 	bl	80013cc <GPIO_voidSetPinMode>
  GPIO_voidSetPinOutputMode(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_OUTPUT_PIN_PUSH_PULL);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7858      	ldrb	r0, [r3, #1]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	f000 fc4b 	bl	8001480 <GPIO_voidSetPinOutputMode>
  GPIO_voidSetPinOutputSpeed(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_OUTPUT_PIN_LOW_SPEED);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7858      	ldrb	r0, [r3, #1]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f000 fc95 	bl	8001524 <GPIO_voidSetPinOutputSpeed>
  GPIO_voidSetPinValue(REF_LedObj->led_port,REF_LedObj->led_pin,REF_LedObj->led_logic);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7858      	ldrb	r0, [r3, #1]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7819      	ldrb	r1, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	461a      	mov	r2, r3
 8000c08:	f000 fce6 	bl	80015d8 <GPIO_voidSetPinValue>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <LED_voidOn>:
void LED_voidOn(Led_t* REF_LedObj) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    GPIO_voidSetPinValue(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_HIGH);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7858      	ldrb	r0, [r3, #1]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2201      	movs	r2, #1
 8000c26:	4619      	mov	r1, r3
 8000c28:	f000 fcd6 	bl	80015d8 <GPIO_voidSetPinValue>
    REF_LedObj->led_logic = GPIO_HIGH;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	709a      	strb	r2, [r3, #2]
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <LED_voidOff>:
void LED_voidOff(Led_t* REF_LedObj) {
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
    GPIO_voidSetPinValue(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_LOW);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7858      	ldrb	r0, [r3, #1]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f000 fcc3 	bl	80015d8 <GPIO_voidSetPinValue>
    REF_LedObj->led_logic = GPIO_LOW;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	709a      	strb	r2, [r3, #2]
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <LED_voidToggle>:
void LED_voidToggle(Led_t* REF_LedObj)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    if (REF_LedObj->led_logic == GPIO_HIGH)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	789b      	ldrb	r3, [r3, #2]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d103      	bne.n	8000c78 <LED_voidToggle+0x18>
    {
        LED_voidOff(REF_LedObj);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ffe2 	bl	8000c3a <LED_voidOff>
    }
    else if(REF_LedObj->led_logic == GPIO_LOW){
        LED_voidOn(REF_LedObj);
    }
 8000c76:	e006      	b.n	8000c86 <LED_voidToggle+0x26>
    else if(REF_LedObj->led_logic == GPIO_LOW){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	789b      	ldrb	r3, [r3, #2]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <LED_voidToggle+0x26>
        LED_voidOn(REF_LedObj);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ffc7 	bl	8000c14 <LED_voidOn>
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <RGB_init_led>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void RGB_init_led(port_index_t RGB_LedPort, pin_index_t RGB_LedPin)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	460a      	mov	r2, r1
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	71bb      	strb	r3, [r7, #6]
	switch (RGB_LedPort) {
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d010      	beq.n	8000cc6 <RGB_init_led+0x38>
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	dc13      	bgt.n	8000cd0 <RGB_init_led+0x42>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <RGB_init_led+0x24>
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d005      	beq.n	8000cbc <RGB_init_led+0x2e>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 8000cb0:	e00e      	b.n	8000cd0 <RGB_init_led+0x42>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 fde7 	bl	8001888 <RCC_voidEnablePeripheralClock>
	      break;
 8000cba:	e00a      	b.n	8000cd2 <RGB_init_led+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 fde2 	bl	8001888 <RCC_voidEnablePeripheralClock>
	      break;
 8000cc4:	e005      	b.n	8000cd2 <RGB_init_led+0x44>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fddd 	bl	8001888 <RCC_voidEnablePeripheralClock>
	      break;
 8000cce:	e000      	b.n	8000cd2 <RGB_init_led+0x44>
	      break;
 8000cd0:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(RGB_LedPort,RGB_LedPin,GPIO_OUTPUT_PIN_MODE);
 8000cd2:	79b9      	ldrb	r1, [r7, #6]
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fb77 	bl	80013cc <GPIO_voidSetPinMode>
	  GPIO_voidSetPinOutputMode(RGB_LedPort,RGB_LedPin,GPIO_OUTPUT_PIN_PUSH_PULL);
 8000cde:	79b9      	ldrb	r1, [r7, #6]
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fbcb 	bl	8001480 <GPIO_voidSetPinOutputMode>
	  GPIO_voidSetPinOutputSpeed(RGB_LedPort,RGB_LedPin,GPIO_OUTPUT_PIN_LOW_SPEED);
 8000cea:	79b9      	ldrb	r1, [r7, #6]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fc17 	bl	8001524 <GPIO_voidSetPinOutputSpeed>
	  GPIO_voidSetPinValue(RGB_LedPort,RGB_LedPin,GPIO_HIGH);
 8000cf6:	79b9      	ldrb	r1, [r7, #6]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fc6b 	bl	80015d8 <GPIO_voidSetPinValue>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <RGB_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void RGB_voidInit(RGB_Config_t* REF_RGBObj)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	RGB_init_led(REF_RGBObj->RGB_Red_Port, REF_RGBObj->RGB_Red_Pin);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	785a      	ldrb	r2, [r3, #1]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	f7ff ffb6 	bl	8000c8e <RGB_init_led>
	RGB_init_led(REF_RGBObj->RGB_Green_Port, REF_RGBObj->RGB_Green_Pin);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	791a      	ldrb	r2, [r3, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	78db      	ldrb	r3, [r3, #3]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	f7ff ffae 	bl	8000c8e <RGB_init_led>
	RGB_init_led(REF_RGBObj->RGB_Blue_Port, REF_RGBObj->RGB_Blue_Pin);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	79da      	ldrb	r2, [r3, #7]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	799b      	ldrb	r3, [r3, #6]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	f7ff ffa6 	bl	8000c8e <RGB_init_led>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <RGB_voidLedToggle>:
			REF_RGBObj->RGB_Blue_State = RGB_LED_OFF;
			break;
		}
}
void RGB_voidLedToggle(RGB_Config_t* REF_RGBObj , RGB_Leds_t RGP_Led)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	460b      	mov	r3, r1
 8000d54:	70fb      	strb	r3, [r7, #3]
	switch(RGP_Led)
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d046      	beq.n	8000dea <RGB_voidLedToggle+0xa0>
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	dc69      	bgt.n	8000e34 <RGB_voidLedToggle+0xea>
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <RGB_voidLedToggle+0x20>
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d020      	beq.n	8000daa <RGB_voidLedToggle+0x60>
					GPIO_voidSetPinValue(REF_RGBObj->RGB_Blue_Port, REF_RGBObj->RGB_Blue_Pin, RGB_LED_ON);
					REF_RGBObj->RGB_Blue_State = RGB_LED_ON;
				}
				break;
			}
}
 8000d68:	e064      	b.n	8000e34 <RGB_voidLedToggle+0xea>
				if(REF_RGBObj->RGB_Red_State == RGB_LED_ON)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	789b      	ldrb	r3, [r3, #2]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10b      	bne.n	8000d8a <RGB_voidLedToggle+0x40>
					GPIO_voidSetPinValue(REF_RGBObj->RGB_Red_Port, REF_RGBObj->RGB_Red_Pin, RGB_LED_OFF);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7858      	ldrb	r0, [r3, #1]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f000 fc2b 	bl	80015d8 <GPIO_voidSetPinValue>
					REF_RGBObj->RGB_Red_State = RGB_LED_OFF;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	709a      	strb	r2, [r3, #2]
				break;
 8000d88:	e04f      	b.n	8000e2a <RGB_voidLedToggle+0xe0>
				else if (REF_RGBObj->RGB_Red_State == RGB_LED_OFF)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	789b      	ldrb	r3, [r3, #2]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d14b      	bne.n	8000e2a <RGB_voidLedToggle+0xe0>
					GPIO_voidSetPinValue(REF_RGBObj->RGB_Red_Port, REF_RGBObj->RGB_Red_Pin, RGB_LED_ON);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7858      	ldrb	r0, [r3, #1]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f000 fc1b 	bl	80015d8 <GPIO_voidSetPinValue>
					REF_RGBObj->RGB_Red_State = RGB_LED_ON;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	709a      	strb	r2, [r3, #2]
				break;
 8000da8:	e03f      	b.n	8000e2a <RGB_voidLedToggle+0xe0>
				if(REF_RGBObj->RGB_Green_State == RGB_LED_ON)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	795b      	ldrb	r3, [r3, #5]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10b      	bne.n	8000dca <RGB_voidLedToggle+0x80>
					GPIO_voidSetPinValue(REF_RGBObj->RGB_Green_Port, REF_RGBObj->RGB_Green_Pin, RGB_LED_OFF);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7918      	ldrb	r0, [r3, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	78db      	ldrb	r3, [r3, #3]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f000 fc0b 	bl	80015d8 <GPIO_voidSetPinValue>
					REF_RGBObj->RGB_Green_State = RGB_LED_OFF;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	715a      	strb	r2, [r3, #5]
				break;
 8000dc8:	e031      	b.n	8000e2e <RGB_voidLedToggle+0xe4>
				else if (REF_RGBObj->RGB_Green_State == RGB_LED_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	795b      	ldrb	r3, [r3, #5]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d12d      	bne.n	8000e2e <RGB_voidLedToggle+0xe4>
					GPIO_voidSetPinValue(REF_RGBObj->RGB_Green_Port, REF_RGBObj->RGB_Green_Pin, RGB_LED_ON);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7918      	ldrb	r0, [r3, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	78db      	ldrb	r3, [r3, #3]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f000 fbfb 	bl	80015d8 <GPIO_voidSetPinValue>
					REF_RGBObj->RGB_Green_State = RGB_LED_ON;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	715a      	strb	r2, [r3, #5]
				break;
 8000de8:	e021      	b.n	8000e2e <RGB_voidLedToggle+0xe4>
				if(REF_RGBObj->RGB_Blue_State == RGB_LED_ON)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7a1b      	ldrb	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10b      	bne.n	8000e0a <RGB_voidLedToggle+0xc0>
					GPIO_voidSetPinValue(REF_RGBObj->RGB_Blue_Port, REF_RGBObj->RGB_Blue_Pin, RGB_LED_OFF);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	79d8      	ldrb	r0, [r3, #7]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	799b      	ldrb	r3, [r3, #6]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f000 fbeb 	bl	80015d8 <GPIO_voidSetPinValue>
					REF_RGBObj->RGB_Blue_State = RGB_LED_OFF;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	721a      	strb	r2, [r3, #8]
				break;
 8000e08:	e013      	b.n	8000e32 <RGB_voidLedToggle+0xe8>
				else if (REF_RGBObj->RGB_Blue_State == RGB_LED_OFF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7a1b      	ldrb	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d10f      	bne.n	8000e32 <RGB_voidLedToggle+0xe8>
					GPIO_voidSetPinValue(REF_RGBObj->RGB_Blue_Port, REF_RGBObj->RGB_Blue_Pin, RGB_LED_ON);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	79d8      	ldrb	r0, [r3, #7]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	799b      	ldrb	r3, [r3, #6]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f000 fbdb 	bl	80015d8 <GPIO_voidSetPinValue>
					REF_RGBObj->RGB_Blue_State = RGB_LED_ON;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	721a      	strb	r2, [r3, #8]
				break;
 8000e28:	e003      	b.n	8000e32 <RGB_voidLedToggle+0xe8>
				break;
 8000e2a:	bf00      	nop
 8000e2c:	e002      	b.n	8000e34 <RGB_voidLedToggle+0xea>
				break;
 8000e2e:	bf00      	nop
 8000e30:	e000      	b.n	8000e34 <RGB_voidLedToggle+0xea>
				break;
 8000e32:	bf00      	nop
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <Delay_ms>:
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/


void Delay_ms(u32 delay_ms)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	delay_ms = (u32)((((delay_ms*(F_CPU/1000.0)))-EQUATION_CLOCK_CYCLES)/LOOP_ITERATION_CLOCK_CYCLES);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fb09 	bl	800045c <__aeabi_ui2d>
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <Delay_ms+0x64>)
 8000e50:	f7ff fb7e 	bl	8000550 <__aeabi_dmul>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <Delay_ms+0x68>)
 8000e62:	f7ff f9bd 	bl	80001e0 <__aeabi_dsub>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <Delay_ms+0x6c>)
 8000e74:	f7ff fc96 	bl	80007a4 <__aeabi_ddiv>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fd78 	bl	8000974 <__aeabi_d2uiz>
 8000e84:	4603      	mov	r3, r0
 8000e86:	607b      	str	r3, [r7, #4]
	for(;delay_ms>0;delay_ms--);
 8000e88:	e002      	b.n	8000e90 <Delay_ms+0x54>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f9      	bne.n	8000e8a <Delay_ms+0x4e>
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40cf4000 	.word	0x40cf4000
 8000ea4:	40863000 	.word	0x40863000
 8000ea8:	40340000 	.word	0x40340000
 8000eac:	00000000 	.word	0x00000000

08000eb0 <Delay_sec>:

void Delay_sec(u32 delay_sec)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	delay_sec = (u32)((((delay_sec*(F_CPU/1.0)))-EQUATION_CLOCK_CYCLES)/LOOP_ITERATION_CLOCK_CYCLES);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff facf 	bl	800045c <__aeabi_ui2d>
 8000ebe:	a318      	add	r3, pc, #96	; (adr r3, 8000f20 <Delay_sec+0x70>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff fb44 	bl	8000550 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <Delay_sec+0x68>)
 8000ed6:	f7ff f983 	bl	80001e0 <__aeabi_dsub>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <Delay_sec+0x6c>)
 8000ee8:	f7ff fc5c 	bl	80007a4 <__aeabi_ddiv>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fd3e 	bl	8000974 <__aeabi_d2uiz>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	607b      	str	r3, [r7, #4]
	for(;delay_sec>0;delay_sec--);
 8000efc:	e002      	b.n	8000f04 <Delay_sec+0x54>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f9      	bne.n	8000efe <Delay_sec+0x4e>
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	f3af 8000 	nop.w
 8000f18:	40863000 	.word	0x40863000
 8000f1c:	40340000 	.word	0x40340000
 8000f20:	00000000 	.word	0x00000000
 8000f24:	416e8480 	.word	0x416e8480

08000f28 <MEXTI_voidInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MEXTI_voidInit(MEXTI_CONFIG_t* Copy_tEXTIConfig ,void (*pCallBackFunction)(void)){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]

	/*Enable EXTI Line mode interrupt or event*/
	switch(Copy_tEXTIConfig->MEXTI_Mode)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	78db      	ldrb	r3, [r3, #3]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <MEXTI_voidInit+0x18>
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d00c      	beq.n	8000f58 <MEXTI_voidInit+0x30>
			break;
		case MEXTI_EVENT_MODE:
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 8000f3e:	e017      	b.n	8000f70 <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->IMR,Copy_tEXTIConfig->MEXTI_Line);
 8000f40:	4b7a      	ldr	r3, [pc, #488]	; (800112c <MEXTI_voidInit+0x204>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	7852      	ldrb	r2, [r2, #1]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	408a      	lsls	r2, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4a76      	ldr	r2, [pc, #472]	; (800112c <MEXTI_voidInit+0x204>)
 8000f52:	430b      	orrs	r3, r1
 8000f54:	6013      	str	r3, [r2, #0]
			break;
 8000f56:	e00b      	b.n	8000f70 <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
 8000f58:	4b74      	ldr	r3, [pc, #464]	; (800112c <MEXTI_voidInit+0x204>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	7852      	ldrb	r2, [r2, #1]
 8000f60:	4611      	mov	r1, r2
 8000f62:	2201      	movs	r2, #1
 8000f64:	408a      	lsls	r2, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	4a70      	ldr	r2, [pc, #448]	; (800112c <MEXTI_voidInit+0x204>)
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	6053      	str	r3, [r2, #4]
			break;
 8000f6e:	bf00      	nop
	}

	/*Set Notification function*/
	EXTI_pNotificationFunction[Copy_tEXTIConfig->MEXTI_Line] = pCallBackFunction;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	785b      	ldrb	r3, [r3, #1]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4a6e      	ldr	r2, [pc, #440]	; (8001130 <MEXTI_voidInit+0x208>)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*Set Sense Signal mode RISING, FALLING, ONCHANGE */
	switch(Copy_tEXTIConfig->MEXTI_SenseSignal){
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	789b      	ldrb	r3, [r3, #2]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d036      	beq.n	8000ff4 <MEXTI_voidInit+0xcc>
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	dc4b      	bgt.n	8001022 <MEXTI_voidInit+0xfa>
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <MEXTI_voidInit+0x6c>
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d018      	beq.n	8000fc4 <MEXTI_voidInit+0x9c>
		case MEXTI_ONCHANGE:
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 8000f92:	e046      	b.n	8001022 <MEXTI_voidInit+0xfa>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000f94:	4b65      	ldr	r3, [pc, #404]	; (800112c <MEXTI_voidInit+0x204>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	7852      	ldrb	r2, [r2, #1]
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	408a      	lsls	r2, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4a61      	ldr	r2, [pc, #388]	; (800112c <MEXTI_voidInit+0x204>)
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	6093      	str	r3, [r2, #8]
			CLR_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <MEXTI_voidInit+0x204>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	7852      	ldrb	r2, [r2, #1]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	408a      	lsls	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4a5b      	ldr	r2, [pc, #364]	; (800112c <MEXTI_voidInit+0x204>)
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	60d3      	str	r3, [r2, #12]
			break;
 8000fc2:	e02f      	b.n	8001024 <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000fc4:	4b59      	ldr	r3, [pc, #356]	; (800112c <MEXTI_voidInit+0x204>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	7852      	ldrb	r2, [r2, #1]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	2201      	movs	r2, #1
 8000fd0:	408a      	lsls	r2, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4a55      	ldr	r2, [pc, #340]	; (800112c <MEXTI_voidInit+0x204>)
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	60d3      	str	r3, [r2, #12]
			CLR_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000fda:	4b54      	ldr	r3, [pc, #336]	; (800112c <MEXTI_voidInit+0x204>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	7852      	ldrb	r2, [r2, #1]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	408a      	lsls	r2, r1
 8000fe8:	43d2      	mvns	r2, r2
 8000fea:	4611      	mov	r1, r2
 8000fec:	4a4f      	ldr	r2, [pc, #316]	; (800112c <MEXTI_voidInit+0x204>)
 8000fee:	400b      	ands	r3, r1
 8000ff0:	6093      	str	r3, [r2, #8]
			break;
 8000ff2:	e017      	b.n	8001024 <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000ff4:	4b4d      	ldr	r3, [pc, #308]	; (800112c <MEXTI_voidInit+0x204>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	7852      	ldrb	r2, [r2, #1]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	2201      	movs	r2, #1
 8001000:	408a      	lsls	r2, r1
 8001002:	4611      	mov	r1, r2
 8001004:	4a49      	ldr	r2, [pc, #292]	; (800112c <MEXTI_voidInit+0x204>)
 8001006:	430b      	orrs	r3, r1
 8001008:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 800100a:	4b48      	ldr	r3, [pc, #288]	; (800112c <MEXTI_voidInit+0x204>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	7852      	ldrb	r2, [r2, #1]
 8001012:	4611      	mov	r1, r2
 8001014:	2201      	movs	r2, #1
 8001016:	408a      	lsls	r2, r1
 8001018:	4611      	mov	r1, r2
 800101a:	4a44      	ldr	r2, [pc, #272]	; (800112c <MEXTI_voidInit+0x204>)
 800101c:	430b      	orrs	r3, r1
 800101e:	60d3      	str	r3, [r2, #12]
			break;
 8001020:	e000      	b.n	8001024 <MEXTI_voidInit+0xfc>
			break;
 8001022:	bf00      	nop
	}
	/* Enable SYSCFG Peripheral Clock*/
	RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_SYSCFGEN);
 8001024:	210e      	movs	r1, #14
 8001026:	2002      	movs	r0, #2
 8001028:	f000 fc2e 	bl	8001888 <RCC_voidEnablePeripheralClock>
	/*Set EXTI Port PORTA, PORTB, PORTC*/
	if(Copy_tEXTIConfig->MEXTI_Line < 4 && Copy_tEXTIConfig->MEXTI_Line >= 0)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d80e      	bhi.n	8001052 <MEXTI_voidInit+0x12a>
	{
		SYSCFG_EXTICR1 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8001034:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <MEXTI_voidInit+0x20c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	4611      	mov	r1, r2
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	7852      	ldrb	r2, [r2, #1]
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	4611      	mov	r1, r2
 800104a:	4a3a      	ldr	r2, [pc, #232]	; (8001134 <MEXTI_voidInit+0x20c>)
 800104c:	430b      	orrs	r3, r1
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e043      	b.n	80010da <MEXTI_voidInit+0x1b2>

	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 8 && Copy_tEXTIConfig->MEXTI_Line >= 4){
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	2b07      	cmp	r3, #7
 8001058:	d812      	bhi.n	8001080 <MEXTI_voidInit+0x158>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d90e      	bls.n	8001080 <MEXTI_voidInit+0x158>
		SYSCFG_EXTICR2 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <MEXTI_voidInit+0x210>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	4611      	mov	r1, r2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	7852      	ldrb	r2, [r2, #1]
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	4611      	mov	r1, r2
 8001078:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <MEXTI_voidInit+0x210>)
 800107a:	430b      	orrs	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e02c      	b.n	80010da <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 12 && Copy_tEXTIConfig->MEXTI_Line >= 8){
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	785b      	ldrb	r3, [r3, #1]
 8001084:	2b0b      	cmp	r3, #11
 8001086:	d812      	bhi.n	80010ae <MEXTI_voidInit+0x186>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	2b07      	cmp	r3, #7
 800108e:	d90e      	bls.n	80010ae <MEXTI_voidInit+0x186>
		SYSCFG_EXTICR3 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <MEXTI_voidInit+0x214>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	4611      	mov	r1, r2
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	7852      	ldrb	r2, [r2, #1]
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	fa01 f202 	lsl.w	r2, r1, r2
 80010a4:	4611      	mov	r1, r2
 80010a6:	4a25      	ldr	r2, [pc, #148]	; (800113c <MEXTI_voidInit+0x214>)
 80010a8:	430b      	orrs	r3, r1
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	e015      	b.n	80010da <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 16 && Copy_tEXTIConfig->MEXTI_Line >= 12){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	d811      	bhi.n	80010da <MEXTI_voidInit+0x1b2>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	2b0b      	cmp	r3, #11
 80010bc:	d90d      	bls.n	80010da <MEXTI_voidInit+0x1b2>
		SYSCFG_EXTICR4 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MEXTI_voidInit+0x218>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	4611      	mov	r1, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	7852      	ldrb	r2, [r2, #1]
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	4611      	mov	r1, r2
 80010d4:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <MEXTI_voidInit+0x218>)
 80010d6:	430b      	orrs	r3, r1
 80010d8:	6013      	str	r3, [r2, #0]
	}

	/*Enable NVIC Mask for EXTI Line*/
	if(Copy_tEXTIConfig->MEXTI_Line <5){
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d808      	bhi.n	80010f4 <MEXTI_voidInit+0x1cc>
		MNVIC_voidEnableIRQ(EXTI0_IRQn+Copy_tEXTIConfig->MEXTI_Line);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	3306      	adds	r3, #6
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fb33 	bl	8001758 <MNVIC_voidEnableIRQ>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
	}
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
	}
}
 80010f2:	e016      	b.n	8001122 <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 5 && Copy_tEXTIConfig->MEXTI_Line <= 9){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	785b      	ldrb	r3, [r3, #1]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d907      	bls.n	800110c <MEXTI_voidInit+0x1e4>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	785b      	ldrb	r3, [r3, #1]
 8001100:	2b09      	cmp	r3, #9
 8001102:	d803      	bhi.n	800110c <MEXTI_voidInit+0x1e4>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
 8001104:	2017      	movs	r0, #23
 8001106:	f000 fb27 	bl	8001758 <MNVIC_voidEnableIRQ>
}
 800110a:	e00a      	b.n	8001122 <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	2b09      	cmp	r3, #9
 8001112:	d906      	bls.n	8001122 <MEXTI_voidInit+0x1fa>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d802      	bhi.n	8001122 <MEXTI_voidInit+0x1fa>
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
 800111c:	2028      	movs	r0, #40	; 0x28
 800111e:	f000 fb1b 	bl	8001758 <MNVIC_voidEnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40013c00 	.word	0x40013c00
 8001130:	2000003c 	.word	0x2000003c
 8001134:	40013808 	.word	0x40013808
 8001138:	4001380c 	.word	0x4001380c
 800113c:	40013810 	.word	0x40013810
 8001140:	40013814 	.word	0x40013814

08001144 <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MEXTI_voidClearPendingFlag+0x2c>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	4611      	mov	r1, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <MEXTI_voidClearPendingFlag+0x2c>)
 800115e:	430b      	orrs	r3, r1
 8001160:	6153      	str	r3, [r2, #20]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40013c00 	.word	0x40013c00

08001174 <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <MEXTI_u8GetPendingFlag+0x28>)
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40013c00 	.word	0x40013c00

080011a0 <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <EXTI0_IRQHandler+0x1c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <EXTI0_IRQHandler+0x1c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff ffc6 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000003c 	.word	0x2000003c

080011c0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <EXTI1_IRQHandler+0x1c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <EXTI1_IRQHandler+0x1c>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff ffb6 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000003c 	.word	0x2000003c

080011e0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <EXTI2_IRQHandler+0x1c>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <EXTI2_IRQHandler+0x1c>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 80011f2:	2002      	movs	r0, #2
 80011f4:	f7ff ffa6 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000003c 	.word	0x2000003c

08001200 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <EXTI3_IRQHandler+0x1c>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <EXTI3_IRQHandler+0x1c>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 8001212:	2003      	movs	r0, #3
 8001214:	f7ff ff96 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000003c 	.word	0x2000003c

08001220 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <EXTI4_IRQHandler+0x1c>)
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <EXTI4_IRQHandler+0x1c>)
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 8001232:	2004      	movs	r0, #4
 8001234:	f7ff ff86 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000003c 	.word	0x2000003c

08001240 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 8001244:	2005      	movs	r0, #5
 8001246:	f7ff ff95 	bl	8001174 <MEXTI_u8GetPendingFlag>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00a      	beq.n	8001266 <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 800125e:	2005      	movs	r0, #5
 8001260:	f7ff ff70 	bl	8001144 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 8001264:	e042      	b.n	80012ec <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 8001266:	2006      	movs	r0, #6
 8001268:	f7ff ff84 	bl	8001174 <MEXTI_u8GetPendingFlag>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00a      	beq.n	8001288 <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 8001280:	2006      	movs	r0, #6
 8001282:	f7ff ff5f 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 8001286:	e031      	b.n	80012ec <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 8001288:	2007      	movs	r0, #7
 800128a:	f7ff ff73 	bl	8001174 <MEXTI_u8GetPendingFlag>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00a      	beq.n	80012aa <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 80012a2:	2007      	movs	r0, #7
 80012a4:	f7ff ff4e 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 80012a8:	e020      	b.n	80012ec <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 80012aa:	2008      	movs	r0, #8
 80012ac:	f7ff ff62 	bl	8001174 <MEXTI_u8GetPendingFlag>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00a      	beq.n	80012cc <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 80012c4:	2008      	movs	r0, #8
 80012c6:	f7ff ff3d 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 80012ca:	e00f      	b.n	80012ec <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 80012cc:	2009      	movs	r0, #9
 80012ce:	f7ff ff51 	bl	8001174 <MEXTI_u8GetPendingFlag>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d009      	beq.n	80012ec <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <EXTI9_5_IRQHandler+0xb0>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 80012e6:	2009      	movs	r0, #9
 80012e8:	f7ff ff2c 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000003c 	.word	0x2000003c

080012f4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 80012f8:	200a      	movs	r0, #10
 80012fa:	f7ff ff3b 	bl	8001174 <MEXTI_u8GetPendingFlag>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00a      	beq.n	800131a <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 8001312:	200a      	movs	r0, #10
 8001314:	f7ff ff16 	bl	8001144 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 8001318:	e053      	b.n	80013c2 <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 800131a:	200b      	movs	r0, #11
 800131c:	f7ff ff2a 	bl	8001174 <MEXTI_u8GetPendingFlag>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 8001334:	200b      	movs	r0, #11
 8001336:	f7ff ff05 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 800133a:	e042      	b.n	80013c2 <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 800133c:	200c      	movs	r0, #12
 800133e:	f7ff ff19 	bl	8001174 <MEXTI_u8GetPendingFlag>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00a      	beq.n	800135e <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 8001356:	200c      	movs	r0, #12
 8001358:	f7ff fef4 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 800135c:	e031      	b.n	80013c2 <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 800135e:	200d      	movs	r0, #13
 8001360:	f7ff ff08 	bl	8001174 <MEXTI_u8GetPendingFlag>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00a      	beq.n	8001380 <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 800136c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 8001378:	200d      	movs	r0, #13
 800137a:	f7ff fee3 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 800137e:	e020      	b.n	80013c2 <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 8001380:	200e      	movs	r0, #14
 8001382:	f7ff fef7 	bl	8001174 <MEXTI_u8GetPendingFlag>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00a      	beq.n	80013a2 <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 800138e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 8001396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001398:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 800139a:	200e      	movs	r0, #14
 800139c:	f7ff fed2 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 80013a0:	e00f      	b.n	80013c2 <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 80013a2:	200f      	movs	r0, #15
 80013a4:	f7ff fee6 	bl	8001174 <MEXTI_u8GetPendingFlag>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 80013b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <EXTI15_10_IRQHandler+0xd4>)
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 80013bc:	200f      	movs	r0, #15
 80013be:	f7ff fec1 	bl	8001144 <MEXTI_voidClearPendingFlag>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000003c 	.word	0x2000003c

080013cc <GPIO_voidSetPinMode>:
#include"../../../Inc/MCAL/GPIO/GPIO_config.h"
#include"../../../Inc/MCAL/GPIO/GPIO_interface.h"
#include"../../../Inc/MCAL/GPIO/GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	460b      	mov	r3, r1
 80013d8:	71bb      	strb	r3, [r7, #6]
 80013da:	4613      	mov	r3, r2
 80013dc:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d02c      	beq.n	800143e <GPIO_voidSetPinMode+0x72>
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	dc3d      	bgt.n	8001464 <GPIO_voidSetPinMode+0x98>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <GPIO_voidSetPinMode+0x26>
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d013      	beq.n	8001418 <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 80013f0:	e038      	b.n	8001464 <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <GPIO_voidSetPinMode+0xa8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	79ba      	ldrb	r2, [r7, #6]
 80013f8:	0052      	lsls	r2, r2, #1
 80013fa:	2103      	movs	r1, #3
 80013fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001400:	43d2      	mvns	r2, r2
 8001402:	4013      	ands	r3, r2
 8001404:	7979      	ldrb	r1, [r7, #5]
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	0052      	lsls	r2, r2, #1
 800140a:	fa01 f202 	lsl.w	r2, r1, r2
 800140e:	4611      	mov	r1, r2
 8001410:	4a18      	ldr	r2, [pc, #96]	; (8001474 <GPIO_voidSetPinMode+0xa8>)
 8001412:	430b      	orrs	r3, r1
 8001414:	6013      	str	r3, [r2, #0]
      break;
 8001416:	e026      	b.n	8001466 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <GPIO_voidSetPinMode+0xac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	79ba      	ldrb	r2, [r7, #6]
 800141e:	0052      	lsls	r2, r2, #1
 8001420:	2103      	movs	r1, #3
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	43d2      	mvns	r2, r2
 8001428:	4013      	ands	r3, r2
 800142a:	7979      	ldrb	r1, [r7, #5]
 800142c:	79ba      	ldrb	r2, [r7, #6]
 800142e:	0052      	lsls	r2, r2, #1
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	4611      	mov	r1, r2
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <GPIO_voidSetPinMode+0xac>)
 8001438:	430b      	orrs	r3, r1
 800143a:	6013      	str	r3, [r2, #0]
      break;
 800143c:	e013      	b.n	8001466 <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <GPIO_voidSetPinMode+0xb0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	79ba      	ldrb	r2, [r7, #6]
 8001444:	0052      	lsls	r2, r2, #1
 8001446:	2103      	movs	r1, #3
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	43d2      	mvns	r2, r2
 800144e:	4013      	ands	r3, r2
 8001450:	7979      	ldrb	r1, [r7, #5]
 8001452:	79ba      	ldrb	r2, [r7, #6]
 8001454:	0052      	lsls	r2, r2, #1
 8001456:	fa01 f202 	lsl.w	r2, r1, r2
 800145a:	4611      	mov	r1, r2
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <GPIO_voidSetPinMode+0xb0>)
 800145e:	430b      	orrs	r3, r1
 8001460:	6013      	str	r3, [r2, #0]
      break;
 8001462:	e000      	b.n	8001466 <GPIO_voidSetPinMode+0x9a>
      break;
 8001464:	bf00      	nop
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800

08001480 <GPIO_voidSetPinOutputMode>:
void GPIO_voidSetPinOutputMode(port_index_t Copy_PortIndex,
                               pin_index_t Copy_PinIndex,
                               output_pin_mode_t Copy_OutputPinMode) {
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
 800148a:	460b      	mov	r3, r1
 800148c:	71bb      	strb	r3, [r7, #6]
 800148e:	4613      	mov	r3, r2
 8001490:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d028      	beq.n	80014ea <GPIO_voidSetPinOutputMode+0x6a>
 8001498:	2b02      	cmp	r3, #2
 800149a:	dc37      	bgt.n	800150c <GPIO_voidSetPinOutputMode+0x8c>
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <GPIO_voidSetPinOutputMode+0x26>
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d011      	beq.n	80014c8 <GPIO_voidSetPinOutputMode+0x48>
    case GPIO_PORTC:
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
                 Copy_OutputPinMode << Copy_PinIndex);
      break;
    default:
      break;
 80014a4:	e032      	b.n	800150c <GPIO_voidSetPinOutputMode+0x8c>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <GPIO_voidSetPinOutputMode+0x9c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	79ba      	ldrb	r2, [r7, #6]
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	43d2      	mvns	r2, r2
 80014b4:	4013      	ands	r3, r2
 80014b6:	7979      	ldrb	r1, [r7, #5]
 80014b8:	79ba      	ldrb	r2, [r7, #6]
 80014ba:	fa01 f202 	lsl.w	r2, r1, r2
 80014be:	4611      	mov	r1, r2
 80014c0:	4a16      	ldr	r2, [pc, #88]	; (800151c <GPIO_voidSetPinOutputMode+0x9c>)
 80014c2:	430b      	orrs	r3, r1
 80014c4:	6013      	str	r3, [r2, #0]
      break;
 80014c6:	e022      	b.n	800150e <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <GPIO_voidSetPinOutputMode+0x9c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	79ba      	ldrb	r2, [r7, #6]
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	43d2      	mvns	r2, r2
 80014d6:	4013      	ands	r3, r2
 80014d8:	7979      	ldrb	r1, [r7, #5]
 80014da:	79ba      	ldrb	r2, [r7, #6]
 80014dc:	fa01 f202 	lsl.w	r2, r1, r2
 80014e0:	4611      	mov	r1, r2
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <GPIO_voidSetPinOutputMode+0x9c>)
 80014e4:	430b      	orrs	r3, r1
 80014e6:	6013      	str	r3, [r2, #0]
      break;
 80014e8:	e011      	b.n	800150e <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <GPIO_voidSetPinOutputMode+0xa0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	79ba      	ldrb	r2, [r7, #6]
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	43d2      	mvns	r2, r2
 80014f8:	4013      	ands	r3, r2
 80014fa:	7979      	ldrb	r1, [r7, #5]
 80014fc:	79ba      	ldrb	r2, [r7, #6]
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	4611      	mov	r1, r2
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <GPIO_voidSetPinOutputMode+0xa0>)
 8001506:	430b      	orrs	r3, r1
 8001508:	6013      	str	r3, [r2, #0]
      break;
 800150a:	e000      	b.n	800150e <GPIO_voidSetPinOutputMode+0x8e>
      break;
 800150c:	bf00      	nop
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40020404 	.word	0x40020404
 8001520:	40020804 	.word	0x40020804

08001524 <GPIO_voidSetPinOutputSpeed>:
void GPIO_voidSetPinOutputSpeed(port_index_t Copy_PortIndex,
                                pin_index_t Copy_PinIndex,
                                output_pin_speed_mode_t Copy_OutputPinSpeed) {
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	460b      	mov	r3, r1
 8001530:	71bb      	strb	r3, [r7, #6]
 8001532:	4613      	mov	r3, r2
 8001534:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d02c      	beq.n	8001596 <GPIO_voidSetPinOutputSpeed+0x72>
 800153c:	2b02      	cmp	r3, #2
 800153e:	dc3d      	bgt.n	80015bc <GPIO_voidSetPinOutputSpeed+0x98>
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <GPIO_voidSetPinOutputSpeed+0x26>
 8001544:	2b01      	cmp	r3, #1
 8001546:	d013      	beq.n	8001570 <GPIO_voidSetPinOutputSpeed+0x4c>
      MODIFY_REG(GPIOC_OSPEEDR,
                 GPIO_MODER_CLEAR_MASK << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex,
                 Copy_OutputPinSpeed << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8001548:	e038      	b.n	80015bc <GPIO_voidSetPinOutputSpeed+0x98>
      MODIFY_REG(
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <GPIO_voidSetPinOutputSpeed+0xa8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	79ba      	ldrb	r2, [r7, #6]
 8001550:	0052      	lsls	r2, r2, #1
 8001552:	2103      	movs	r1, #3
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	43d2      	mvns	r2, r2
 800155a:	4013      	ands	r3, r2
 800155c:	7979      	ldrb	r1, [r7, #5]
 800155e:	79ba      	ldrb	r2, [r7, #6]
 8001560:	0052      	lsls	r2, r2, #1
 8001562:	fa01 f202 	lsl.w	r2, r1, r2
 8001566:	4611      	mov	r1, r2
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <GPIO_voidSetPinOutputSpeed+0xa8>)
 800156a:	430b      	orrs	r3, r1
 800156c:	6013      	str	r3, [r2, #0]
      break;
 800156e:	e026      	b.n	80015be <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <GPIO_voidSetPinOutputSpeed+0xac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	79ba      	ldrb	r2, [r7, #6]
 8001576:	0052      	lsls	r2, r2, #1
 8001578:	2103      	movs	r1, #3
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	43d2      	mvns	r2, r2
 8001580:	4013      	ands	r3, r2
 8001582:	7979      	ldrb	r1, [r7, #5]
 8001584:	79ba      	ldrb	r2, [r7, #6]
 8001586:	0052      	lsls	r2, r2, #1
 8001588:	fa01 f202 	lsl.w	r2, r1, r2
 800158c:	4611      	mov	r1, r2
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <GPIO_voidSetPinOutputSpeed+0xac>)
 8001590:	430b      	orrs	r3, r1
 8001592:	6013      	str	r3, [r2, #0]
      break;
 8001594:	e013      	b.n	80015be <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(GPIOC_OSPEEDR,
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <GPIO_voidSetPinOutputSpeed+0xb0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	79ba      	ldrb	r2, [r7, #6]
 800159c:	0052      	lsls	r2, r2, #1
 800159e:	2103      	movs	r1, #3
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	43d2      	mvns	r2, r2
 80015a6:	4013      	ands	r3, r2
 80015a8:	7979      	ldrb	r1, [r7, #5]
 80015aa:	79ba      	ldrb	r2, [r7, #6]
 80015ac:	0052      	lsls	r2, r2, #1
 80015ae:	fa01 f202 	lsl.w	r2, r1, r2
 80015b2:	4611      	mov	r1, r2
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <GPIO_voidSetPinOutputSpeed+0xb0>)
 80015b6:	430b      	orrs	r3, r1
 80015b8:	6013      	str	r3, [r2, #0]
      break;
 80015ba:	e000      	b.n	80015be <GPIO_voidSetPinOutputSpeed+0x9a>
      break;
 80015bc:	bf00      	nop
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40020008 	.word	0x40020008
 80015d0:	40020408 	.word	0x40020408
 80015d4:	40020808 	.word	0x40020808

080015d8 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	460b      	mov	r3, r1
 80015e4:	71bb      	strb	r3, [r7, #6]
 80015e6:	4613      	mov	r3, r2
 80015e8:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d02c      	beq.n	800164a <GPIO_voidSetPinValue+0x72>
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	dc3d      	bgt.n	8001670 <GPIO_voidSetPinValue+0x98>
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <GPIO_voidSetPinValue+0x26>
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d013      	beq.n	8001624 <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 80015fc:	e038      	b.n	8001670 <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 80015fe:	797b      	ldrb	r3, [r7, #5]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	2201      	movs	r2, #1
 8001608:	409a      	lsls	r2, r3
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <GPIO_voidSetPinValue+0xb4>)
 800160c:	601a      	str	r2, [r3, #0]
      break;
 800160e:	e031      	b.n	8001674 <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d12e      	bne.n	8001674 <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800161c:	409a      	lsls	r2, r3
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <GPIO_voidSetPinValue+0xb4>)
 8001620:	601a      	str	r2, [r3, #0]
      break;
 8001622:	e027      	b.n	8001674 <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8001624:	797b      	ldrb	r3, [r7, #5]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d105      	bne.n	8001636 <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	2201      	movs	r2, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <GPIO_voidSetPinValue+0xb8>)
 8001632:	601a      	str	r2, [r3, #0]
      break;
 8001634:	e020      	b.n	8001678 <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8001636:	797b      	ldrb	r3, [r7, #5]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11d      	bne.n	8001678 <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001642:	409a      	lsls	r2, r3
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <GPIO_voidSetPinValue+0xb8>)
 8001646:	601a      	str	r2, [r3, #0]
      break;
 8001648:	e016      	b.n	8001678 <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 800164a:	797b      	ldrb	r3, [r7, #5]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	2201      	movs	r2, #1
 8001654:	409a      	lsls	r2, r3
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <GPIO_voidSetPinValue+0xbc>)
 8001658:	601a      	str	r2, [r3, #0]
      break;
 800165a:	e00f      	b.n	800167c <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8001662:	79bb      	ldrb	r3, [r7, #6]
 8001664:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001668:	409a      	lsls	r2, r3
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <GPIO_voidSetPinValue+0xbc>)
 800166c:	601a      	str	r2, [r3, #0]
      break;
 800166e:	e005      	b.n	800167c <GPIO_voidSetPinValue+0xa4>
      break;
 8001670:	bf00      	nop
 8001672:	e004      	b.n	800167e <GPIO_voidSetPinValue+0xa6>
      break;
 8001674:	bf00      	nop
 8001676:	e002      	b.n	800167e <GPIO_voidSetPinValue+0xa6>
      break;
 8001678:	bf00      	nop
 800167a:	e000      	b.n	800167e <GPIO_voidSetPinValue+0xa6>
      break;
 800167c:	bf00      	nop
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40020018 	.word	0x40020018
 8001690:	40020418 	.word	0x40020418
 8001694:	40020818 	.word	0x40020818

08001698 <GPIO_voidSetPinPullUpDownResistor>:
void GPIO_voidSetPinPullUpDownResistor(port_index_t Copy_PortIndex,
                                       pin_index_t Copy_PinIndex,
                                       input_pin_mode_t Copy_InputPinMode) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	460b      	mov	r3, r1
 80016a4:	71bb      	strb	r3, [r7, #6]
 80016a6:	4613      	mov	r3, r2
 80016a8:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d02c      	beq.n	800170a <GPIO_voidSetPinPullUpDownResistor+0x72>
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	dc3d      	bgt.n	8001730 <GPIO_voidSetPinPullUpDownResistor+0x98>
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <GPIO_voidSetPinPullUpDownResistor+0x26>
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d013      	beq.n	80016e4 <GPIO_voidSetPinPullUpDownResistor+0x4c>
      MODIFY_REG(GPIOC_PUPDR,
                 GPIO_PUPDR_CLEAR_MASK << GPIO_PUPDR_PIN_BITS * Copy_PinIndex,
                 Copy_InputPinMode << GPIO_PUPDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 80016bc:	e038      	b.n	8001730 <GPIO_voidSetPinPullUpDownResistor+0x98>
      MODIFY_REG(GPIOA_PUPDR,
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	79ba      	ldrb	r2, [r7, #6]
 80016c4:	0052      	lsls	r2, r2, #1
 80016c6:	2103      	movs	r1, #3
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	43d2      	mvns	r2, r2
 80016ce:	4013      	ands	r3, r2
 80016d0:	7979      	ldrb	r1, [r7, #5]
 80016d2:	79ba      	ldrb	r2, [r7, #6]
 80016d4:	0052      	lsls	r2, r2, #1
 80016d6:	fa01 f202 	lsl.w	r2, r1, r2
 80016da:	4611      	mov	r1, r2
 80016dc:	4a18      	ldr	r2, [pc, #96]	; (8001740 <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 80016de:	430b      	orrs	r3, r1
 80016e0:	6013      	str	r3, [r2, #0]
      break;
 80016e2:	e026      	b.n	8001732 <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOB_PUPDR,
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <GPIO_voidSetPinPullUpDownResistor+0xac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	79ba      	ldrb	r2, [r7, #6]
 80016ea:	0052      	lsls	r2, r2, #1
 80016ec:	2103      	movs	r1, #3
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	43d2      	mvns	r2, r2
 80016f4:	4013      	ands	r3, r2
 80016f6:	7979      	ldrb	r1, [r7, #5]
 80016f8:	79ba      	ldrb	r2, [r7, #6]
 80016fa:	0052      	lsls	r2, r2, #1
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	4611      	mov	r1, r2
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <GPIO_voidSetPinPullUpDownResistor+0xac>)
 8001704:	430b      	orrs	r3, r1
 8001706:	6013      	str	r3, [r2, #0]
      break;
 8001708:	e013      	b.n	8001732 <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOC_PUPDR,
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	79ba      	ldrb	r2, [r7, #6]
 8001710:	0052      	lsls	r2, r2, #1
 8001712:	2103      	movs	r1, #3
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	43d2      	mvns	r2, r2
 800171a:	4013      	ands	r3, r2
 800171c:	7979      	ldrb	r1, [r7, #5]
 800171e:	79ba      	ldrb	r2, [r7, #6]
 8001720:	0052      	lsls	r2, r2, #1
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	4611      	mov	r1, r2
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 800172a:	430b      	orrs	r3, r1
 800172c:	6013      	str	r3, [r2, #0]
      break;
 800172e:	e000      	b.n	8001732 <GPIO_voidSetPinPullUpDownResistor+0x9a>
      break;
 8001730:	bf00      	nop
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	4002000c 	.word	0x4002000c
 8001744:	4002040c 	.word	0x4002040c
 8001748:	4002080c 	.word	0x4002080c

0800174c <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 8001750:	f000 f8da 	bl	8001908 <MSCB_voidSetPriorityGrouping>
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <MNVIC_voidEnableIRQ>:

void MNVIC_voidEnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <MNVIC_voidEnableIRQ+0x2a>
	{
		NVIC->ISER[((u32)IRQn >> 5)] = (1UL << ((u32)IRQn & 0x1F));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <MNVIC_voidEnableIRQ+0x38>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <RCC_void_HSI_Init>:
static void RCC_void_APB2Prescaler_Init(void);
/************************************************/

/******* Local Functions Implementation ********/
static void RCC_void_HSI_Init(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Enable HSI
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <RCC_void_HSI_Init+0x58>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a13      	ldr	r2, [pc, #76]	; (80017ec <RCC_void_HSI_Init+0x58>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE  
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <RCC_void_HSI_Init+0x58>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a10      	ldr	r2, [pc, #64]	; (80017ec <RCC_void_HSI_Init+0x58>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <RCC_void_HSI_Init+0x58>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <RCC_void_HSI_Init+0x58>)
 80017b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ba:	6013      	str	r3, [r2, #0]
    // Polling (Busy Wait)
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
 80017bc:	bf00      	nop
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <RCC_void_HSI_Init+0x58>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f9      	beq.n	80017be <RCC_void_HSI_Init+0x2a>
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <RCC_void_HSI_Init+0x5c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <RCC_void_HSI_Init+0x5c>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <RCC_void_HSI_Init+0x5c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <RCC_void_HSI_Init+0x5c>)
 80017dc:	f023 0302 	bic.w	r3, r3, #2
 80017e0:	6013      	str	r3, [r2, #0]
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40023808 	.word	0x40023808

080017f4 <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_1;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_2
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <RCC_void_AHB1Prescaler_Init+0x28>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <RCC_void_AHB1Prescaler_Init+0x28>)
 80017fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001802:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_2;
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <RCC_void_AHB1Prescaler_Init+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <RCC_void_AHB1Prescaler_Init+0x28>)
 800180a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023808 	.word	0x40023808

08001820 <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <RCC_void_APB1Prescaler_Init+0x24>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <RCC_void_APB1Prescaler_Init+0x24>)
 800182a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800182e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <RCC_void_APB1Prescaler_Init+0x24>)
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <RCC_void_APB1Prescaler_Init+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023808 	.word	0x40023808

08001848 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <RCC_void_APB2Prescaler_Init+0x24>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <RCC_void_APB2Prescaler_Init+0x24>)
 8001852:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001856:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <RCC_void_APB2Prescaler_Init+0x24>)
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <RCC_void_APB2Prescaler_Init+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023808 	.word	0x40023808

08001870 <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
 8001874:	f7ff ff8e 	bl	8001794 <RCC_void_HSI_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 8001878:	f7ff ffbc 	bl	80017f4 <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 800187c:	f7ff ffd0 	bl	8001820 <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 8001880:	f7ff ffe2 	bl	8001848 <RCC_void_APB2Prescaler_Init>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d01c      	beq.n	80018d8 <RCC_voidEnablePeripheralClock+0x50>
 800189e:	2b02      	cmp	r3, #2
 80018a0:	dc25      	bgt.n	80018ee <RCC_voidEnablePeripheralClock+0x66>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <RCC_voidEnablePeripheralClock+0x24>
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d00b      	beq.n	80018c2 <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 80018aa:	e020      	b.n	80018ee <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <RCC_voidEnablePeripheralClock+0x74>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	79ba      	ldrb	r2, [r7, #6]
 80018b2:	2101      	movs	r1, #1
 80018b4:	fa01 f202 	lsl.w	r2, r1, r2
 80018b8:	4611      	mov	r1, r2
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <RCC_voidEnablePeripheralClock+0x74>)
 80018bc:	430b      	orrs	r3, r1
 80018be:	6013      	str	r3, [r2, #0]
        break;
 80018c0:	e016      	b.n	80018f0 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <RCC_voidEnablePeripheralClock+0x78>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	79ba      	ldrb	r2, [r7, #6]
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	4611      	mov	r1, r2
 80018d0:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <RCC_voidEnablePeripheralClock+0x78>)
 80018d2:	430b      	orrs	r3, r1
 80018d4:	6013      	str	r3, [r2, #0]
        break;
 80018d6:	e00b      	b.n	80018f0 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <RCC_voidEnablePeripheralClock+0x7c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	79ba      	ldrb	r2, [r7, #6]
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	4611      	mov	r1, r2
 80018e6:	4a07      	ldr	r2, [pc, #28]	; (8001904 <RCC_voidEnablePeripheralClock+0x7c>)
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6013      	str	r3, [r2, #0]
        break;  
 80018ec:	e000      	b.n	80018f0 <RCC_voidEnablePeripheralClock+0x68>
        break;
 80018ee:	bf00      	nop
    }
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40023830 	.word	0x40023830
 8001900:	40023840 	.word	0x40023840
 8001904:	40023844 	.word	0x40023844

08001908 <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 8001912:	2305      	movs	r3, #5
 8001914:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <MSCB_voidSetPriorityGrouping+0x44>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001922:	4013      	ands	r3, r2
 8001924:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	021a      	lsls	r2, r3, #8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001936:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <MSCB_voidSetPriorityGrouping+0x44>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60d3      	str	r3, [r2, #12]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <MSysTick_voidInit+0x34>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <MSysTick_voidInit+0x34>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MSysTick_voidInit+0x34>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <MSysTick_voidInit+0x34>)
 8001966:	f023 0302 	bic.w	r3, r3, #2
 800196a:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <MSysTick_voidInit+0x34>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <MSysTick_voidInit+0x34>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <MSysTick_voidDeInit+0x34>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <MSysTick_voidDeInit+0x34>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <MSysTick_voidDeInit+0x34>)
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <MSysTick_voidDeInit+0x34>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <MSysTick_voidDeInit+0x34>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <MSysTick_voidDeInit+0x34>)
 80019aa:	f023 0302 	bic.w	r3, r3, #2
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <MSysTick_u32GetElapsedTime_us>:
	Local_ElapsedTicks =  (SysTick->LOAD - SysTick->VAL);
	/* Return The Local Variable */
	return Local_ElapsedTicks;
}
u32 MSysTick_u32GetElapsedTime_us(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
	u32 Local_ElapsedTicks = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
	u32 Local_ElapsedTime_us = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
	/* Copy The SysTick Elapsed Ticks to a Local Variable */
	Local_ElapsedTicks =  (SysTick->LOAD - SysTick->VAL);
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MSysTick_u32GetElapsedTime_us+0x30>)
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <MSysTick_u32GetElapsedTime_us+0x30>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	607b      	str	r3, [r7, #4]
	Local_ElapsedTime_us = Local_ElapsedTicks /((u32)((SYSTICK_AHB_CLK/SYSTICK_CLOCK_SOURCE)/1000000.0));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	603b      	str	r3, [r7, #0]
	/* Return The Local Variable */
	return Local_ElapsedTime_us;
 80019e0:	683b      	ldr	r3, [r7, #0]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <MSystick_voidResetTimer>:
	/* Return The Local Variable */
	return Local_RemainingTicks;
}

void MSystick_voidResetTimer(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	SysTick->VAL = 0;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <MSystick_voidResetTimer+0x14>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <MSystick_voidSetPreloadvalue>:

void MSystick_voidSetPreloadvalue(u32 Copy_u32Ticks)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = Copy_u32Ticks;
 8001a14:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <MSystick_voidSetPreloadvalue+0x20>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <MSystick_voidSetPreloadvalue+0x20>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <SysTick_Handler>:
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <SysTick_Handler+0x24>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 8001a3e:	f7ff ffa3 	bl	8001988 <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Handler+0x28>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <SysTick_Handler+0x28>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4798      	blx	r3
	}
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000080 	.word	0x20000080
 8001a58:	2000007c 	.word	0x2000007c

08001a5c <IR_Handler>:
#include "MCAL/SYSTICK/SYSTICK_private.h"
#include "LIB/STD_TYPES.h"
#include "LIB/Delay.h"

// ----------------------------------------------------------------------------
void IR_Handler(void){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	if(IR_u32GetReceivedData() == IR_TV_REMOTE_RED_BUTTON)
 8001a60:	f7fe fff4 	bl	8000a4c <IR_u32GetReceivedData>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <IR_Handler+0x58>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d10c      	bne.n	8001a86 <IR_Handler+0x2a>
	{
		RGB_voidLedToggle(&RGB_Lcfg, RGB_RED_LED);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <IR_Handler+0x5c>)
 8001a70:	f7ff f96b 	bl	8000d4a <RGB_voidLedToggle>
		Delay_ms(5000);
 8001a74:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a78:	f7ff f9e0 	bl	8000e3c <Delay_ms>
		RGB_voidLedToggle(&RGB_Lcfg, RGB_RED_LED);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <IR_Handler+0x5c>)
 8001a80:	f7ff f963 	bl	8000d4a <RGB_voidLedToggle>
	}
	else if(IR_u32GetReceivedData() == IR_9_BUTTON){

	}*/

}
 8001a84:	e014      	b.n	8001ab0 <IR_Handler+0x54>
	else if(IR_u32GetReceivedData() == IR_TV_REMOTE_GREEN_BUTTON){
 8001a86:	f7fe ffe1 	bl	8000a4c <IR_u32GetReceivedData>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <IR_Handler+0x60>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d104      	bne.n	8001a9c <IR_Handler+0x40>
		RGB_voidLedToggle(&RGB_Lcfg, RGB_GREEN_LED);
 8001a92:	2101      	movs	r1, #1
 8001a94:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <IR_Handler+0x5c>)
 8001a96:	f7ff f958 	bl	8000d4a <RGB_voidLedToggle>
}
 8001a9a:	e009      	b.n	8001ab0 <IR_Handler+0x54>
	else if(IR_u32GetReceivedData() == IR_TV_REMOTE_BLUE_BUTTON){
 8001a9c:	f7fe ffd6 	bl	8000a4c <IR_u32GetReceivedData>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <IR_Handler+0x64>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d103      	bne.n	8001ab0 <IR_Handler+0x54>
		RGB_voidLedToggle(&RGB_Lcfg, RGB_BLUE_LED);
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <IR_Handler+0x5c>)
 8001aac:	f7ff f94d 	bl	8000d4a <RGB_voidLedToggle>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	22d900ff 	.word	0x22d900ff
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	22d940bf 	.word	0x22d940bf
 8001ac0:	22d920df 	.word	0x22d920df

08001ac4 <main>:

int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	RGB_voidInit(&RGB_Lcfg);
 8001ac8:	4808      	ldr	r0, [pc, #32]	; (8001aec <main+0x28>)
 8001aca:	f7ff f91e 	bl	8000d0a <RGB_voidInit>
	LED_voidInit(&led_red1);
 8001ace:	4808      	ldr	r0, [pc, #32]	; (8001af0 <main+0x2c>)
 8001ad0:	f7ff f85c 	bl	8000b8c <LED_voidInit>
	IR_voidInit(&IR_Config,IR_Handler);
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <main+0x30>)
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <main+0x34>)
 8001ad8:	f7fe ff6c 	bl	80009b4 <IR_voidInit>
    /* Loop forever */
	while(1)
	{
		LED_voidToggle(&led_red1);
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <main+0x2c>)
 8001ade:	f7ff f8bf 	bl	8000c60 <LED_voidToggle>
		Delay_sec(10);
 8001ae2:	200a      	movs	r0, #10
 8001ae4:	f7ff f9e4 	bl	8000eb0 <Delay_sec>
		LED_voidToggle(&led_red1);
 8001ae8:	e7f8      	b.n	8001adc <main+0x18>
 8001aea:	bf00      	nop
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000004 	.word	0x20000004
 8001af4:	08001a5d 	.word	0x08001a5d
 8001af8:	20000000 	.word	0x20000000

08001afc <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8001b00:	f7ff feb6 	bl	8001870 <RCC_voidInit>
	MSysTick_voidInit();
 8001b04:	f7ff ff24 	bl	8001950 <MSysTick_voidInit>
	MNVIC_voidInit();
 8001b08:	f7ff fe20 	bl	800174c <MNVIC_voidInit>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b10:	480d      	ldr	r0, [pc, #52]	; (8001b48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b14:	f7ff fff2 	bl	8001afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b1a:	490d      	ldr	r1, [pc, #52]	; (8001b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <LoopForever+0xe>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b30:	4c0a      	ldr	r4, [pc, #40]	; (8001b5c <LoopForever+0x16>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b3e:	f000 f811 	bl	8001b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b42:	f7ff ffbf 	bl	8001ac4 <main>

08001b46 <LoopForever>:

LoopForever:
  b LoopForever
 8001b46:	e7fe      	b.n	8001b46 <LoopForever>
  ldr   r0, =_estack
 8001b48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b54:	08001bcc 	.word	0x08001bcc
  ldr r2, =_sbss
 8001b58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b5c:	20000084 	.word	0x20000084

08001b60 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC_IRQHandler>
	...

08001b64 <__libc_init_array>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	4d0d      	ldr	r5, [pc, #52]	; (8001b9c <__libc_init_array+0x38>)
 8001b68:	4c0d      	ldr	r4, [pc, #52]	; (8001ba0 <__libc_init_array+0x3c>)
 8001b6a:	1b64      	subs	r4, r4, r5
 8001b6c:	10a4      	asrs	r4, r4, #2
 8001b6e:	2600      	movs	r6, #0
 8001b70:	42a6      	cmp	r6, r4
 8001b72:	d109      	bne.n	8001b88 <__libc_init_array+0x24>
 8001b74:	4d0b      	ldr	r5, [pc, #44]	; (8001ba4 <__libc_init_array+0x40>)
 8001b76:	4c0c      	ldr	r4, [pc, #48]	; (8001ba8 <__libc_init_array+0x44>)
 8001b78:	f000 f818 	bl	8001bac <_init>
 8001b7c:	1b64      	subs	r4, r4, r5
 8001b7e:	10a4      	asrs	r4, r4, #2
 8001b80:	2600      	movs	r6, #0
 8001b82:	42a6      	cmp	r6, r4
 8001b84:	d105      	bne.n	8001b92 <__libc_init_array+0x2e>
 8001b86:	bd70      	pop	{r4, r5, r6, pc}
 8001b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b8c:	4798      	blx	r3
 8001b8e:	3601      	adds	r6, #1
 8001b90:	e7ee      	b.n	8001b70 <__libc_init_array+0xc>
 8001b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b96:	4798      	blx	r3
 8001b98:	3601      	adds	r6, #1
 8001b9a:	e7f2      	b.n	8001b82 <__libc_init_array+0x1e>
 8001b9c:	08001bc4 	.word	0x08001bc4
 8001ba0:	08001bc4 	.word	0x08001bc4
 8001ba4:	08001bc4 	.word	0x08001bc4
 8001ba8:	08001bc8 	.word	0x08001bc8

08001bac <_init>:
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bae:	bf00      	nop
 8001bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb2:	bc08      	pop	{r3}
 8001bb4:	469e      	mov	lr, r3
 8001bb6:	4770      	bx	lr

08001bb8 <_fini>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	bf00      	nop
 8001bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bbe:	bc08      	pop	{r3}
 8001bc0:	469e      	mov	lr, r3
 8001bc2:	4770      	bx	lr
