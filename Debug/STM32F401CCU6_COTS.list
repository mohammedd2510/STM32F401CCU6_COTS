
STM32F401CCU6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d98  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f2c  08000f2c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f2c  08000f2c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000f2c  08000f2c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f2c  08000f2c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f2c  08000f2c  00010f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000008  08000f3c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000f3c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002507  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c43  00000000  00000000  00022582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003a8  00000000  00000000  000231c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000155a  00000000  00000000  00023570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000209c  00000000  00000000  00024aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000064ae  00000000  00000000  00026b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000264  00000000  00000000  0002d014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b24  00000000  00000000  0002d278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0002dd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f14 	.word	0x08000f14

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000f14 	.word	0x08000f14

080001d4 <HButton_init>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void HButton_init(const button_t *btn)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	switch (btn->button_port)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	2b02      	cmp	r3, #2
 80001e2:	d010      	beq.n	8000206 <HButton_init+0x32>
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	dc13      	bgt.n	8000210 <HButton_init+0x3c>
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d002      	beq.n	80001f2 <HButton_init+0x1e>
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d005      	beq.n	80001fc <HButton_init+0x28>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 80001f0:	e00e      	b.n	8000210 <HButton_init+0x3c>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 80001f2:	2100      	movs	r1, #0
 80001f4:	2000      	movs	r0, #0
 80001f6:	f000 fd63 	bl	8000cc0 <RCC_voidEnablePeripheralClock>
	      break;
 80001fa:	e00a      	b.n	8000212 <HButton_init+0x3e>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80001fc:	2101      	movs	r1, #1
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 fd5e 	bl	8000cc0 <RCC_voidEnablePeripheralClock>
	      break;
 8000204:	e005      	b.n	8000212 <HButton_init+0x3e>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8000206:	2102      	movs	r1, #2
 8000208:	2000      	movs	r0, #0
 800020a:	f000 fd59 	bl	8000cc0 <RCC_voidEnablePeripheralClock>
	      break;
 800020e:	e000      	b.n	8000212 <HButton_init+0x3e>
	      break;
 8000210:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(btn->button_port,btn->button_pin,GPIO_INPUT_PIN_MODE);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	7858      	ldrb	r0, [r3, #1]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2200      	movs	r2, #0
 800021c:	4619      	mov	r1, r3
 800021e:	f000 faf1 	bl	8000804 <GPIO_voidSetPinMode>
	  if(btn->button_connection == BUTTON_ACTIVE_HIGH)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	78db      	ldrb	r3, [r3, #3]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d108      	bne.n	800023c <HButton_init+0x68>
	  {
		  GPIO_voidSetPinPullUpDownResistor(btn->button_port,btn->button_pin,GPIO_INPUT_PIN_PULL_DOWN);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	7858      	ldrb	r0, [r3, #1]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2202      	movs	r2, #2
 8000234:	4619      	mov	r1, r3
 8000236:	f000 fc4b 	bl	8000ad0 <GPIO_voidSetPinPullUpDownResistor>
	  }
	  else if (btn->button_connection == BUTTON_ACTIVE_LOW)
	  {
		  GPIO_voidSetPinPullUpDownResistor(btn->button_port,btn->button_pin,GPIO_INPUT_PIN_PULL_UP);
	  }
}
 800023a:	e00b      	b.n	8000254 <HButton_init+0x80>
	  else if (btn->button_connection == BUTTON_ACTIVE_LOW)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	78db      	ldrb	r3, [r3, #3]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d107      	bne.n	8000254 <HButton_init+0x80>
		  GPIO_voidSetPinPullUpDownResistor(btn->button_port,btn->button_pin,GPIO_INPUT_PIN_PULL_UP);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	7858      	ldrb	r0, [r3, #1]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2201      	movs	r2, #1
 800024e:	4619      	mov	r1, r3
 8000250:	f000 fc3e 	bl	8000ad0 <GPIO_voidSetPinPullUpDownResistor>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <LED_voidInit>:
#include "../../../Inc/HAL/LED/LED_interface.h"
#include "../../../Inc/HAL/LED/LED_private.h"


// Software Interfaces Definitions
void LED_voidInit(Led_t* REF_LedObj) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  switch (REF_LedObj->led_port) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	785b      	ldrb	r3, [r3, #1]
 8000268:	2b02      	cmp	r3, #2
 800026a:	d010      	beq.n	800028e <LED_voidInit+0x32>
 800026c:	2b02      	cmp	r3, #2
 800026e:	dc13      	bgt.n	8000298 <LED_voidInit+0x3c>
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <LED_voidInit+0x1e>
 8000274:	2b01      	cmp	r3, #1
 8000276:	d005      	beq.n	8000284 <LED_voidInit+0x28>
      break;
    case GPIO_PORTC:
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
      break;
    default:
      break;
 8000278:	e00e      	b.n	8000298 <LED_voidInit+0x3c>
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 800027a:	2100      	movs	r1, #0
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fd1f 	bl	8000cc0 <RCC_voidEnablePeripheralClock>
      break;
 8000282:	e00a      	b.n	800029a <LED_voidInit+0x3e>
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8000284:	2101      	movs	r1, #1
 8000286:	2000      	movs	r0, #0
 8000288:	f000 fd1a 	bl	8000cc0 <RCC_voidEnablePeripheralClock>
      break;
 800028c:	e005      	b.n	800029a <LED_voidInit+0x3e>
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 800028e:	2102      	movs	r1, #2
 8000290:	2000      	movs	r0, #0
 8000292:	f000 fd15 	bl	8000cc0 <RCC_voidEnablePeripheralClock>
      break;
 8000296:	e000      	b.n	800029a <LED_voidInit+0x3e>
      break;
 8000298:	bf00      	nop
  }
  GPIO_voidSetPinMode(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_OUTPUT_PIN_MODE);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	7858      	ldrb	r0, [r3, #1]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2201      	movs	r2, #1
 80002a4:	4619      	mov	r1, r3
 80002a6:	f000 faad 	bl	8000804 <GPIO_voidSetPinMode>
  GPIO_voidSetPinOutputMode(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_OUTPUT_PIN_PUSH_PULL);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	7858      	ldrb	r0, [r3, #1]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	f000 faff 	bl	80008b8 <GPIO_voidSetPinOutputMode>
  GPIO_voidSetPinOutputSpeed(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_OUTPUT_PIN_LOW_SPEED);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	7858      	ldrb	r0, [r3, #1]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2200      	movs	r2, #0
 80002c4:	4619      	mov	r1, r3
 80002c6:	f000 fb49 	bl	800095c <GPIO_voidSetPinOutputSpeed>
  GPIO_voidSetPinValue(REF_LedObj->led_port,REF_LedObj->led_pin,REF_LedObj->led_logic);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	7858      	ldrb	r0, [r3, #1]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	7819      	ldrb	r1, [r3, #0]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	789b      	ldrb	r3, [r3, #2]
 80002d6:	461a      	mov	r2, r3
 80002d8:	f000 fb9a 	bl	8000a10 <GPIO_voidSetPinValue>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <LED_voidOn>:
void LED_voidOn(Led_t* REF_LedObj) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
    GPIO_voidSetPinValue(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_HIGH);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7858      	ldrb	r0, [r3, #1]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2201      	movs	r2, #1
 80002f6:	4619      	mov	r1, r3
 80002f8:	f000 fb8a 	bl	8000a10 <GPIO_voidSetPinValue>
    REF_LedObj->led_logic = GPIO_HIGH;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2201      	movs	r2, #1
 8000300:	709a      	strb	r2, [r3, #2]
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <LED_voidOff>:
void LED_voidOff(Led_t* REF_LedObj) {
 800030a:	b580      	push	{r7, lr}
 800030c:	b082      	sub	sp, #8
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
    GPIO_voidSetPinValue(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_LOW);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	7858      	ldrb	r0, [r3, #1]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2200      	movs	r2, #0
 800031c:	4619      	mov	r1, r3
 800031e:	f000 fb77 	bl	8000a10 <GPIO_voidSetPinValue>
    REF_LedObj->led_logic = GPIO_LOW;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	709a      	strb	r2, [r3, #2]
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <LED_voidToggle>:
void LED_voidToggle(Led_t* REF_LedObj)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    if (REF_LedObj->led_logic == GPIO_HIGH)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	789b      	ldrb	r3, [r3, #2]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d103      	bne.n	8000348 <LED_voidToggle+0x18>
    {
        LED_voidOff(REF_LedObj);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f7ff ffe2 	bl	800030a <LED_voidOff>
    }
    else if(REF_LedObj->led_logic == GPIO_LOW){
        LED_voidOn(REF_LedObj);
    }
 8000346:	e006      	b.n	8000356 <LED_voidToggle+0x26>
    else if(REF_LedObj->led_logic == GPIO_LOW){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	789b      	ldrb	r3, [r3, #2]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d102      	bne.n	8000356 <LED_voidToggle+0x26>
        LED_voidOn(REF_LedObj);
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f7ff ffc7 	bl	80002e4 <LED_voidOn>
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MEXTI_voidInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MEXTI_voidInit(MEXTI_CONFIG_t* Copy_tEXTIConfig ,void (*pCallBackFunction)(void)){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]

	/*Enable EXTI Line mode interrupt or event*/
	switch(Copy_tEXTIConfig->MEXTI_Mode)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	78db      	ldrb	r3, [r3, #3]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <MEXTI_voidInit+0x18>
 8000372:	2b01      	cmp	r3, #1
 8000374:	d00c      	beq.n	8000390 <MEXTI_voidInit+0x30>
			break;
		case MEXTI_EVENT_MODE:
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 8000376:	e017      	b.n	80003a8 <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->IMR,Copy_tEXTIConfig->MEXTI_Line);
 8000378:	4b7a      	ldr	r3, [pc, #488]	; (8000564 <MEXTI_voidInit+0x204>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	7852      	ldrb	r2, [r2, #1]
 8000380:	4611      	mov	r1, r2
 8000382:	2201      	movs	r2, #1
 8000384:	408a      	lsls	r2, r1
 8000386:	4611      	mov	r1, r2
 8000388:	4a76      	ldr	r2, [pc, #472]	; (8000564 <MEXTI_voidInit+0x204>)
 800038a:	430b      	orrs	r3, r1
 800038c:	6013      	str	r3, [r2, #0]
			break;
 800038e:	e00b      	b.n	80003a8 <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
 8000390:	4b74      	ldr	r3, [pc, #464]	; (8000564 <MEXTI_voidInit+0x204>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	7852      	ldrb	r2, [r2, #1]
 8000398:	4611      	mov	r1, r2
 800039a:	2201      	movs	r2, #1
 800039c:	408a      	lsls	r2, r1
 800039e:	4611      	mov	r1, r2
 80003a0:	4a70      	ldr	r2, [pc, #448]	; (8000564 <MEXTI_voidInit+0x204>)
 80003a2:	430b      	orrs	r3, r1
 80003a4:	6053      	str	r3, [r2, #4]
			break;
 80003a6:	bf00      	nop
	}

	/*Set Notification function*/
	EXTI_pNotificationFunction[Copy_tEXTIConfig->MEXTI_Line] = pCallBackFunction;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	785b      	ldrb	r3, [r3, #1]
 80003ac:	4619      	mov	r1, r3
 80003ae:	4a6e      	ldr	r2, [pc, #440]	; (8000568 <MEXTI_voidInit+0x208>)
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*Set Sense Signal mode RISING, FALLING, ONCHANGE */
	switch(Copy_tEXTIConfig->MEXTI_SenseSignal){
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	789b      	ldrb	r3, [r3, #2]
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	d036      	beq.n	800042c <MEXTI_voidInit+0xcc>
 80003be:	2b02      	cmp	r3, #2
 80003c0:	dc4b      	bgt.n	800045a <MEXTI_voidInit+0xfa>
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d002      	beq.n	80003cc <MEXTI_voidInit+0x6c>
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d018      	beq.n	80003fc <MEXTI_voidInit+0x9c>
		case MEXTI_ONCHANGE:
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 80003ca:	e046      	b.n	800045a <MEXTI_voidInit+0xfa>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 80003cc:	4b65      	ldr	r3, [pc, #404]	; (8000564 <MEXTI_voidInit+0x204>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7852      	ldrb	r2, [r2, #1]
 80003d4:	4611      	mov	r1, r2
 80003d6:	2201      	movs	r2, #1
 80003d8:	408a      	lsls	r2, r1
 80003da:	4611      	mov	r1, r2
 80003dc:	4a61      	ldr	r2, [pc, #388]	; (8000564 <MEXTI_voidInit+0x204>)
 80003de:	430b      	orrs	r3, r1
 80003e0:	6093      	str	r3, [r2, #8]
			CLR_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 80003e2:	4b60      	ldr	r3, [pc, #384]	; (8000564 <MEXTI_voidInit+0x204>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	7852      	ldrb	r2, [r2, #1]
 80003ea:	4611      	mov	r1, r2
 80003ec:	2201      	movs	r2, #1
 80003ee:	408a      	lsls	r2, r1
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a5b      	ldr	r2, [pc, #364]	; (8000564 <MEXTI_voidInit+0x204>)
 80003f6:	400b      	ands	r3, r1
 80003f8:	60d3      	str	r3, [r2, #12]
			break;
 80003fa:	e02f      	b.n	800045c <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 80003fc:	4b59      	ldr	r3, [pc, #356]	; (8000564 <MEXTI_voidInit+0x204>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	7852      	ldrb	r2, [r2, #1]
 8000404:	4611      	mov	r1, r2
 8000406:	2201      	movs	r2, #1
 8000408:	408a      	lsls	r2, r1
 800040a:	4611      	mov	r1, r2
 800040c:	4a55      	ldr	r2, [pc, #340]	; (8000564 <MEXTI_voidInit+0x204>)
 800040e:	430b      	orrs	r3, r1
 8000410:	60d3      	str	r3, [r2, #12]
			CLR_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000412:	4b54      	ldr	r3, [pc, #336]	; (8000564 <MEXTI_voidInit+0x204>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7852      	ldrb	r2, [r2, #1]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	43d2      	mvns	r2, r2
 8000422:	4611      	mov	r1, r2
 8000424:	4a4f      	ldr	r2, [pc, #316]	; (8000564 <MEXTI_voidInit+0x204>)
 8000426:	400b      	ands	r3, r1
 8000428:	6093      	str	r3, [r2, #8]
			break;
 800042a:	e017      	b.n	800045c <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 800042c:	4b4d      	ldr	r3, [pc, #308]	; (8000564 <MEXTI_voidInit+0x204>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	7852      	ldrb	r2, [r2, #1]
 8000434:	4611      	mov	r1, r2
 8000436:	2201      	movs	r2, #1
 8000438:	408a      	lsls	r2, r1
 800043a:	4611      	mov	r1, r2
 800043c:	4a49      	ldr	r2, [pc, #292]	; (8000564 <MEXTI_voidInit+0x204>)
 800043e:	430b      	orrs	r3, r1
 8000440:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000442:	4b48      	ldr	r3, [pc, #288]	; (8000564 <MEXTI_voidInit+0x204>)
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7852      	ldrb	r2, [r2, #1]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	4611      	mov	r1, r2
 8000452:	4a44      	ldr	r2, [pc, #272]	; (8000564 <MEXTI_voidInit+0x204>)
 8000454:	430b      	orrs	r3, r1
 8000456:	60d3      	str	r3, [r2, #12]
			break;
 8000458:	e000      	b.n	800045c <MEXTI_voidInit+0xfc>
			break;
 800045a:	bf00      	nop
	}
	/* Enable SYSCFG Peripheral Clock*/
	RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_SYSCFGEN);
 800045c:	210e      	movs	r1, #14
 800045e:	2002      	movs	r0, #2
 8000460:	f000 fc2e 	bl	8000cc0 <RCC_voidEnablePeripheralClock>
	/*Set EXTI Port PORTA, PORTB, PORTC*/
	if(Copy_tEXTIConfig->MEXTI_Line < 4 && Copy_tEXTIConfig->MEXTI_Line >= 0)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	785b      	ldrb	r3, [r3, #1]
 8000468:	2b03      	cmp	r3, #3
 800046a:	d80e      	bhi.n	800048a <MEXTI_voidInit+0x12a>
	{
		SYSCFG_EXTICR0 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 800046c:	4b3f      	ldr	r3, [pc, #252]	; (800056c <MEXTI_voidInit+0x20c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	4611      	mov	r1, r2
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	7852      	ldrb	r2, [r2, #1]
 800047a:	0092      	lsls	r2, r2, #2
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a3a      	ldr	r2, [pc, #232]	; (800056c <MEXTI_voidInit+0x20c>)
 8000484:	430b      	orrs	r3, r1
 8000486:	6013      	str	r3, [r2, #0]
 8000488:	e043      	b.n	8000512 <MEXTI_voidInit+0x1b2>

	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 8 && Copy_tEXTIConfig->MEXTI_Line >= 4){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	785b      	ldrb	r3, [r3, #1]
 800048e:	2b07      	cmp	r3, #7
 8000490:	d812      	bhi.n	80004b8 <MEXTI_voidInit+0x158>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	2b03      	cmp	r3, #3
 8000498:	d90e      	bls.n	80004b8 <MEXTI_voidInit+0x158>
		SYSCFG_EXTICR1 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 800049a:	4b35      	ldr	r3, [pc, #212]	; (8000570 <MEXTI_voidInit+0x210>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	7812      	ldrb	r2, [r2, #0]
 80004a2:	4611      	mov	r1, r2
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	7852      	ldrb	r2, [r2, #1]
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	4611      	mov	r1, r2
 80004b0:	4a2f      	ldr	r2, [pc, #188]	; (8000570 <MEXTI_voidInit+0x210>)
 80004b2:	430b      	orrs	r3, r1
 80004b4:	6013      	str	r3, [r2, #0]
 80004b6:	e02c      	b.n	8000512 <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 12 && Copy_tEXTIConfig->MEXTI_Line >= 8){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	785b      	ldrb	r3, [r3, #1]
 80004bc:	2b0b      	cmp	r3, #11
 80004be:	d812      	bhi.n	80004e6 <MEXTI_voidInit+0x186>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	785b      	ldrb	r3, [r3, #1]
 80004c4:	2b07      	cmp	r3, #7
 80004c6:	d90e      	bls.n	80004e6 <MEXTI_voidInit+0x186>
		SYSCFG_EXTICR2 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 80004c8:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <MEXTI_voidInit+0x214>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7812      	ldrb	r2, [r2, #0]
 80004d0:	4611      	mov	r1, r2
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	7852      	ldrb	r2, [r2, #1]
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	fa01 f202 	lsl.w	r2, r1, r2
 80004dc:	4611      	mov	r1, r2
 80004de:	4a25      	ldr	r2, [pc, #148]	; (8000574 <MEXTI_voidInit+0x214>)
 80004e0:	430b      	orrs	r3, r1
 80004e2:	6013      	str	r3, [r2, #0]
 80004e4:	e015      	b.n	8000512 <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 16 && Copy_tEXTIConfig->MEXTI_Line >= 12){
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	785b      	ldrb	r3, [r3, #1]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d811      	bhi.n	8000512 <MEXTI_voidInit+0x1b2>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	785b      	ldrb	r3, [r3, #1]
 80004f2:	2b0b      	cmp	r3, #11
 80004f4:	d90d      	bls.n	8000512 <MEXTI_voidInit+0x1b2>
		SYSCFG_EXTICR3 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MEXTI_voidInit+0x218>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7812      	ldrb	r2, [r2, #0]
 80004fe:	4611      	mov	r1, r2
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	7852      	ldrb	r2, [r2, #1]
 8000504:	0092      	lsls	r2, r2, #2
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4a1a      	ldr	r2, [pc, #104]	; (8000578 <MEXTI_voidInit+0x218>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6013      	str	r3, [r2, #0]
	}

	/*Enable NVIC Mask for EXTI Line*/
	if(Copy_tEXTIConfig->MEXTI_Line <5){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	785b      	ldrb	r3, [r3, #1]
 8000516:	2b04      	cmp	r3, #4
 8000518:	d808      	bhi.n	800052c <MEXTI_voidInit+0x1cc>
		MNVIC_voidEnableIRQ(EXTI0_IRQn+Copy_tEXTIConfig->MEXTI_Line);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	785b      	ldrb	r3, [r3, #1]
 800051e:	3306      	adds	r3, #6
 8000520:	b2db      	uxtb	r3, r3
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f000 fb33 	bl	8000b90 <MNVIC_voidEnableIRQ>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
	}
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
	}
}
 800052a:	e016      	b.n	800055a <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 5 && Copy_tEXTIConfig->MEXTI_Line <= 9){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	785b      	ldrb	r3, [r3, #1]
 8000530:	2b04      	cmp	r3, #4
 8000532:	d907      	bls.n	8000544 <MEXTI_voidInit+0x1e4>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	785b      	ldrb	r3, [r3, #1]
 8000538:	2b09      	cmp	r3, #9
 800053a:	d803      	bhi.n	8000544 <MEXTI_voidInit+0x1e4>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
 800053c:	2017      	movs	r0, #23
 800053e:	f000 fb27 	bl	8000b90 <MNVIC_voidEnableIRQ>
}
 8000542:	e00a      	b.n	800055a <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	785b      	ldrb	r3, [r3, #1]
 8000548:	2b09      	cmp	r3, #9
 800054a:	d906      	bls.n	800055a <MEXTI_voidInit+0x1fa>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	785b      	ldrb	r3, [r3, #1]
 8000550:	2b0f      	cmp	r3, #15
 8000552:	d802      	bhi.n	800055a <MEXTI_voidInit+0x1fa>
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
 8000554:	2028      	movs	r0, #40	; 0x28
 8000556:	f000 fb1b 	bl	8000b90 <MNVIC_voidEnableIRQ>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40013c00 	.word	0x40013c00
 8000568:	20000028 	.word	0x20000028
 800056c:	40013800 	.word	0x40013800
 8000570:	40013804 	.word	0x40013804
 8000574:	40013808 	.word	0x40013808
 8000578:	4001380c 	.word	0x4001380c

0800057c <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MEXTI_voidClearPendingFlag+0x2c>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	2101      	movs	r1, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <MEXTI_voidClearPendingFlag+0x2c>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6153      	str	r3, [r2, #20]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40013c00 	.word	0x40013c00

080005ac <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MEXTI_u8GetPendingFlag+0x28>)
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	fa22 f303 	lsr.w	r3, r2, r3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40013c00 	.word	0x40013c00

080005d8 <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff ffcd 	bl	800057c <MEXTI_voidClearPendingFlag>
    if(EXTI_pNotificationFunction[0] != NULL){
 80005e2:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <EXTI0_IRQHandler+0x1c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d002      	beq.n	80005f0 <EXTI0_IRQHandler+0x18>
        EXTI_pNotificationFunction[0]();
 80005ea:	4b02      	ldr	r3, [pc, #8]	; (80005f4 <EXTI0_IRQHandler+0x1c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4798      	blx	r3
    }
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000028 	.word	0x20000028

080005f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f7ff ffbd 	bl	800057c <MEXTI_voidClearPendingFlag>
    if(EXTI_pNotificationFunction[1] != NULL){
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <EXTI1_IRQHandler+0x1c>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <EXTI1_IRQHandler+0x18>
        EXTI_pNotificationFunction[1]();
 800060a:	4b02      	ldr	r3, [pc, #8]	; (8000614 <EXTI1_IRQHandler+0x1c>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4798      	blx	r3
    }
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000028 	.word	0x20000028

08000618 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 800061c:	2002      	movs	r0, #2
 800061e:	f7ff ffad 	bl	800057c <MEXTI_voidClearPendingFlag>
    if(EXTI_pNotificationFunction[2] != NULL){
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <EXTI2_IRQHandler+0x1c>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <EXTI2_IRQHandler+0x18>
        EXTI_pNotificationFunction[2]();
 800062a:	4b02      	ldr	r3, [pc, #8]	; (8000634 <EXTI2_IRQHandler+0x1c>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	4798      	blx	r3
    }
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000028 	.word	0x20000028

08000638 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 800063c:	2003      	movs	r0, #3
 800063e:	f7ff ff9d 	bl	800057c <MEXTI_voidClearPendingFlag>
    if(EXTI_pNotificationFunction[3] != NULL){
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <EXTI3_IRQHandler+0x1c>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <EXTI3_IRQHandler+0x18>
        EXTI_pNotificationFunction[3]();
 800064a:	4b02      	ldr	r3, [pc, #8]	; (8000654 <EXTI3_IRQHandler+0x1c>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	4798      	blx	r3
    }
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000028 	.word	0x20000028

08000658 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 800065c:	2004      	movs	r0, #4
 800065e:	f7ff ff8d 	bl	800057c <MEXTI_voidClearPendingFlag>
    if(EXTI_pNotificationFunction[4] != NULL){
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <EXTI4_IRQHandler+0x1c>)
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <EXTI4_IRQHandler+0x18>
        EXTI_pNotificationFunction[4]();
 800066a:	4b02      	ldr	r3, [pc, #8]	; (8000674 <EXTI4_IRQHandler+0x1c>)
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	4798      	blx	r3
    }
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000028 	.word	0x20000028

08000678 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 800067c:	2005      	movs	r0, #5
 800067e:	f7ff ff95 	bl	80005ac <MEXTI_u8GetPendingFlag>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00a      	beq.n	800069e <EXTI9_5_IRQHandler+0x26>
	{
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 8000688:	2005      	movs	r0, #5
 800068a:	f7ff ff77 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[5] != NULL){
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d046      	beq.n	8000724 <EXTI9_5_IRQHandler+0xac>
			EXTI_pNotificationFunction[5]();
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
	}
}
 800069c:	e042      	b.n	8000724 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 800069e:	2006      	movs	r0, #6
 80006a0:	f7ff ff84 	bl	80005ac <MEXTI_u8GetPendingFlag>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00a      	beq.n	80006c0 <EXTI9_5_IRQHandler+0x48>
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 80006aa:	2006      	movs	r0, #6
 80006ac:	f7ff ff66 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[6] != NULL){
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d035      	beq.n	8000724 <EXTI9_5_IRQHandler+0xac>
			EXTI_pNotificationFunction[6]();
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4798      	blx	r3
}
 80006be:	e031      	b.n	8000724 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 80006c0:	2007      	movs	r0, #7
 80006c2:	f7ff ff73 	bl	80005ac <MEXTI_u8GetPendingFlag>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00a      	beq.n	80006e2 <EXTI9_5_IRQHandler+0x6a>
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 80006cc:	2007      	movs	r0, #7
 80006ce:	f7ff ff55 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[7] != NULL){
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d024      	beq.n	8000724 <EXTI9_5_IRQHandler+0xac>
			EXTI_pNotificationFunction[7]();
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4798      	blx	r3
}
 80006e0:	e020      	b.n	8000724 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 80006e2:	2008      	movs	r0, #8
 80006e4:	f7ff ff62 	bl	80005ac <MEXTI_u8GetPendingFlag>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00a      	beq.n	8000704 <EXTI9_5_IRQHandler+0x8c>
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 80006ee:	2008      	movs	r0, #8
 80006f0:	f7ff ff44 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[8] != NULL){
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 80006f6:	6a1b      	ldr	r3, [r3, #32]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d013      	beq.n	8000724 <EXTI9_5_IRQHandler+0xac>
			EXTI_pNotificationFunction[8]();
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4798      	blx	r3
}
 8000702:	e00f      	b.n	8000724 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 8000704:	2009      	movs	r0, #9
 8000706:	f7ff ff51 	bl	80005ac <MEXTI_u8GetPendingFlag>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d009      	beq.n	8000724 <EXTI9_5_IRQHandler+0xac>
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 8000710:	2009      	movs	r0, #9
 8000712:	f7ff ff33 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <EXTI9_5_IRQHandler+0xac>
			EXTI_pNotificationFunction[9]();
 800071e:	4b02      	ldr	r3, [pc, #8]	; (8000728 <EXTI9_5_IRQHandler+0xb0>)
 8000720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000722:	4798      	blx	r3
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000028 	.word	0x20000028

0800072c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 8000730:	200a      	movs	r0, #10
 8000732:	f7ff ff3b 	bl	80005ac <MEXTI_u8GetPendingFlag>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00a      	beq.n	8000752 <EXTI15_10_IRQHandler+0x26>
	{
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 800073c:	200a      	movs	r0, #10
 800073e:	f7ff ff1d 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[10] != NULL){
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 8000744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000746:	2b00      	cmp	r3, #0
 8000748:	d057      	beq.n	80007fa <EXTI15_10_IRQHandler+0xce>
			EXTI_pNotificationFunction[10]();
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 800074c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
	}
}
 8000750:	e053      	b.n	80007fa <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 8000752:	200b      	movs	r0, #11
 8000754:	f7ff ff2a 	bl	80005ac <MEXTI_u8GetPendingFlag>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00a      	beq.n	8000774 <EXTI15_10_IRQHandler+0x48>
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 800075e:	200b      	movs	r0, #11
 8000760:	f7ff ff0c 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[11] != NULL){
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 8000766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000768:	2b00      	cmp	r3, #0
 800076a:	d046      	beq.n	80007fa <EXTI15_10_IRQHandler+0xce>
			EXTI_pNotificationFunction[11]();
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 800076e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000770:	4798      	blx	r3
}
 8000772:	e042      	b.n	80007fa <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 8000774:	200c      	movs	r0, #12
 8000776:	f7ff ff19 	bl	80005ac <MEXTI_u8GetPendingFlag>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00a      	beq.n	8000796 <EXTI15_10_IRQHandler+0x6a>
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 8000780:	200c      	movs	r0, #12
 8000782:	f7ff fefb 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[12] != NULL){
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	2b00      	cmp	r3, #0
 800078c:	d035      	beq.n	80007fa <EXTI15_10_IRQHandler+0xce>
			EXTI_pNotificationFunction[12]();
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4798      	blx	r3
}
 8000794:	e031      	b.n	80007fa <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 8000796:	200d      	movs	r0, #13
 8000798:	f7ff ff08 	bl	80005ac <MEXTI_u8GetPendingFlag>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00a      	beq.n	80007b8 <EXTI15_10_IRQHandler+0x8c>
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 80007a2:	200d      	movs	r0, #13
 80007a4:	f7ff feea 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[13] != NULL){
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 80007aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d024      	beq.n	80007fa <EXTI15_10_IRQHandler+0xce>
			EXTI_pNotificationFunction[13]();
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 80007b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b4:	4798      	blx	r3
}
 80007b6:	e020      	b.n	80007fa <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 80007b8:	200e      	movs	r0, #14
 80007ba:	f7ff fef7 	bl	80005ac <MEXTI_u8GetPendingFlag>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00a      	beq.n	80007da <EXTI15_10_IRQHandler+0xae>
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 80007c4:	200e      	movs	r0, #14
 80007c6:	f7ff fed9 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[14] != NULL){
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 80007cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d013      	beq.n	80007fa <EXTI15_10_IRQHandler+0xce>
			EXTI_pNotificationFunction[14]();
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 80007d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007d6:	4798      	blx	r3
}
 80007d8:	e00f      	b.n	80007fa <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 80007da:	200f      	movs	r0, #15
 80007dc:	f7ff fee6 	bl	80005ac <MEXTI_u8GetPendingFlag>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d009      	beq.n	80007fa <EXTI15_10_IRQHandler+0xce>
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 80007e6:	200f      	movs	r0, #15
 80007e8:	f7ff fec8 	bl	800057c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 80007ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <EXTI15_10_IRQHandler+0xce>
			EXTI_pNotificationFunction[15]();
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <EXTI15_10_IRQHandler+0xd4>)
 80007f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007f8:	4798      	blx	r3
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000028 	.word	0x20000028

08000804 <GPIO_voidSetPinMode>:
#include"../../../Inc/MCAL/GPIO/GPIO_config.h"
#include"../../../Inc/MCAL/GPIO/GPIO_interface.h"
#include"../../../Inc/MCAL/GPIO/GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	460b      	mov	r3, r1
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	4613      	mov	r3, r2
 8000814:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d02c      	beq.n	8000876 <GPIO_voidSetPinMode+0x72>
 800081c:	2b02      	cmp	r3, #2
 800081e:	dc3d      	bgt.n	800089c <GPIO_voidSetPinMode+0x98>
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <GPIO_voidSetPinMode+0x26>
 8000824:	2b01      	cmp	r3, #1
 8000826:	d013      	beq.n	8000850 <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8000828:	e038      	b.n	800089c <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <GPIO_voidSetPinMode+0xa8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	79ba      	ldrb	r2, [r7, #6]
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	2103      	movs	r1, #3
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	43d2      	mvns	r2, r2
 800083a:	4013      	ands	r3, r2
 800083c:	7979      	ldrb	r1, [r7, #5]
 800083e:	79ba      	ldrb	r2, [r7, #6]
 8000840:	0052      	lsls	r2, r2, #1
 8000842:	fa01 f202 	lsl.w	r2, r1, r2
 8000846:	4611      	mov	r1, r2
 8000848:	4a18      	ldr	r2, [pc, #96]	; (80008ac <GPIO_voidSetPinMode+0xa8>)
 800084a:	430b      	orrs	r3, r1
 800084c:	6013      	str	r3, [r2, #0]
      break;
 800084e:	e026      	b.n	800089e <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <GPIO_voidSetPinMode+0xac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	0052      	lsls	r2, r2, #1
 8000858:	2103      	movs	r1, #3
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	43d2      	mvns	r2, r2
 8000860:	4013      	ands	r3, r2
 8000862:	7979      	ldrb	r1, [r7, #5]
 8000864:	79ba      	ldrb	r2, [r7, #6]
 8000866:	0052      	lsls	r2, r2, #1
 8000868:	fa01 f202 	lsl.w	r2, r1, r2
 800086c:	4611      	mov	r1, r2
 800086e:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <GPIO_voidSetPinMode+0xac>)
 8000870:	430b      	orrs	r3, r1
 8000872:	6013      	str	r3, [r2, #0]
      break;
 8000874:	e013      	b.n	800089e <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <GPIO_voidSetPinMode+0xb0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	0052      	lsls	r2, r2, #1
 800087e:	2103      	movs	r1, #3
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	43d2      	mvns	r2, r2
 8000886:	4013      	ands	r3, r2
 8000888:	7979      	ldrb	r1, [r7, #5]
 800088a:	79ba      	ldrb	r2, [r7, #6]
 800088c:	0052      	lsls	r2, r2, #1
 800088e:	fa01 f202 	lsl.w	r2, r1, r2
 8000892:	4611      	mov	r1, r2
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <GPIO_voidSetPinMode+0xb0>)
 8000896:	430b      	orrs	r3, r1
 8000898:	6013      	str	r3, [r2, #0]
      break;
 800089a:	e000      	b.n	800089e <GPIO_voidSetPinMode+0x9a>
      break;
 800089c:	bf00      	nop
  }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020400 	.word	0x40020400
 80008b4:	40020800 	.word	0x40020800

080008b8 <GPIO_voidSetPinOutputMode>:
void GPIO_voidSetPinOutputMode(port_index_t Copy_PortIndex,
                               pin_index_t Copy_PinIndex,
                               output_pin_mode_t Copy_OutputPinMode) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	460b      	mov	r3, r1
 80008c4:	71bb      	strb	r3, [r7, #6]
 80008c6:	4613      	mov	r3, r2
 80008c8:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d028      	beq.n	8000922 <GPIO_voidSetPinOutputMode+0x6a>
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	dc37      	bgt.n	8000944 <GPIO_voidSetPinOutputMode+0x8c>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <GPIO_voidSetPinOutputMode+0x26>
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d011      	beq.n	8000900 <GPIO_voidSetPinOutputMode+0x48>
    case GPIO_PORTC:
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
                 Copy_OutputPinMode << Copy_PinIndex);
      break;
    default:
      break;
 80008dc:	e032      	b.n	8000944 <GPIO_voidSetPinOutputMode+0x8c>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <GPIO_voidSetPinOutputMode+0x9c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	79ba      	ldrb	r2, [r7, #6]
 80008e4:	2101      	movs	r1, #1
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	43d2      	mvns	r2, r2
 80008ec:	4013      	ands	r3, r2
 80008ee:	7979      	ldrb	r1, [r7, #5]
 80008f0:	79ba      	ldrb	r2, [r7, #6]
 80008f2:	fa01 f202 	lsl.w	r2, r1, r2
 80008f6:	4611      	mov	r1, r2
 80008f8:	4a16      	ldr	r2, [pc, #88]	; (8000954 <GPIO_voidSetPinOutputMode+0x9c>)
 80008fa:	430b      	orrs	r3, r1
 80008fc:	6013      	str	r3, [r2, #0]
      break;
 80008fe:	e022      	b.n	8000946 <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <GPIO_voidSetPinOutputMode+0x9c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	79ba      	ldrb	r2, [r7, #6]
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	43d2      	mvns	r2, r2
 800090e:	4013      	ands	r3, r2
 8000910:	7979      	ldrb	r1, [r7, #5]
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	fa01 f202 	lsl.w	r2, r1, r2
 8000918:	4611      	mov	r1, r2
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <GPIO_voidSetPinOutputMode+0x9c>)
 800091c:	430b      	orrs	r3, r1
 800091e:	6013      	str	r3, [r2, #0]
      break;
 8000920:	e011      	b.n	8000946 <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <GPIO_voidSetPinOutputMode+0xa0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	79ba      	ldrb	r2, [r7, #6]
 8000928:	2101      	movs	r1, #1
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	43d2      	mvns	r2, r2
 8000930:	4013      	ands	r3, r2
 8000932:	7979      	ldrb	r1, [r7, #5]
 8000934:	79ba      	ldrb	r2, [r7, #6]
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	4611      	mov	r1, r2
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <GPIO_voidSetPinOutputMode+0xa0>)
 800093e:	430b      	orrs	r3, r1
 8000940:	6013      	str	r3, [r2, #0]
      break;
 8000942:	e000      	b.n	8000946 <GPIO_voidSetPinOutputMode+0x8e>
      break;
 8000944:	bf00      	nop
  }
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40020404 	.word	0x40020404
 8000958:	40020804 	.word	0x40020804

0800095c <GPIO_voidSetPinOutputSpeed>:
void GPIO_voidSetPinOutputSpeed(port_index_t Copy_PortIndex,
                                pin_index_t Copy_PinIndex,
                                output_pin_speed_mode_t Copy_OutputPinSpeed) {
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	460b      	mov	r3, r1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	4613      	mov	r3, r2
 800096c:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d02c      	beq.n	80009ce <GPIO_voidSetPinOutputSpeed+0x72>
 8000974:	2b02      	cmp	r3, #2
 8000976:	dc3d      	bgt.n	80009f4 <GPIO_voidSetPinOutputSpeed+0x98>
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <GPIO_voidSetPinOutputSpeed+0x26>
 800097c:	2b01      	cmp	r3, #1
 800097e:	d013      	beq.n	80009a8 <GPIO_voidSetPinOutputSpeed+0x4c>
      MODIFY_REG(GPIOC_OSPEEDR,
                 GPIO_MODER_CLEAR_MASK << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex,
                 Copy_OutputPinSpeed << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8000980:	e038      	b.n	80009f4 <GPIO_voidSetPinOutputSpeed+0x98>
      MODIFY_REG(
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	0052      	lsls	r2, r2, #1
 800098a:	2103      	movs	r1, #3
 800098c:	fa01 f202 	lsl.w	r2, r1, r2
 8000990:	43d2      	mvns	r2, r2
 8000992:	4013      	ands	r3, r2
 8000994:	7979      	ldrb	r1, [r7, #5]
 8000996:	79ba      	ldrb	r2, [r7, #6]
 8000998:	0052      	lsls	r2, r2, #1
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	4611      	mov	r1, r2
 80009a0:	4a18      	ldr	r2, [pc, #96]	; (8000a04 <GPIO_voidSetPinOutputSpeed+0xa8>)
 80009a2:	430b      	orrs	r3, r1
 80009a4:	6013      	str	r3, [r2, #0]
      break;
 80009a6:	e026      	b.n	80009f6 <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <GPIO_voidSetPinOutputSpeed+0xac>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	79ba      	ldrb	r2, [r7, #6]
 80009ae:	0052      	lsls	r2, r2, #1
 80009b0:	2103      	movs	r1, #3
 80009b2:	fa01 f202 	lsl.w	r2, r1, r2
 80009b6:	43d2      	mvns	r2, r2
 80009b8:	4013      	ands	r3, r2
 80009ba:	7979      	ldrb	r1, [r7, #5]
 80009bc:	79ba      	ldrb	r2, [r7, #6]
 80009be:	0052      	lsls	r2, r2, #1
 80009c0:	fa01 f202 	lsl.w	r2, r1, r2
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <GPIO_voidSetPinOutputSpeed+0xac>)
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6013      	str	r3, [r2, #0]
      break;
 80009cc:	e013      	b.n	80009f6 <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(GPIOC_OSPEEDR,
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <GPIO_voidSetPinOutputSpeed+0xb0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	79ba      	ldrb	r2, [r7, #6]
 80009d4:	0052      	lsls	r2, r2, #1
 80009d6:	2103      	movs	r1, #3
 80009d8:	fa01 f202 	lsl.w	r2, r1, r2
 80009dc:	43d2      	mvns	r2, r2
 80009de:	4013      	ands	r3, r2
 80009e0:	7979      	ldrb	r1, [r7, #5]
 80009e2:	79ba      	ldrb	r2, [r7, #6]
 80009e4:	0052      	lsls	r2, r2, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	4611      	mov	r1, r2
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <GPIO_voidSetPinOutputSpeed+0xb0>)
 80009ee:	430b      	orrs	r3, r1
 80009f0:	6013      	str	r3, [r2, #0]
      break;
 80009f2:	e000      	b.n	80009f6 <GPIO_voidSetPinOutputSpeed+0x9a>
      break;
 80009f4:	bf00      	nop
  }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40020008 	.word	0x40020008
 8000a08:	40020408 	.word	0x40020408
 8000a0c:	40020808 	.word	0x40020808

08000a10 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	71bb      	strb	r3, [r7, #6]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d02c      	beq.n	8000a82 <GPIO_voidSetPinValue+0x72>
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	dc3d      	bgt.n	8000aa8 <GPIO_voidSetPinValue+0x98>
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <GPIO_voidSetPinValue+0x26>
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d013      	beq.n	8000a5c <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 8000a34:	e038      	b.n	8000aa8 <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8000a36:	797b      	ldrb	r3, [r7, #5]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d105      	bne.n	8000a48 <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	409a      	lsls	r2, r3
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <GPIO_voidSetPinValue+0xb4>)
 8000a44:	601a      	str	r2, [r3, #0]
      break;
 8000a46:	e031      	b.n	8000aac <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8000a48:	797b      	ldrb	r3, [r7, #5]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d12e      	bne.n	8000aac <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a54:	409a      	lsls	r2, r3
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <GPIO_voidSetPinValue+0xb4>)
 8000a58:	601a      	str	r2, [r3, #0]
      break;
 8000a5a:	e027      	b.n	8000aac <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d105      	bne.n	8000a6e <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	2201      	movs	r2, #1
 8000a66:	409a      	lsls	r2, r3
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <GPIO_voidSetPinValue+0xb8>)
 8000a6a:	601a      	str	r2, [r3, #0]
      break;
 8000a6c:	e020      	b.n	8000ab0 <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8000a6e:	797b      	ldrb	r3, [r7, #5]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d11d      	bne.n	8000ab0 <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <GPIO_voidSetPinValue+0xb8>)
 8000a7e:	601a      	str	r2, [r3, #0]
      break;
 8000a80:	e016      	b.n	8000ab0 <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8000a82:	797b      	ldrb	r3, [r7, #5]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d105      	bne.n	8000a94 <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <GPIO_voidSetPinValue+0xbc>)
 8000a90:	601a      	str	r2, [r3, #0]
      break;
 8000a92:	e00f      	b.n	8000ab4 <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8000a94:	797b      	ldrb	r3, [r7, #5]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10c      	bne.n	8000ab4 <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <GPIO_voidSetPinValue+0xbc>)
 8000aa4:	601a      	str	r2, [r3, #0]
      break;
 8000aa6:	e005      	b.n	8000ab4 <GPIO_voidSetPinValue+0xa4>
      break;
 8000aa8:	bf00      	nop
 8000aaa:	e004      	b.n	8000ab6 <GPIO_voidSetPinValue+0xa6>
      break;
 8000aac:	bf00      	nop
 8000aae:	e002      	b.n	8000ab6 <GPIO_voidSetPinValue+0xa6>
      break;
 8000ab0:	bf00      	nop
 8000ab2:	e000      	b.n	8000ab6 <GPIO_voidSetPinValue+0xa6>
      break;
 8000ab4:	bf00      	nop
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40020018 	.word	0x40020018
 8000ac8:	40020418 	.word	0x40020418
 8000acc:	40020818 	.word	0x40020818

08000ad0 <GPIO_voidSetPinPullUpDownResistor>:
void GPIO_voidSetPinPullUpDownResistor(port_index_t Copy_PortIndex,
                                       pin_index_t Copy_PinIndex,
                                       input_pin_mode_t Copy_InputPinMode) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	460b      	mov	r3, r1
 8000adc:	71bb      	strb	r3, [r7, #6]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d02c      	beq.n	8000b42 <GPIO_voidSetPinPullUpDownResistor+0x72>
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	dc3d      	bgt.n	8000b68 <GPIO_voidSetPinPullUpDownResistor+0x98>
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <GPIO_voidSetPinPullUpDownResistor+0x26>
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d013      	beq.n	8000b1c <GPIO_voidSetPinPullUpDownResistor+0x4c>
      MODIFY_REG(GPIOC_PUPDR,
                 GPIO_PUPDR_CLEAR_MASK << GPIO_PUPDR_PIN_BITS * Copy_PinIndex,
                 Copy_InputPinMode << GPIO_PUPDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8000af4:	e038      	b.n	8000b68 <GPIO_voidSetPinPullUpDownResistor+0x98>
      MODIFY_REG(GPIOA_PUPDR,
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	0052      	lsls	r2, r2, #1
 8000afe:	2103      	movs	r1, #3
 8000b00:	fa01 f202 	lsl.w	r2, r1, r2
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	4013      	ands	r3, r2
 8000b08:	7979      	ldrb	r1, [r7, #5]
 8000b0a:	79ba      	ldrb	r2, [r7, #6]
 8000b0c:	0052      	lsls	r2, r2, #1
 8000b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b12:	4611      	mov	r1, r2
 8000b14:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 8000b16:	430b      	orrs	r3, r1
 8000b18:	6013      	str	r3, [r2, #0]
      break;
 8000b1a:	e026      	b.n	8000b6a <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOB_PUPDR,
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <GPIO_voidSetPinPullUpDownResistor+0xac>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	79ba      	ldrb	r2, [r7, #6]
 8000b22:	0052      	lsls	r2, r2, #1
 8000b24:	2103      	movs	r1, #3
 8000b26:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2a:	43d2      	mvns	r2, r2
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	7979      	ldrb	r1, [r7, #5]
 8000b30:	79ba      	ldrb	r2, [r7, #6]
 8000b32:	0052      	lsls	r2, r2, #1
 8000b34:	fa01 f202 	lsl.w	r2, r1, r2
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <GPIO_voidSetPinPullUpDownResistor+0xac>)
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	6013      	str	r3, [r2, #0]
      break;
 8000b40:	e013      	b.n	8000b6a <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOC_PUPDR,
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	79ba      	ldrb	r2, [r7, #6]
 8000b48:	0052      	lsls	r2, r2, #1
 8000b4a:	2103      	movs	r1, #3
 8000b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b50:	43d2      	mvns	r2, r2
 8000b52:	4013      	ands	r3, r2
 8000b54:	7979      	ldrb	r1, [r7, #5]
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	0052      	lsls	r2, r2, #1
 8000b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 8000b62:	430b      	orrs	r3, r1
 8000b64:	6013      	str	r3, [r2, #0]
      break;
 8000b66:	e000      	b.n	8000b6a <GPIO_voidSetPinPullUpDownResistor+0x9a>
      break;
 8000b68:	bf00      	nop
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	4002000c 	.word	0x4002000c
 8000b7c:	4002040c 	.word	0x4002040c
 8000b80:	4002080c 	.word	0x4002080c

08000b84 <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 8000b88:	f000 f8da 	bl	8000d40 <MSCB_voidSetPriorityGrouping>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <MNVIC_voidEnableIRQ>:

void MNVIC_voidEnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <MNVIC_voidEnableIRQ+0x2a>
	{
		NVIC->ISER[((u32)IRQn >> 5)] = (1UL << ((u32)IRQn & 0x1F));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <MNVIC_voidEnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <RCC_void_HSI_Init>:
static void RCC_void_APB2Prescaler_Init(void);
/************************************************/

/******* Local Functions Implementation ********/
static void RCC_void_HSI_Init(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Enable HSI
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <RCC_void_HSI_Init+0x58>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <RCC_void_HSI_Init+0x58>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE  
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <RCC_void_HSI_Init+0x58>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <RCC_void_HSI_Init+0x58>)
 8000be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be6:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <RCC_void_HSI_Init+0x58>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <RCC_void_HSI_Init+0x58>)
 8000bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bf2:	6013      	str	r3, [r2, #0]
    // Polling (Busy Wait)
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
 8000bf4:	bf00      	nop
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <RCC_void_HSI_Init+0x58>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f9      	beq.n	8000bf6 <RCC_void_HSI_Init+0x2a>
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <RCC_void_HSI_Init+0x5c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <RCC_void_HSI_Init+0x5c>)
 8000c08:	f023 0301 	bic.w	r3, r3, #1
 8000c0c:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <RCC_void_HSI_Init+0x5c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <RCC_void_HSI_Init+0x5c>)
 8000c14:	f023 0302 	bic.w	r3, r3, #2
 8000c18:	6013      	str	r3, [r2, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40023808 	.word	0x40023808

08000c2c <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_1;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_2
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c3a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_2;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <RCC_void_AHB1Prescaler_Init+0x28>)
 8000c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c46:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023808 	.word	0x40023808

08000c58 <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <RCC_void_APB1Prescaler_Init+0x24>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <RCC_void_APB1Prescaler_Init+0x24>)
 8000c62:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c66:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <RCC_void_APB1Prescaler_Init+0x24>)
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <RCC_void_APB1Prescaler_Init+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023808 	.word	0x40023808

08000c80 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <RCC_void_APB2Prescaler_Init+0x24>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <RCC_void_APB2Prescaler_Init+0x24>)
 8000c8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c8e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <RCC_void_APB2Prescaler_Init+0x24>)
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <RCC_void_APB2Prescaler_Init+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023808 	.word	0x40023808

08000ca8 <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
 8000cac:	f7ff ff8e 	bl	8000bcc <RCC_void_HSI_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 8000cb0:	f7ff ffbc 	bl	8000c2c <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 8000cb4:	f7ff ffd0 	bl	8000c58 <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 8000cb8:	f7ff ffe2 	bl	8000c80 <RCC_void_APB2Prescaler_Init>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	460a      	mov	r2, r1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d01c      	beq.n	8000d10 <RCC_voidEnablePeripheralClock+0x50>
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	dc25      	bgt.n	8000d26 <RCC_voidEnablePeripheralClock+0x66>
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <RCC_voidEnablePeripheralClock+0x24>
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00b      	beq.n	8000cfa <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 8000ce2:	e020      	b.n	8000d26 <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <RCC_voidEnablePeripheralClock+0x74>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	79ba      	ldrb	r2, [r7, #6]
 8000cea:	2101      	movs	r1, #1
 8000cec:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <RCC_voidEnablePeripheralClock+0x74>)
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6013      	str	r3, [r2, #0]
        break;
 8000cf8:	e016      	b.n	8000d28 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <RCC_voidEnablePeripheralClock+0x78>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	79ba      	ldrb	r2, [r7, #6]
 8000d00:	2101      	movs	r1, #1
 8000d02:	fa01 f202 	lsl.w	r2, r1, r2
 8000d06:	4611      	mov	r1, r2
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <RCC_voidEnablePeripheralClock+0x78>)
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6013      	str	r3, [r2, #0]
        break;
 8000d0e:	e00b      	b.n	8000d28 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <RCC_voidEnablePeripheralClock+0x7c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	79ba      	ldrb	r2, [r7, #6]
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <RCC_voidEnablePeripheralClock+0x7c>)
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6013      	str	r3, [r2, #0]
        break;  
 8000d24:	e000      	b.n	8000d28 <RCC_voidEnablePeripheralClock+0x68>
        break;
 8000d26:	bf00      	nop
    }
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40023830 	.word	0x40023830
 8000d38:	40023840 	.word	0x40023840
 8000d3c:	40023844 	.word	0x40023844

08000d40 <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MSCB_voidSetPriorityGrouping+0x44>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	021a      	lsls	r2, r3, #8
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6e:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <MSCB_voidSetPriorityGrouping+0x44>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60d3      	str	r3, [r2, #12]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_Pos);
#elif (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8)
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MSysTick_voidInit+0x34>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <MSysTick_voidInit+0x34>)
 8000d92:	f023 0304 	bic.w	r3, r3, #4
 8000d96:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MSysTick_voidInit+0x34>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <MSysTick_voidInit+0x34>)
 8000d9e:	f023 0302 	bic.w	r3, r3, #2
 8000da2:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <MSysTick_voidInit+0x34>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <MSysTick_voidInit+0x34>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MSysTick_voidDeInit+0x34>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <MSysTick_voidDeInit+0x34>)
 8000dca:	f023 0301 	bic.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MSysTick_voidDeInit+0x34>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <MSysTick_voidDeInit+0x34>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <MSysTick_voidDeInit+0x34>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <MSysTick_voidDeInit+0x34>)
 8000de2:	f023 0302 	bic.w	r3, r3, #2
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <SysTick_Handler>:
{
	SysTick->LOAD = Copy_u32Ticks;
	SysTick->VAL = 0;
}
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <SysTick_Handler+0x24>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 8000e06:	f7ff ffdb 	bl	8000dc0 <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Handler+0x28>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <SysTick_Handler+0x28>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4798      	blx	r3
	}
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000006c 	.word	0x2000006c
 8000e20:	20000068 	.word	0x20000068

08000e24 <EXTI0_Handler>:
 ******************************************************************************
 */
#include"main.h"

// ----------------------------------------------------------------------------
void EXTI0_Handler(void){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	LED_voidToggle(&led_red1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <EXTI0_Handler+0x10>)
 8000e2a:	f7ff fa81 	bl	8000330 <LED_voidToggle>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000004 	.word	0x20000004

08000e38 <main>:

int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	MEXTI_voidInit(&EXTI0_CONFIG,EXTI0_Handler);
 8000e3c:	4905      	ldr	r1, [pc, #20]	; (8000e54 <main+0x1c>)
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <main+0x20>)
 8000e40:	f7ff fa8e 	bl	8000360 <MEXTI_voidInit>
	LED_voidInit(&led_red1);
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <main+0x24>)
 8000e46:	f7ff fa09 	bl	800025c <LED_voidInit>
	HButton_init(&btn1);
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <main+0x28>)
 8000e4c:	f7ff f9c2 	bl	80001d4 <HButton_init>
    /* Loop forever */
	while(1){
		asm("NOP");
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <main+0x18>
 8000e54:	08000e25 	.word	0x08000e25
 8000e58:	20000024 	.word	0x20000024
 8000e5c:	20000004 	.word	0x20000004
 8000e60:	20000000 	.word	0x20000000

08000e64 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8000e68:	f7ff ff1e 	bl	8000ca8 <RCC_voidInit>
	MSysTick_voidInit();
 8000e6c:	f7ff ff8c 	bl	8000d88 <MSysTick_voidInit>
	MNVIC_voidInit();
 8000e70:	f7ff fe88 	bl	8000b84 <MNVIC_voidInit>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e7c:	f7ff fff2 	bl	8000e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <LoopForever+0xe>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <LoopForever+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ea6:	f000 f811 	bl	8000ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eaa:	f7ff ffc5 	bl	8000e38 <main>

08000eae <LoopForever>:

LoopForever:
  b LoopForever
 8000eae:	e7fe      	b.n	8000eae <LoopForever>
  ldr   r0, =_estack
 8000eb0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000ebc:	08000f34 	.word	0x08000f34
  ldr r2, =_sbss
 8000ec0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000ec4:	20000070 	.word	0x20000070

08000ec8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <__libc_init_array>:
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	4d0d      	ldr	r5, [pc, #52]	; (8000f04 <__libc_init_array+0x38>)
 8000ed0:	4c0d      	ldr	r4, [pc, #52]	; (8000f08 <__libc_init_array+0x3c>)
 8000ed2:	1b64      	subs	r4, r4, r5
 8000ed4:	10a4      	asrs	r4, r4, #2
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	42a6      	cmp	r6, r4
 8000eda:	d109      	bne.n	8000ef0 <__libc_init_array+0x24>
 8000edc:	4d0b      	ldr	r5, [pc, #44]	; (8000f0c <__libc_init_array+0x40>)
 8000ede:	4c0c      	ldr	r4, [pc, #48]	; (8000f10 <__libc_init_array+0x44>)
 8000ee0:	f000 f818 	bl	8000f14 <_init>
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	10a4      	asrs	r4, r4, #2
 8000ee8:	2600      	movs	r6, #0
 8000eea:	42a6      	cmp	r6, r4
 8000eec:	d105      	bne.n	8000efa <__libc_init_array+0x2e>
 8000eee:	bd70      	pop	{r4, r5, r6, pc}
 8000ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ef4:	4798      	blx	r3
 8000ef6:	3601      	adds	r6, #1
 8000ef8:	e7ee      	b.n	8000ed8 <__libc_init_array+0xc>
 8000efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000efe:	4798      	blx	r3
 8000f00:	3601      	adds	r6, #1
 8000f02:	e7f2      	b.n	8000eea <__libc_init_array+0x1e>
 8000f04:	08000f2c 	.word	0x08000f2c
 8000f08:	08000f2c 	.word	0x08000f2c
 8000f0c:	08000f2c 	.word	0x08000f2c
 8000f10:	08000f30 	.word	0x08000f30

08000f14 <_init>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	bf00      	nop
 8000f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1a:	bc08      	pop	{r3}
 8000f1c:	469e      	mov	lr, r3
 8000f1e:	4770      	bx	lr

08000f20 <_fini>:
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f22:	bf00      	nop
 8000f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f26:	bc08      	pop	{r3}
 8000f28:	469e      	mov	lr, r3
 8000f2a:	4770      	bx	lr
